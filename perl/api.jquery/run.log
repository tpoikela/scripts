#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/add.xml ####
Possible keys are: signature category name type longdesc example desc return title
$VAR1 = {
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'name' => 'selector',
                                         'type' => 'Selector',
                                         'desc' => 'A string representing a selector expression to find additional elements to add to the set of matched elements.'
                                       }
                         },
                         {
                           'argument' => {
                                         'desc' => 'One or more elements to add to the set of matched elements.',
                                         'name' => 'elements',
                                         'type' => 'Element'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'type' => 'htmlString',
                                         'name' => 'html',
                                         'desc' => 'An HTML fragment to add to the set of matched elements.'
                                       }
                         },
                         {
                           'added' => '1.3.2',
                           'argument' => {
                                         'name' => 'selection',
                                         'type' => 'jQuery',
                                         'desc' => 'An existing jQuery object to add to the set of matched elements.'
                                       }
                         },
                         {
                           'argument' => {
                                         'context' => {
                                                      'type' => 'Element',
                                                      'desc' => {
                                                                'content' => [
                                                                               'The point in the document at which the selector should begin matching; similar to the context argument of the ',
                                                                               ' method.'
                                                                             ],
                                                                'code' => '$(selector, context)'
                                                              }
                                                    },
                                         'selector' => {
                                                       'desc' => 'A string representing a selector expression to find additional elements to add to the set of matched elements.',
                                                       'type' => 'Selector'
                                                     }
                                       },
                           'added' => '1.4'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'traversing/miscellaneous-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'name' => 'add',
          'type' => 'method',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$( "p" ).add( "div" ).addClass( "widget" );
var pdiv = $( "p" ).add( "div" );
    '
                                 },
                                 {
                                   'code' => '
var pdiv = $( "p" );
pdiv.add( "div" ); // WRONG, pdiv will not change
    '
                                 },
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li>list item 3</li>
</ul>
<p>a paragraph</p>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).add( "p" ).css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).add( document.getElementsByTagName( "p" )[ 0 ] )
  .css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).add( "<p id=\'new\'>new paragraph</p>" )
  .css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method constructs a new jQuery object from the union of those elements and the ones passed into the method. The argument to ',
                                                ' can be pretty much anything that ',
                                                ' accepts, including a jQuery selector expression, references to DOM elements, or an HTML snippet.'
                                              ],
                                 'code' => [
                                           '.add()',
                                           '.add()',
                                           '$()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Do not assume that this method appends the elements to the existing collection in the order they are passed to the ',
                                                ' method. When all elements are members of the same document, the resulting collection from ',
                                                ' will be sorted in document order; that is, in order of each element\'s appearance in the document. If the collection consists of elements from different documents or ones not in any document, the sort order is undefined. To create a jQuery object with elements in a well-defined order and without sorting overhead, use the ',
                                                ' signature.'
                                              ],
                                 'code' => [
                                           '.add()',
                                           '.add()',
                                           '$(array_of_DOM_elements)'
                                         ]
                               },
                               'The updated set of elements can be used in a following (chained) method, or assigned to a variable for later use. For example:',
                               {
                                 'code' => '.add()',
                                 'content' => [
                                                'The following will ',
                                                ' save the added elements, because the ',
                                                ' method creates a new set and leaves the original set in pdiv unchanged:'
                                              ],
                                 'em' => 'not'
                               },
                               'Consider a page with a simple list and a paragraph following it:',
                               {
                                 'code' => '.add()',
                                 'content' => [
                                                'We can select the list items and then the paragraph by using either a selector or a reference to the DOM element itself as the ',
                                                ' method\'s argument:'
                                              ]
                               },
                               'Or:',
                               {
                                 'code' => '.add()',
                                 'content' => [
                                                'The result of this call is a red background behind all four elements.
Using an HTML snippet as the ',
                                                ' method\'s argument (as in the third version), we can create additional elements on the fly and add those elements to the matched set of elements. Let\'s say, for example, that we want to alter the background of the list items along with a newly created paragraph:'
                                              ]
                               },
                               'Although the new paragraph has been created and its background color changed, it still does not appear on the page. To place it on the page, we could add one of the insertion methods to the chain.',
                               'As of jQuery 1.4 the results from .add() will always be returned in document order (rather than a simple concatenation).',
                               {
                                 'code' => '.add()',
                                 'content' => [
                                                ' To reverse the ',
                                                ' you can use ',
                                                ' to remove elements from the jQuery results, or ',
                                                ' to return to the selection before you added.'
                                              ],
                                 'strong' => 'Note:',
                                 'a' => [
                                        {
                                          'href' => '/not/',
                                          'code' => '.not( elements | selector )'
                                        },
                                        {
                                          'code' => '.end()',
                                          'href' => '/end/'
                                        }
                                      ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'desc' => 'Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.',
                         'html' => '
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>

<p>Added this... (notice no border)</p>
',
                         'css' => '
  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
  }
  p {
    clear: left;
    font-weight: bold;
    font-size: 16px;
    color: blue;
    margin: 0 10px;
    padding: 2px;
  }
',
                         'code' => '
$( "div" ).css( "border", "2px solid red" )
  .add( "p" )
  .css( "background", "yellow" );
'
                       },
                       {
                         'desc' => 'Adds more elements, matched by the given expression, to the set of matched elements.',
                         'html' => '
<p>Hello</p>
<span>Hello Again</span>
',
                         'code' => '
$( "p" ).add( "span" ).css( "background", "yellow" );
'
                       },
                       {
                         'html' => '
<p>Hello</p>
',
                         'desc' => 'Adds more elements, created on the fly, to the set of matched elements.',
                         'code' => '
$( "p" ).clone().add( "<span>Again</span>" ).appendTo( document.body );
'
                       },
                       {
                         'desc' => 'Adds one or more Elements to the set of matched elements.',
                         'html' => '
<p>Hello</p>
<span id="a">Hello Again</span>
',
                         'code' => '
$( "p" ).add( document.getElementById( "a" ) ).css( "background", "yellow" );
'
                       },
                       {
                         'desc' => 'Demonstrates how to add (or push) elements to an existing collection',
                         'html' => '
<p>Hello</p>
<span id="a">Hello Again</span>
',
                         'code' => '
var collection = $( "p" );
// Capture the new collection
collection = collection.add( document.getElementById( "a" ) );
collection.css( "background", "yellow" );
'
                       }
                     ],
          'desc' => 'Create a new jQuery object with elements added to the set of matched elements.',
          'return' => 'jQuery',
          'title' => '.add()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/addBack.xml ####
Possible keys are: return title desc category type name longdesc example signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.addBack()',
          'desc' => 'Add the previous set of elements on the stack to the current set, optionally filtered by a selector.',
          'category' => [
                        {
                          'slug' => 'traversing/miscellaneous-traversal'
                        },
                        {
                          'slug' => 'version/1.8'
                        }
                      ],
          'type' => 'method',
          'name' => 'addBack',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li class="third-item">list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.third-item" ).nextAll().addBack()
  .css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '.end()',
                                                    'href' => '/end/'
                                                  }
                                           },
                                           '.addBack()'
                                         ],
                                 'content' => [
                                                'As described in the discussion for ',
                                                ', jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, ',
                                                ' can help.'
                                              ]
                               },
                               'Consider a page with a simple list on it:',
                               'The result of the following code is a red background behind items 3, 4 and 5:',
                               {
                                 'content' => [
                                                'First, the initial selector locates item 3, initializing the stack with the set containing just this item. The call to ',
                                                ' then pushes the set of items 4 and 5 onto the stack. Finally, the ',
                                                ' invocation merges these two sets together, creating a jQuery object that points to all three items in document order: ',
                                                '.'
                                              ],
                                 'code' => [
                                           '.nextAll()',
                                           '.addBack()',
                                           '{[<li.third-item>,<li>,<li> ]}'
                                         ]
                               }
                             ]
                      },
          'example' => {
                       'css' => '
  p, div {
    margin: 5px;
    padding: 5px;
  }
  .border {
    border: 2px solid red;
  }
  .background {
    background: yellow;
  }
  .left, .right {
    width: 45%;
    float: left;
  }
  .right {
    margin-left: 3%;
  }
',
                       'desc' => {
                                 'code' => [
                                           '.addBack()',
                                           '.find("p")',
                                           '.addBack()',
                                           '$("div.after-addback")'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from ',
                                                '. In the second example, ',
                                                " adds the previous set of elements on the stack \x{2014} in this case ",
                                                " \x{2014} to the current set, selecting both the div and its enclosed paragraphs."
                                              ]
                               },
                       'html' => '
<div class="left">
  <p><strong>Before <code>addBack()</code></strong></p>
  <div class="before-addback">
    <p>First Paragraph</p>
    <p>Second Paragraph</p>
  </div>
</div>
<div class="right">
  <p><strong>After <code>addBack()</code></strong></p>
  <div class="after-addback">
    <p>First Paragraph</p>
    <p>Second Paragraph</p>
  </div>
</div>
',
                       'code' => '
$( "div.left, div.right" ).find( "div, div > p" ).addClass( "border" );

// First Example
$( "div.before-addback" ).find( "p" ).addClass( "background" );

// Second Example
$( "div.after-addback" ).find( "p" ).addBack().addClass( "background" );
'
                     },
          'signature' => {
                         'added' => '1.8',
                         'argument' => {
                                       'desc' => 'A string containing a selector expression to match the current set of elements against.',
                                       'optional' => 'true',
                                       'name' => 'selector',
                                       'type' => 'Selector'
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/addClass.xml ####
Possible keys are: desc title return signature longdesc example type name category
$VAR1 = {
          'desc' => 'Adds the specified class(es) to each element in the set of matched elements.',
          'title' => '.addClass()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'name' => 'className',
                                         'type' => 'String',
                                         'desc' => 'One or more space-separated classes to be added to the class attribute of each matched element.'
                                       }
                         },
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'type' => 'Function',
                                         'return' => {
                                                     'type' => 'String'
                                                   },
                                         'name' => 'function',
                                         'argument' => {
                                                       'currentClassName' => {
                                                                             'type' => 'String'
                                                                           },
                                                       'index' => {
                                                                  'type' => 'Integer'
                                                                }
                                                     },
                                         'desc' => {
                                                   'code' => 'this',
                                                   'content' => [
                                                                  'A function returning one or more space-separated class names to be added to the existing class name(s). Receives the index position of the element in the set and the existing class name(s) as arguments. Within the function, ',
                                                                  ' refers to the current element in the set.'
                                                                ]
                                                 }
                                       }
                         }
                       ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$( "p" ).addClass( "myClass yourClass" );
    '
                                 },
                                 {
                                   'code' => '
$( "p" ).removeClass( "myClass noClass" ).addClass( "yourClass" );
    '
                                 },
                                 {
                                   'code' => '
$( "ul li" ).addClass(function( index ) {
  return "item-" + index;
});
    '
                                 }
                               ],
                        'p' => [
                               'It\'s important to note that this method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.',
                               {
                                 'em' => [
                                         'property',
                                         'attribute'
                                       ],
                                 'code' => [
                                           '.addClass()',
                                           'className',
                                           'class'
                                         ],
                                 'content' => [
                                                'Before jQuery version 1.12/2.2, the ',
                                                ' method manipulated the ',
                                                ' of the selected elements, not the ',
                                                '. Once the property was changed, it was the browser that updated the attribute accordingly. An implication of this behavior was that this method only worked for documents with HTML DOM semantics (e.g., not pure XML documents).'
                                              ]
                               },
                               {
                                 'em' => 'attribute',
                                 'code' => [
                                           'class',
                                           '.addClass()'
                                         ],
                                 'content' => [
                                                'As of jQuery 1.12/2.2, this behavior is changed to improve the support for XML documents, including SVG. Starting from this version, the ',
                                                ' is used instead. So, ',
                                                ' can be used on XML or SVG documents.'
                                              ]
                               },
                               'More than one class may be added at a time, separated by a space, to the set of matched elements, like so:',
                               {
                                 'code' => '.removeClass()',
                                 'content' => [
                                                'This method is often used with ',
                                                ' to switch elements\' classes from one to another, like so:'
                                              ]
                               },
                               {
                                 'code' => [
                                           'myClass',
                                           'noClass',
                                           'yourClass'
                                         ],
                                 'content' => [
                                                'Here, the ',
                                                ' and ',
                                                ' classes are removed from all paragraphs, while ',
                                                ' is added.'
                                              ]
                               },
                               {
                                 'code' => '.addClass()',
                                 'content' => [
                                                'As of jQuery 1.4, the ',
                                                ' method\'s argument can receive a function.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Given an unordered list with two ',
                                                ' elements, this example adds the class "item-0" to the first ',
                                                ' and "item-1" to the second.'
                                              ],
                                 'code' => [
                                           '<li>',
                                           '<li>'
                                         ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'css' => '
  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: blue;
  }
  .highlight {
    background: yellow;
  }
',
                         'desc' => 'Add the class "selected" to the matched elements.',
                         'html' => '
<p>Hello</p>
<p>and</p>
<p>Goodbye</p>
',
                         'code' => '
$( "p" ).last().addClass( "selected" );
'
                       },
                       {
                         'code' => '
$( "p:last" ).addClass( "selected highlight" );
',
                         'css' => '
  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: red;
  }
  .highlight {
    background: yellow;
  }
',
                         'html' => '
<p>Hello</p>
<p>and</p>
<p>Goodbye</p>
',
                         'desc' => 'Add the classes "selected" and "highlight" to the matched elements.'
                       },
                       {
                         'css' => '
  div {
    background: white;
  }
  .red {
    background: red;
  }
  .red.green {
    background: green;
  }
',
                         'html' => '
 <div>This div should be white</div>
 <div class="red">This div will be green because it now has the "green" and "red" classes.
   It would be red if the addClass function failed.</div>
 <div>This div should be white</div>
 <p>There are zero green divs</p>
',
                         'desc' => {
                                   'content' => [
                                                  'Pass in a function to ',
                                                  ' to add the "green" class to a div that already has a "red" class.'
                                                ],
                                   'code' => '.addClass()'
                                 },
                         'code' => '
$( "div" ).addClass(function( index, currentClass ) {
  var addedClass;

  if ( currentClass === "red" ) {
    addedClass = "green";
    $( "p" ).text( "There is one green div" );
  }

  return addedClass;
});
'
                       }
                     ],
          'type' => 'method',
          'name' => 'addClass',
          'category' => [
                        {
                          'slug' => 'attributes'
                        },
                        {
                          'slug' => 'manipulation/class-attribute'
                        },
                        {
                          'slug' => 'css'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/after.xml ####
Possible keys are: desc note title return signature example longdesc name type category
$VAR1 = {
          'desc' => 'Insert content, specified by the parameter, after each element in the set of matched elements.',
          'note' => {
                    'disconnected-manipulation' => {
                                                   'type' => 'additional',
                                                   'data-title' => '.after()'
                                                 },
                    'html-code-execution' => {
                                             'type' => 'additional'
                                           }
                  },
          'title' => '.after()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'content' => {
                                                      'desc' => 'One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert after each element in the set of matched elements.',
                                                      'optional' => 'true',
                                                      'type' => {
                                                                'htmlString' => {},
                                                                'Array' => {},
                                                                'Text' => {},
                                                                'Element' => {},
                                                                'jQuery' => {}
                                                              }
                                                    }
                                       }
                         },
                         {
                           'argument' => {
                                         'desc' => {
                                                   'code' => 'this',
                                                   'content' => [
                                                                  'A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, ',
                                                                  ' refers to the current element in the set.'
                                                                ]
                                                 },
                                         'return' => {
                                                     'type' => {
                                                               'Text' => {},
                                                               'htmlString' => {},
                                                               'jQuery' => {},
                                                               'Element' => {}
                                                             }
                                                   },
                                         'name' => 'function',
                                         'type' => 'Function',
                                         'argument' => {
                                                       'type' => 'Integer',
                                                       'name' => 'index'
                                                     }
                                       },
                           'added' => '1.4'
                         },
                         {
                           'added' => '1.10',
                           'argument' => {
                                         'desc' => {
                                                   'code' => 'this',
                                                   'content' => [
                                                                  'A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, ',
                                                                  ' refers to the current element in the set.'
                                                                ]
                                                 },
                                         'return' => {
                                                     'type' => {
                                                               'htmlString' => {},
                                                               'Text' => {},
                                                               'Element' => {},
                                                               'jQuery' => {}
                                                             }
                                                   },
                                         'type' => 'Function',
                                         'name' => 'function-html',
                                         'argument' => {
                                                       'index' => {
                                                                  'type' => 'Integer'
                                                                },
                                                       'html' => {
                                                                 'type' => 'String'
                                                               }
                                                     }
                                       }
                         }
                       ],
          'example' => [
                       {
                         'code' => '
$( "p" ).after( "<b>Hello</b>" );
',
                         'css' => '
  p {
    background: yellow;
  }
',
                         'html' => '
<p>I would like to say: </p>
',
                         'desc' => 'Inserts some HTML after all paragraphs.'
                       },
                       {
                         'code' => '
$( "p" ).after( document.createTextNode( "Hello" ) );
',
                         'css' => '
  p {
    background: yellow;
  }
',
                         'desc' => 'Inserts a DOM element after all paragraphs.',
                         'html' => '
<p>I would like to say: </p>
'
                       },
                       {
                         'code' => '
$( "p" ).after( $( "b" ) );
',
                         'html' => '
<b>Hello</b>
<p>I would like to say: </p>
',
                         'desc' => 'Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.',
                         'css' => '
  p {
    background: yellow;
  }
'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <h2>Greetings</h2>
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".inner" ).after( "<p>Test</p>" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <h2>Greetings</h2>
  <div class="inner">Hello</div>
  <p>Test</p>
  <div class="inner">Goodbye</div>
  <p>Test</p>
</div>'
                                 },
                                 {
                                   'code' => '
$( ".container" ).after( $( "h2" ) );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
<h2>Greetings</h2>
    '
                                 },
                                 {
                                   'code' => '
$( "p" ).after(function() {
  return "<div>" + this.className + "</div>";
});
    '
                                 },
                                 {
                                   'code' => '
var $newdiv1 = $( "<div id=\'object1\'></div>" ),
  newdiv2 = document.createElement( "div" ),
  existingdiv1 = document.getElementById( "foo" );

$( "p" ).first().after( $newdiv1, [ newdiv2, existingdiv1 ] );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.after()',
                                           {
                                             'a' => {
                                                    'href' => '/insertAfter/',
                                                    'content' => '.insertAfter()'
                                                  }
                                           },
                                           '.after()',
                                           '$(target).after(contentToBeInserted)',
                                           '.insertAfter()',
                                           '.insertAfter()',
                                           '$(contentToBeInserted).insertAfter(target)'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                " methods perform the same task. The major difference is in the syntax\x{2014}specifically, in the placement of the content and target. With ",
                                                ', the content to be inserted comes from the method\'s argument: ',
                                                '. With ',
                                                ', on the other hand, the content precedes the method and is inserted after the target, which in turn is passed as the ',
                                                ' method\'s argument: ',
                                                '.'
                                              ]
                               },
                               'Using the following HTML:',
                               'Content can be created and then inserted after several elements at once:',
                               {
                                 'code' => '<div>',
                                 'content' => [
                                                'Each inner ',
                                                ' element gets this new content:'
                                              ]
                               },
                               'An element in the DOM can also be selected and inserted after another element:',
                               'If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved rather than cloned:',
                               {
                                 'content' => ': If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.',
                                 'strong' => 'Important'
                               },
                               {
                                 'code' => '.after()',
                                 'content' => [
                                                'As of jQuery 1.4, ',
                                                ' supports passing a function that returns the elements to insert.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '<div>',
                                           '<div>'
                                         ],
                                 'content' => [
                                                'This example inserts a ',
                                                ' after each paragraph, with each new ',
                                                ' containing the class name(s) of its preceding paragraph.'
                                              ]
                               },
                               {
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/prepend/',
                                                    'content' => '.prepend()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'href' => '/before/',
                                                    'content' => '.before()'
                                                  }
                                           },
                                           '.after()'
                                         ],
                                 'content' => [
                                                'Similar to other content-adding methods such as ',
                                                ' and ',
                                                ', ',
                                                ' also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '<div>',
                                           '<div>'
                                         ],
                                 'content' => [
                                                'For example, the following will insert two new ',
                                                's and an existing ',
                                                ' after the first paragraph:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Since ',
                                                ' can accept any number of additional arguments, the same result can be achieved by passing in the three ',
                                                's as three separate arguments, like so: ',
                                                '. The type and number of arguments will largely depend on the elements that are collected in the code.'
                                              ],
                                 'code' => [
                                           '.after()',
                                           '<div>',
                                           '$( "p" ).first().after( $newdiv1, newdiv2, existingdiv1 )'
                                         ]
                               }
                             ],
                        'h4' => {
                                'passing-a-function' => {
                                                        'content' => 'Passing a Function'
                                                      },
                                'additional-arguments' => {
                                                          'content' => 'Additional Arguments'
                                                        }
                              }
                      },
          'name' => 'after',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-outside'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/ajaxComplete.xml ####
Possible keys are: signature category type name longdesc example desc note return title
$VAR1 = {
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'desc' => 'The function to be invoked.',
                                       'argument' => {
                                                     'event' => {
                                                                'type' => 'Event'
                                                              },
                                                     'jqXHR' => {
                                                                'type' => 'jqXHR'
                                                              },
                                                     'ajaxOptions' => {
                                                                      'type' => 'PlainObject'
                                                                    }
                                                   },
                                       'name' => 'handler',
                                       'type' => 'Function'
                                     }
                       },
          'category' => [
                        {
                          'slug' => 'ajax/global-ajax-event-handlers'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'method',
          'name' => 'ajaxComplete',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div class="trigger">Trigger</div>
<div class="result"></div>
<div class="log"></div>
    '
                                 },
                                 {
                                   'code' => '
$( document ).ajaxComplete(function() {
  $( ".log" ).text( "Triggered ajaxComplete handler." );
});
    '
                                 },
                                 {
                                   'code' => '
$( ".trigger" ).click(function() {
  $( ".result" ).load( "ajax/test.html" );
});
    '
                                 },
                                 {
                                   'code' => '
$( document ).ajaxComplete(function( event, xhr, settings ) {
  if ( settings.url === "ajax/test.html" ) {
    $( ".log" ).text( "Triggered ajaxComplete handler. The result is " +
      xhr.responseText );
  }
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           'ajaxComplete',
                                           '.ajaxComplete()'
                                         ],
                                 'content' => [
                                                'Whenever an Ajax request completes, jQuery triggers the ',
                                                ' event. Any and all handlers that have been registered with the ',
                                                ' method are executed at this time.'
                                              ]
                               },
                               'To observe this method in action, set up a basic Ajax load request:',
                               'Attach the event handler to the document:',
                               'Now, make an Ajax request using any jQuery method:',
                               {
                                 'code' => 'trigger',
                                 'content' => [
                                                'When the user clicks the element with class ',
                                                ' and the Ajax request completes, the log message is displayed.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'ajaxComplete',
                                           'ajaxComplete',
                                           'XMLHttpRequest'
                                         ],
                                 'content' => [
                                                'All ',
                                                ' handlers are invoked, regardless of what Ajax request was completed. If you must differentiate between the requests, use the parameters passed to the handler. Each time an ',
                                                ' handler is executed, it is passed the event object, the ',
                                                ' object, and the settings object that was used in the creation of the request. For example, you can restrict the callback to only handling events dealing with a particular URL:'
                                              ]
                               },
                               {
                                 'code' => 'xhr.responseText',
                                 'strong' => 'Note:',
                                 'content' => [
                                                ' You can get the returned Ajax contents by looking at ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'desc' => 'Show a message when an Ajax request completes.',
                       'code' => '
$( document ).ajaxComplete(function( event,request, settings ) {
  $( "#msg" ).append( "<li>Request Complete.</li>" );
});
'
                     },
          'desc' => {
                    'content' => [
                                   'Register a handler to be called when Ajax requests complete. This is an ',
                                   '.'
                                 ],
                    'a' => {
                           'content' => 'AjaxEvent',
                           'href' => '/Ajax_Events/'
                         }
                  },
          'note' => {
                    'global-ajax-event' => {
                                           'type' => 'additional',
                                           'data-title' => '.ajaxComplete()'
                                         },
                    'ajax-global-false' => {
                                           'data-title' => '.ajaxComplete()',
                                           'type' => 'additional'
                                         }
                  },
          'return' => 'jQuery',
          'title' => '.ajaxComplete()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/ajaxError.xml ####
Possible keys are: title return note desc category longdesc example name type signature
$VAR1 = {
          'title' => '.ajaxError()',
          'return' => 'jQuery',
          'note' => {
                    'ajax-global-false' => {
                                           'data-title' => '.ajaxError()',
                                           'type' => 'additional'
                                         },
                    'global-ajax-event' => {
                                           'type' => 'additional',
                                           'data-title' => '.ajaxError()'
                                         }
                  },
          'desc' => {
                    'content' => [
                                   'Register a handler to be called when Ajax requests complete with an error. This is an ',
                                   '.'
                                 ],
                    'a' => {
                           'content' => 'Ajax Event',
                           'href' => '/Ajax_Events/'
                         }
                  },
          'category' => [
                        {
                          'slug' => 'ajax/global-ajax-event-handlers'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<button class="trigger">Trigger</button>
<div class="result"></div>
<div class="log"></div>
    '
                                 },
                                 {
                                   'code' => '
$( document ).ajaxError(function() {
  $( ".log" ).text( "Triggered ajaxError handler." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "button.trigger" ).on( "click", function() {
  $( "div.result" ).load( "ajax/missing.html" );
});
    '
                                 },
                                 {
                                   'code' => '
$( document ).ajaxError(function( event, jqxhr, settings, thrownError ) {
  if ( settings.url == "ajax/missing.html" ) {
    $( "div.log" ).text( "Triggered ajaxError handler." );
  }
});'
                                 }
                               ],
                        'p' => [
                               {
                                 'em' => 'This handler is not called for cross-domain script and cross-domain JSONP requests.',
                                 'code' => [
                                           'ajaxError',
                                           '.ajaxError()'
                                         ],
                                 'content' => [
                                                'Whenever an Ajax request completes with an error, jQuery triggers the ',
                                                ' event. Any and all handlers that have been registered with the ',
                                                ' method are executed at this time. '
                                              ],
                                 'strong' => 'Note:'
                               },
                               'To observe this method in action, set up a basic Ajax load request.',
                               'Attach the event handler to the document:',
                               'Now, make an Ajax request using any jQuery method:',
                               'When the user clicks the button and the Ajax request fails, because the requested file is missing, the log message is displayed.',
                               {
                                 'content' => [
                                                'All ',
                                                ' handlers are invoked, regardless of what Ajax request was completed. To differentiate between the requests, use the parameters passed to the handler. Each time an ',
                                                ' handler is executed, it is passed the event object, the ',
                                                ' object (prior to jQuery 1.5, the ',
                                                ' object), and the settings object that was used in the creation of the request. When an HTTP error occurs, the fourth argument (',
                                                ') receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error." For example, to restrict the error callback to only handling events dealing with a particular URL:'
                                              ],
                                 'code' => [
                                           'ajaxError',
                                           'ajaxError',
                                           'jqXHR',
                                           {
                                             'abbr' => {
                                                       'title' => 'XMLHttpRequest',
                                                       'content' => 'XHR'
                                                     }
                                           },
                                           'thrownError'
                                         ]
                               }
                             ]
                      },
          'example' => {
                       'desc' => 'Show a message when an Ajax request fails.',
                       'code' => '
$( document ).ajaxError(function( event, request, settings ) {
  $( "#msg" ).append( "<li>Error requesting page " + settings.url + "</li>" );
});
'
                     },
          'name' => 'ajaxError',
          'type' => 'method',
          'signature' => {
                         'argument' => {
                                       'type' => 'Function',
                                       'name' => 'handler',
                                       'argument' => {
                                                     'thrownError' => {
                                                                      'type' => 'String'
                                                                    },
                                                     'ajaxSettings' => {
                                                                       'type' => 'PlainObject'
                                                                     },
                                                     'event' => {
                                                                'type' => 'Event'
                                                              },
                                                     'jqXHR' => {
                                                                'type' => 'jqXHR'
                                                              }
                                                   },
                                       'desc' => 'The function to be invoked.'
                                     },
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/ajaxSend.xml ####
Possible keys are: category longdesc example type name signature title return desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'ajax/global-ajax-event-handlers'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div class="trigger">Trigger</div>
<div class="result"></div>
<div class="log"></div>
    '
                                 },
                                 {
                                   'code' => '
$( document ).ajaxSend(function() {
  $( ".log" ).text( "Triggered ajaxSend handler." );
});
    '
                                 },
                                 {
                                   'code' => '
$( ".trigger" ).click(function() {
  $( ".result" ).load( "ajax/test.html" );
});
    '
                                 },
                                 {
                                   'code' => '
$( document ).ajaxSend(function( event, jqxhr, settings ) {
  if ( settings.url == "ajax/test.html" ) {
    $( ".log" ).text( "Triggered ajaxSend handler." );
  }
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           'ajaxSend',
                                           '.ajaxSend()'
                                         ],
                                 'content' => [
                                                'Whenever an Ajax request is about to be sent, jQuery triggers the ',
                                                ' event. Any and all handlers that have been registered with the ',
                                                ' method are executed at this time.'
                                              ]
                               },
                               'To observe this method in action, set up a basic Ajax load request:',
                               'Attach the event handler to the document:',
                               'Now, make an Ajax request using any jQuery method:',
                               {
                                 'content' => [
                                                'When the user clicks the element with class ',
                                                ' and the Ajax request is about to begin, the log message is displayed.'
                                              ],
                                 'code' => 'trigger'
                               },
                               {
                                 'a' => {
                                        'href' => '/jQuery.ajax/',
                                        'content' => 'settings object'
                                      },
                                 'content' => [
                                                'All ',
                                                ' handlers are invoked, regardless of what Ajax request is to be sent. If you must differentiate between the requests, use the parameters passed to the handler. Each time an ',
                                                ' handler is executed, it is passed the event object, the ',
                                                ' object (in version 1.4, ',
                                                'object), and the ',
                                                ' that was used in the creation of the Ajax request. For example, you can restrict the callback to only handling events dealing with a particular URL:'
                                              ],
                                 'code' => [
                                           'ajaxSend',
                                           'ajaxSend',
                                           'jqXHR',
                                           'XMLHttpRequest'
                                         ]
                               }
                             ]
                      },
          'example' => {
                       'desc' => 'Show a message before an Ajax request is sent.',
                       'code' => '
$( document ).ajaxSend(function( event, request, settings ) {
  $( "#msg" ).append( "<li>Starting request at " + settings.url + "</li>" );
});
'
                     },
          'type' => 'method',
          'name' => 'ajaxSend',
          'signature' => {
                         'argument' => {
                                       'argument' => {
                                                     'event' => {
                                                                'type' => 'Event'
                                                              },
                                                     'jqXHR' => {
                                                                'type' => 'jqXHR'
                                                              },
                                                     'ajaxOptions' => {
                                                                      'type' => 'PlainObject'
                                                                    }
                                                   },
                                       'type' => 'Function',
                                       'name' => 'handler',
                                       'desc' => 'The function to be invoked.'
                                     },
                         'added' => '1.0'
                       },
          'title' => '.ajaxSend()',
          'return' => 'jQuery',
          'desc' => {
                    'content' => [
                                   'Attach a function to be executed before an Ajax request is sent. This is an ',
                                   '.'
                                 ],
                    'a' => {
                           'content' => 'Ajax Event',
                           'href' => '/Ajax_Events/'
                         }
                  },
          'note' => {
                    'ajax-global-false' => {
                                           'data-title' => '.ajaxSend()',
                                           'type' => 'additional'
                                         },
                    'global-ajax-event' => {
                                           'type' => 'additional',
                                           'data-title' => '.ajaxSend()'
                                         }
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/ajaxStart.xml ####
Possible keys are: note desc title return signature category example longdesc type name
$VAR1 = {
          'note' => {
                    'global-ajax-event' => {
                                           'data-title' => '.ajaxStart()',
                                           'type' => 'additional'
                                         },
                    'ajax-global-false' => {
                                           'type' => 'additional',
                                           'data-title' => '.ajaxStart()'
                                         }
                  },
          'desc' => {
                    'content' => [
                                   'Register a handler to be called when the first Ajax request begins. This is an ',
                                   '.'
                                 ],
                    'a' => {
                           'href' => '/Ajax_Events/',
                           'content' => 'Ajax Event'
                         }
                  },
          'title' => '.ajaxStart()',
          'return' => 'jQuery',
          'signature' => {
                         'argument' => {
                                       'name' => 'handler',
                                       'type' => 'Function',
                                       'desc' => 'The function to be invoked.'
                                     },
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'ajax/global-ajax-event-handlers'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => {
                       'desc' => 'Show a loading message whenever an Ajax request starts (and none is already active).',
                       'code' => '
$( document ).ajaxStart(function() {
  $( "#loading" ).show();
});
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           'ajaxStart',
                                           '.ajaxStart()'
                                         ],
                                 'content' => [
                                                'Whenever an Ajax request is about to be sent, jQuery checks whether there are any other outstanding Ajax requests. If none are in progress, jQuery triggers the ',
                                                ' event. Any and all handlers that have been registered with the ',
                                                ' method are executed at this time.'
                                              ]
                               },
                               'To observe this method in action, set up a basic Ajax load request:',
                               'Attach the event handler to any element:',
                               'Now, make an Ajax request using any jQuery method:',
                               {
                                 'content' => [
                                                'When the user clicks the element with class ',
                                                ' and the Ajax request is sent, the log message is displayed.'
                                              ],
                                 'code' => 'trigger'
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="trigger">Trigger</div>
<div class="result"></div>
<div class="log"></div>
    '
                                 },
                                 {
                                   'code' => '
$( document ).ajaxStart(function() {
  $( ".log" ).text( "Triggered ajaxStart handler." );
});
    '
                                 },
                                 {
                                   'code' => '
$( ".trigger" ).click(function() {
  $( ".result" ).load( "ajax/test.html" );
});
    '
                                 }
                               ]
                      },
          'type' => 'method',
          'name' => 'ajaxStart'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/ajaxStop.xml ####
Possible keys are: signature example longdesc type name category desc note title return
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'name' => 'handler',
                                       'type' => 'Function',
                                       'desc' => 'The function to be invoked.'
                                     },
                         'added' => '1.0'
                       },
          'example' => {
                       'code' => '
$( document ).ajaxStop(function() {
  $( "#loading" ).hide();
});
',
                       'desc' => 'Hide a loading message after all the Ajax requests have stopped.'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           'ajaxStop',
                                           '.ajaxStop()',
                                           'ajaxStop',
                                           'beforeSend'
                                         ],
                                 'content' => [
                                                'Whenever an Ajax request completes, jQuery checks whether there are any other outstanding Ajax requests. If none remain, jQuery triggers the ',
                                                ' event. Any and all handlers that have been registered with the ',
                                                ' method are executed at this time. The ',
                                                ' event is also triggered if the last outstanding Ajax request is cancelled by returning false within the ',
                                                ' callback function. '
                                              ]
                               },
                               'To observe this method in action, set up a basic Ajax load request:',
                               'Attach the event handler to the document:',
                               'Now, make an Ajax request using any jQuery method:',
                               {
                                 'code' => 'trigger',
                                 'content' => [
                                                'When the user clicks the element with class ',
                                                ' and the Ajax request completes, the log message is displayed.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="trigger">Trigger</div>
<div class="result"></div>
<div class="log"></div>
    '
                                 },
                                 {
                                   'code' => '
$( document ).ajaxStop(function() {
  $( ".log" ).text( "Triggered ajaxStop handler." );
});
    '
                                 },
                                 {
                                   'code' => '
$( ".trigger" ).click(function() {
  $( ".result" ).load( "ajax/test.html" );
});
    '
                                 }
                               ]
                      },
          'type' => 'method',
          'name' => 'ajaxStop',
          'category' => [
                        {
                          'slug' => 'ajax/global-ajax-event-handlers'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'desc' => {
                    'a' => {
                           'content' => 'Ajax Event',
                           'href' => '/Ajax_Events/'
                         },
                    'content' => [
                                   'Register a handler to be called when all Ajax requests have completed. This is an ',
                                   '.'
                                 ]
                  },
          'note' => {
                    'ajax-global-false' => {
                                           'data-title' => '.ajaxStop()',
                                           'type' => 'additional'
                                         },
                    'global-ajax-event' => {
                                           'type' => 'additional',
                                           'data-title' => '.ajaxStop()'
                                         }
                  },
          'title' => '.ajaxStop()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/ajaxSuccess.xml ####
Possible keys are: title return desc note category example longdesc type name signature
$VAR1 = {
          'title' => '.ajaxSuccess()',
          'return' => 'jQuery',
          'desc' => {
                    'content' => [
                                   'Attach a function to be executed whenever an Ajax request completes successfully. This is an ',
                                   '.'
                                 ],
                    'a' => {
                           'content' => 'Ajax Event',
                           'href' => '/Ajax_Events/'
                         }
                  },
          'note' => {
                    'global-ajax-event' => {
                                           'data-title' => '.ajaxSuccess()',
                                           'type' => 'additional'
                                         },
                    'ajax-global-false' => {
                                           'type' => 'additional',
                                           'data-title' => '.ajaxSuccess()'
                                         }
                  },
          'category' => [
                        {
                          'slug' => 'ajax/global-ajax-event-handlers'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => {
                       'desc' => 'Show a message when an Ajax request completes successfully.',
                       'code' => '
$( document ).ajaxSuccess(function( event, request, settings ) {
  $( "#msg" ).append( "<li>Successful Request!</li>" );
});
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Whenever an Ajax request completes successfully, jQuery triggers the ',
                                                ' event. Any and all handlers that have been registered with the ',
                                                ' method are executed at this time.'
                                              ],
                                 'code' => [
                                           'ajaxSuccess',
                                           '.ajaxSuccess()'
                                         ]
                               },
                               'To observe this method in action, set up a basic Ajax load request:',
                               'Attach the event handler to any element:',
                               'Now, make an Ajax request using any jQuery method:',
                               {
                                 'code' => 'trigger',
                                 'content' => [
                                                'When the user clicks the element with class ',
                                                ' and the Ajax request completes successfully, the log message is displayed.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'ajaxSuccess',
                                           'ajaxSuccess',
                                           'XMLHttpRequest'
                                         ],
                                 'content' => [
                                                'All ',
                                                ' handlers are invoked, regardless of what Ajax request was completed. If you must differentiate between the requests, you can use the parameters passed to the handler. Each time an ',
                                                ' handler is executed, it is passed the event object, the ',
                                                ' object, and the settings object that was used in the creation of the request. For example, you can restrict the callback to only handling events dealing with a particular URL:'
                                              ]
                               },
                               {
                                 'strong' => 'Note:',
                                 'content' => [
                                                ' You can get the returned Ajax contents by looking at ',
                                                ' or ',
                                                ' for xml and html respectively.'
                                              ],
                                 'code' => [
                                           'xhr.responseXML',
                                           'xhr.responseText'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="trigger">Trigger</div>
<div class="result"></div>
<div class="log"></div>
    '
                                 },
                                 {
                                   'code' => '
$(document).ajaxSuccess(function() {
  $( ".log" ).text( "Triggered ajaxSuccess handler." );
});
    '
                                 },
                                 {
                                   'code' => '
$( ".trigger" ).on( "click", function() {
  $( ".result" ).load( "ajax/test.html" );
});
    '
                                 },
                                 {
                                   'code' => '
$( document ).ajaxSuccess(function( event, xhr, settings ) {
  if ( settings.url == "ajax/test.html" ) {
    $( ".log" ).text( "Triggered ajaxSuccess handler. The Ajax response was: " +
      xhr.responseText );
  }
});
    '
                                 }
                               ]
                      },
          'type' => 'method',
          'name' => 'ajaxSuccess',
          'signature' => {
                         'argument' => {
                                       'argument' => {
                                                     'data' => {
                                                               'type' => 'PlainObject'
                                                             },
                                                     'event' => {
                                                                'type' => 'Event'
                                                              },
                                                     'jqXHR' => {
                                                                'type' => 'jqXHR'
                                                              },
                                                     'ajaxOptions' => {
                                                                      'type' => 'PlainObject'
                                                                    }
                                                   },
                                       'name' => 'handler',
                                       'type' => 'Function',
                                       'desc' => 'The function to be invoked.'
                                     },
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/all-selector.xml ####
Possible keys are: desc title sample return signature category example longdesc name type
$VAR1 = {
          'desc' => 'Selects all elements.',
          'title' => 'All Selector ("*")',
          'sample' => '*',
          'return' => '',
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/basic-css-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => [
                       {
                         'code' => '
var elementCount = $( "*" ).css( "border", "3px solid red" ).length;
$( "body" ).prepend( "<h3>" + elementCount + " elements found</h3>" );
',
                         'css' => '
  h3 {
    margin: 0;
  }
  div, span, p {
    width: 80px;
    height: 40px;
    float: left;
    padding: 10px;
    margin: 10px;
    background-color: #EEEEEE;
  }
',
                         'desc' => {
                                   'content' => [
                                                  'Find every element (including head, body, etc) in the document. Note that if your browser has an extension/add-on enabled that inserts a ',
                                                  ' or ',
                                                  ' element into the DOM, that element will be counted as well.'
                                                ],
                                   'code' => [
                                             '<script>',
                                             '<link>'
                                           ]
                                 },
                         'html' => '
<div>DIV</div>
<span>SPAN</span>
<p>P <button>Button</button></p>
'
                       },
                       {
                         'code' => '
var elementCount = $( "#test" ).find( "*" ).css( "border", "3px solid red" ).length;
$( "body" ).prepend( "<h3>" + elementCount + " elements found</h3>" );
',
                         'css' => '
  h3 {
    margin: 0;
  }
  div, span, p {
    width: 80px;
    height: 40px;
    float: left;
    padding: 10px;
    margin: 10px;
    background-color: #EEEEEE;
  }
  #test {
    width: auto;
    height: auto;
    background-color: transparent;
  }
',
                         'html' => '
<div id="test">
  <div>DIV</div>
  <span>SPAN</span>
  <p>P <button>Button</button></p>
</div>
',
                         'desc' => 'Find all elements within document.body so elements like head, script, etc. are excluded.'
                       }
                     ],
          'longdesc' => {
                        'p' => 'Caution: The all, or universal, selector is extremely slow, except when used by itself.'
                      },
          'name' => 'all',
          'type' => 'selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/andSelf.xml ####
Possible keys are: desc return title deprecated signature category type name example longdesc
$VAR1 = {
          'desc' => 'Add the previous set of elements on the stack to the current set.',
          'return' => 'jQuery',
          'title' => '.andSelf()',
          'deprecated' => '1.8',
          'signature' => {
                         'added' => '1.2'
                       },
          'category' => [
                        {
                          'slug' => 'traversing/miscellaneous-traversal'
                        },
                        {
                          'slug' => 'version/1.2'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.8'
                        }
                      ],
          'type' => 'method',
          'name' => 'andSelf',
          'example' => {
                       'code' => '
$( "div.left, div.right" ).find( "div, div > p" ).addClass( "border" );

// First Example
$( "div.before-andself" ).find( "p" ).addClass( "background" );

// Second Example
$( "div.after-andself" ).find( "p" ).andSelf().addClass( "background" );
',
                       'desc' => {
                                 'code' => [
                                           '.andSelf()',
                                           '.find("p")',
                                           '.andSelf()',
                                           '$( "div.after-andself" )'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from ',
                                                '. In the second example, ',
                                                " adds the previous set of elements on the stack \x{2014} in this case ",
                                                " \x{2014} to the current set, selecting both the div and its enclosed paragraphs."
                                              ]
                               },
                       'html' => '
<div class="left">
  <p><strong>Before <code>andSelf()</code></strong></p>
  <div class="before-andself">
    <p>First Paragraph</p>
    <p>Second Paragraph</p>
  </div>
</div>
<div class="right">
  <p><strong>After <code>andSelf()</code></strong></p>
  <div class="after-andself">
    <p>First Paragraph</p>
    <p>Second Paragraph</p>
  </div>
</div>
',
                       'css' => '
  p, div {
    margin: 5px;
    padding: 5px;
  }
  .border {
    border: 2px solid red;
  }
  .background {
    background: yellow;
  }
  .left, .right {
    width: 45%;
    float: left;
  }
  .right {
    margin-left: 3%;
  }
'
                     },
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li class="third-item">list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.third-item" ).nextAll().andSelf()
  .css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'a' => {
                                        'href' => '/addBack/',
                                        'code' => '.addBack()'
                                      },
                                 'strong' => 'Note:',
                                 'content' => [
                                                ' This function has been deprecated and is now an alias for ',
                                                ', which should be used with jQuery 1.8 and later.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'As described in the discussion for ',
                                                ', jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, ',
                                                ' can help.'
                                              ],
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/end/',
                                                    'content' => '.end()'
                                                  }
                                           },
                                           '.andSelf()'
                                         ]
                               },
                               'Consider a page with a simple list on it:',
                               'The result of the following code is a red background behind items 3, 4 and 5:',
                               {
                                 'code' => [
                                           '.nextAll()',
                                           '.andSelf()',
                                           '[ <li.third-item>, <li>, <li> ]'
                                         ],
                                 'content' => [
                                                'First, the initial selector locates item 3, initializing the stack with the set containing just this item. The call to ',
                                                ' then pushes the set of items 4 and 5 onto the stack. Finally, the ',
                                                ' invocation merges these two sets together, creating a jQuery object that points to all three items in document order: ',
                                                '.'
                                              ]
                               }
                             ]
                      }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/animate.xml ####
Possible keys are: title return note desc longdesc example name type category signature
$VAR1 = {
          'title' => '.animate()',
          'return' => 'jQuery',
          'note' => {
                    'data-title' => '.animate()',
                    'id' => 'jquery.fx.off',
                    'type' => 'additional'
                  },
          'desc' => 'Perform a custom animation of a set of CSS properties.',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method allows us to create animation effects on any numeric CSS property. The only required parameter is a plain object of CSS properties. This object is similar to the one that can be sent to the ',
                                                ' method, except that the range of properties is more restrictive.'
                                              ],
                                 'code' => [
                                           '.animate()',
                                           '.css()'
                                         ]
                               },
                               {
                                 'a' => {
                                        'content' => 'jQuery.Color',
                                        'href' => 'https://github.com/jquery/jquery-color'
                                      },
                                 'em' => 'single numeric value',
                                 'content' => [
                                                'All animated properties should be animated to a ',
                                                ', except as noted below; most properties that are non-numeric cannot be animated using basic jQuery functionality (For example, ',
                                                ', ',
                                                ', or ',
                                                ' can be animated but ',
                                                ' cannot be, unless the ',
                                                ' plugin is used). Property values are treated as a number of pixels unless otherwise specified. The units ',
                                                ' and ',
                                                ' can be specified where applicable.'
                                              ],
                                 'code' => [
                                           'width',
                                           'height',
                                           'left',
                                           'background-color',
                                           'em',
                                           '%'
                                         ]
                               },
                               {
                                 'content' => [
                                                'In addition to style properties, some non-style properties such as ',
                                                ' and ',
                                                ', as well as custom properties, can be animated.'
                                              ],
                                 'code' => [
                                           'scrollTop',
                                           'scrollLeft'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Shorthand CSS properties (e.g. font, background, border) are not fully supported. For example, if you want to animate the rendered border width, at least a border style and border width other than "auto" must be set in advance. Or, if you want to animate font size, you would use ',
                                                ' or the CSS equivalent ',
                                                ' rather than simply ',
                                                '. '
                                              ],
                                 'code' => [
                                           'fontSize',
                                           '\'font-size\'',
                                           '\'font\''
                                         ]
                               },
                               {
                                 'code' => [
                                           '\'show\'',
                                           '\'hide\'',
                                           '\'toggle\'',
                                           '\'toggle\''
                                         ],
                                 'content' => [
                                                'In addition to numeric values, each property can take the strings ',
                                                ', ',
                                                ', and ',
                                                '. These shortcuts allow for custom hiding and showing animations that take into account the display type of the element. In order to use jQuery\'s built-in toggle state tracking, the ',
                                                ' keyword must be consistently given as the value of the property being animated.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Animated properties can also be relative. If a value is supplied with a leading ',
                                                ' or ',
                                                ' sequence of characters, then the target value is computed by adding or subtracting the given number from the current value of the property.'
                                              ],
                                 'code' => [
                                           '+=',
                                           '-='
                                         ]
                               },
                               {
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The default duration is ',
                                                ' milliseconds. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively.'
                                              ],
                                 'code' => [
                                           '400',
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600'
                                         ]
                               },
                               {
                                 'em' => 'per-element',
                                 'code' => [
                                           'start',
                                           'step',
                                           'progress',
                                           'complete',
                                           'done',
                                           'fail',
                                           'always',
                                           'this',
                                           '.promise()'
                                         ],
                                 'content' => [
                                                'If supplied, the ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', and ',
                                                ' callbacks are called on a ',
                                                ' basis; ',
                                                ' is set to the DOM element being animated. If no elements are in the set, no callbacks are called. If multiple elements are animated, the callback is executed once per matched element, not once for the animation as a whole. Use the ',
                                                ' method to obtain a promise to which you can attach callbacks that fire once for an animated set of any size, including zero elements.'
                                              ]
                               },
                               'To animate any element, such as a simple image:',
                               'To animate the opacity, left offset, and height of the image simultaneously:',
                               {
                                 'class' => 'image',
                                 'figure' => {
                                             'img' => {
                                                      'src' => '/resources/animate-1.jpg',
                                                      'alt' => ''
                                                    },
                                             'figcaption' => 'Figure 1 - Illustration of the specified animation effect'
                                           }
                               },
                               {
                                 'content' => [
                                                'Note that the target value of the ',
                                                ' property is ',
                                                '. Since the image was visible before, the animation shrinks the height to 0 to hide it. A second click then reverses this transition:
    '
                                              ],
                                 'code' => [
                                           'height',
                                           '\'toggle\''
                                         ]
                               },
                               {
                                 'class' => 'image',
                                 'figure' => {
                                             'figcaption' => 'Figure 2  - Illustration of the specified animation effect',
                                             'img' => {
                                                      'alt' => '',
                                                      'src' => '/resources/animate-2.jpg'
                                                    }
                                           }
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' of the image is already at its target value, so this property is not animated by the second click. Since the target value for ',
                                                ' is a relative value, the image moves even farther to the right during this second animation.'
                                              ],
                                 'code' => [
                                           'opacity',
                                           'left'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Directional properties (',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ') have no discernible effect on elements if their  ',
                                                ' style property is ',
                                                ', which it is by default.'
                                              ],
                                 'code' => [
                                           'top',
                                           'right',
                                           'bottom',
                                           'left',
                                           'position',
                                           'static'
                                         ]
                               },
                               {
                                 'code' => [
                                           '.animate()',
                                           'step',
                                           'now',
                                           'fx',
                                           'this'
                                         ],
                                 'content' => [
                                                'The second version of ',
                                                ' provides a ',
                                                " option \x{2014} a callback function that is fired at each step of the animation. This function is useful for enabling custom animation types or altering the animation as it is occurring. It accepts two arguments (",
                                                ' and ',
                                                '), and ',
                                                ' is set to the DOM element being animated.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'step',
                                           'step'
                                         ],
                                 'content' => [
                                                'Note that the ',
                                                ' function is called for each animated property on each animated element. For example, given two list items, the ',
                                                ' function fires four times at each step of the animation:  '
                                              ]
                               },
                               {
                                 'code' => [
                                           '.animate()',
                                           'swing',
                                           'linear'
                                         ],
                                 'content' => [
                                                'The remaining parameter of ',
                                                ' is a string naming an easing function to use. An easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'a' => {
                                        'content' => 'jQuery UI suite',
                                        'href' => 'http://jqueryui.com/'
                                      }
                               },
                               {
                                 'code' => [
                                           '.animate()',
                                           '.animate()',
                                           '.animate()',
                                           'swing'
                                         ],
                                 'content' => [
                                                'As of jQuery version 1.4, you can set per-property easing functions within a single ',
                                                ' call. In the first version of ',
                                                ', each property can take an array as its value: The first member of the array is the CSS property and the second member is an easing function.  If a per-property easing function is not defined for a particular property, it uses the value of the ',
                                                ' method\'s optional easing argument. If the easing argument is not defined, the default ',
                                                ' function is used.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ],
                                 'content' => [
                                                'For example, to simultaneously animate the width and height with the ',
                                                ' easing function and the opacity with the ',
                                                ' easing function:'
                                              ]
                               },
                               {
                                 'code' => [
                                           '.animate()',
                                           'specialEasing',
                                           'linear',
                                           'easeOutBounce'
                                         ],
                                 'content' => [
                                                'In the second version of ',
                                                ', the options object can include the ',
                                                ' property, which is itself an object of CSS properties and their corresponding easing functions.  For example, to simultaneously animate the width using the ',
                                                ' easing function and the height using the ',
                                                ' easing function:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'As previously noted, a plugin is required for the ',
                                                ' function.'
                                              ],
                                 'code' => 'easeOutBounce'
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123"
  style="position: relative; left: 10px;">
    '
                                 },
                                 {
                                   'code' => '
$( "#clickme" ).click(function() {
  $( "#book" ).animate({
    opacity: 0.25,
    left: "+=50",
    height: "toggle"
  }, 5000, function() {
    // Animation complete.
  });
});
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).animate({
  opacity: .5,
  height: "50%"
}, {
  step: function( now, fx ) {
    var data = fx.elem.id + " " + fx.prop + ": " + now;
    $( "body" ).append( "<div>" + data + "</div>" );
  }
});
    '
                                 },
                                 {
                                   'code' => '
$( "#clickme" ).click(function() {
  $( "#book" ).animate({
    width: [ "toggle", "swing" ],
    height: [ "toggle", "swing" ],
    opacity: "toggle"
  }, 5000, "linear", function() {
    $( this ).after( "<div>Animation complete.</div>" );
  });
});
    '
                                 },
                                 {
                                   'code' => '
$( "#clickme" ).click(function() {
  $( "#book" ).animate({
    width: "toggle",
    height: "toggle"
  }, {
    duration: 5000,
    specialEasing: {
      width: "linear",
      height: "easeOutBounce"
    },
    complete: function() {
      $( this ).after( "<div>Animation complete.</div>" );
    }
  });
});
    '
                                 }
                               ],
                        'ul' => {
                                'li' => [
                                        {
                                          'content' => ': the numeric value of the property being animated at each step',
                                          'code' => 'now'
                                        },
                                        {
                                          'content' => [
                                                         ': a reference to the ',
                                                         ' prototype object, which contains a number of properties such as ',
                                                         ' for the animated element, ',
                                                         ' and ',
                                                         ' for the first and last value of the animated property, respectively, and ',
                                                         ' for the property being animated.'
                                                       ],
                                          'code' => [
                                                    'fx',
                                                    'jQuery.fx',
                                                    'elem',
                                                    'start',
                                                    'end',
                                                    'prop'
                                                  ]
                                        }
                                      ]
                              },
                        'h4' => {
                                'basic-usage' => {
                                                 'content' => 'Basic Usage'
                                               },
                                'callbacks' => {
                                               'content' => 'Callback Functions'
                                             },
                                'step' => {
                                          'content' => 'Step Function'
                                        },
                                'per-property-easing' => {
                                                         'content' => 'Per-property Easing'
                                                       },
                                'easing' => {
                                            'content' => 'Easing'
                                          },
                                'duration' => {
                                              'content' => 'Duration'
                                            },
                                'animation-properties' => {
                                                          'content' => 'Animation Properties and Values'
                                                        }
                              },
                        'div' => [
                                 {
                                   'p' => {
                                          'em' => [
                                                  'not',
                                                  'the element will remain hidden'
                                                ],
                                          'content' => [
                                                         ' Unlike shorthand animation methods such as ',
                                                         ' and ',
                                                         ', the ',
                                                         ' method does ',
                                                         ' make hidden elements visible as part of the effect. For example, given ',
                                                         ', the animation will run, but ',
                                                         '.'
                                                       ],
                                          'strong' => 'Note:',
                                          'code' => [
                                                    '.slideDown()',
                                                    '.fadeIn()',
                                                    '.animate()',
                                                    '$( "someElement" ).hide().animate({height: "20px"}, 500)'
                                                  ]
                                        },
                                   'class' => 'warning'
                                 },
                                 {
                                   'class' => 'warning',
                                   'p' => {
                                          'content' => [
                                                         'The ',
                                                         ' project extends the ',
                                                         ' method by allowing some non-numeric styles such as colors to be animated. The project also includes mechanisms for specifying animations through CSS classes rather than individual attributes.'
                                                       ],
                                          'strong' => 'Note: ',
                                          'code' => '.animate()',
                                          'a' => {
                                                 'content' => 'jQuery UI',
                                                 'href' => 'http://jqueryui.com/'
                                               }
                                        }
                                 },
                                 {
                                   'class' => 'warning',
                                   'p' => {
                                          'content' => [
                                                         ' if attempting to animate an element with a height or width of 0px, where contents of the element are visible due to overflow, jQuery may clip this overflow during animation. By fixing the dimensions of the original element being hidden however, it is possible to ensure that the animation runs smoothly. A ',
                                                         ' can be used to automatically fix the dimensions of your main element without the need to set this manually.'
                                                       ],
                                          'strong' => 'Note:',
                                          'a' => {
                                                 'content' => 'clearfix',
                                                 'href' => 'http://www.google.com/search?q=clearfix'
                                               }
                                        }
                                 }
                               ]
                      },
          'example' => [
                       {
                         'code' => '
// Using multiple unit types within one animation.

$( "#go" ).click(function() {
  $( "#block" ).animate({
    width: "70%",
    opacity: 0.4,
    marginLeft: "0.6in",
    fontSize: "3em",
    borderWidth: "10px"
  }, 1500 );
});
',
                         'desc' => 'Click the button to animate the div with a number of different properties.',
                         'html' => '
<button id="go">&raquo; Run</button>
<div id="block">Hello!</div>
',
                         'css' => '
  div {
    background-color: #bca;
    width: 100px;
    border: 1px solid green;
  }
'
                       },
                       {
                         'html' => '
<button id="left">&laquo;</button>
<button id="right">&raquo;</button>
<div class="block"></div>
',
                         'desc' => 'Animates a div\'s left property with a relative value. Click several times on the buttons to see the relative animations queued up.',
                         'css' => '
  div {
    position: absolute;
    background-color: #abc;
    left: 50px;
    width: 90px;
    height: 90px;
    margin: 5px;
  }
',
                         'code' => '
$( "#right" ).click(function() {
  $( ".block" ).animate({ "left": "+=50px" }, "slow" );
});

$( "#left" ).click(function(){
  $( ".block" ).animate({ "left": "-=50px" }, "slow" );
});
'
                       },
                       {
                         'html' => '
<button id="go1">&raquo; Animate Block1</button>
<button id="go2">&raquo; Animate Block2</button>
<button id="go3">&raquo; Animate Both</button>
<button id="go4">&raquo; Reset</button>
<div id="block1">Block1</div>
<div id="block2">Block2</div>
',
                         'desc' => {
                                   'content' => [
                                                  'The first button shows how an unqueued animation works.  It expands the div out to 90% width ',
                                                  ' the font-size is increasing. Once the font-size change is complete, the border animation will begin.

The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.'
                                                ],
                                   'strong' => 'while'
                                 },
                         'css' => '
  div {
    background-color: #bca;
    width: 200px;
    height: 1.1em;
    text-align: center;
    border: 2px solid green;
    margin: 3px;
    font-size: 14px;
  }
  button {
    font-size: 14px;
  }
',
                         'code' => '
$( "#go1" ).click(function() {
  $( "#block1" )
    .animate({
      width: "90%"
    }, {
      queue: false,
      duration: 3000
    })
    .animate({ fontSize: "24px" }, 1500 )
    .animate({ borderRightWidth: "15px" }, 1500 );
});

$( "#go2" ).click(function() {
  $( "#block2" )
    .animate({ width: "90%" }, 1000 )
    .animate({ fontSize: "24px" }, 1000 )
    .animate({ borderLeftWidth: "15px" }, 1000 );
});

$( "#go3" ).click(function() {
  $( "#go1" ).add( "#go2" ).click();
});

$( "#go4" ).click(function() {
  $( "div" ).css({
    width: "",
    fontSize: "",
    borderWidth: ""
  });
});
'
                       },
                       {
                         'code' => '
$( "#go" ).click(function() {
  $( ".block:first" ).animate({
    left: 100
  }, {
    duration: 1000,
    step: function( now, fx ){
      $( ".block:gt(0)" ).css( "left", now );
    }
  });
});
',
                         'desc' => 'Animates the first div\'s left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation. ',
                         'html' => "
<p><button id=\"go\">Run \x{bb}</button></p>
<div class=\"block\"></div>
<div class=\"block\"></div>
<div class=\"block\"></div>
<div class=\"block\"></div>
<div class=\"block\"></div>
<div class=\"block\"></div>
",
                         'css' => '
  div {
    position: relative;
    background-color: #abc;
    width: 40px;
    height: 40px;
    float: left;
    margin: 5px;
  }
'
                       },
                       {
                         'code' => '
$( "p" ).animate({
  height: "toggle",
  opacity: "toggle"
}, "slow" );
',
                         'desc' => 'Animate all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.'
                       },
                       {
                         'code' => '
$( "p" ).animate({
  left: 50,
  opacity: 1
}, 500 );
',
                         'desc' => 'Animate all paragraphs to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.'
                       },
                       {
                         'desc' => {
                                   'content' => [
                                                  'Animate the left and opacity style properties of all paragraphs; run the animation ',
                                                  ' the queue, so that it will automatically start without waiting for its turn.'
                                                ],
                                   'em' => 'outside'
                                 },
                         'code' => '
$( "p" ).animate({
  left: "50px",
  opacity: 1
}, {
  duration: 500,
  queue: false
});
'
                       },
                       {
                         'desc' => 'An example of using an \'easing\' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.',
                         'code' => '
$( "p" ).animate({
  opacity: "show"
}, "slow", "easein" );
'
                       },
                       {
                         'desc' => 'Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.',
                         'code' => '
$( "p" ).animate({
  height: "toggle",
  opacity: "toggle"
}, {
  duration: "slow"
});
'
                       },
                       {
                         'code' => '
$( "p" ).animate({
  opacity: "show"
}, {
  duration: "slow",
  easing: "easein"
});
',
                         'desc' => 'Use an easing function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.'
                       },
                       {
                         'desc' => 'Animate all paragraphs and execute a callback function when the animation is complete.  The first argument is an object of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function. ',
                         'code' => '
$( "p" ).animate({
  height: 200,
  width: 400,
  opacity: 0.5
}, 1000, "linear", function() {
  alert( "all done" );
});
'
                       }
                     ],
          'name' => 'animate',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'effects/custom-effects'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => [
                         {
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/easing-argument.xml'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/complete-argument.xml'
                                           }
                                         ],
                           'argument' => {
                                         'desc' => 'An object of CSS properties and values that the animation will move toward.',
                                         'name' => 'properties',
                                         'type' => 'PlainObject'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'xi:include' => {
                                           'href' => '../includes/options-argument.xml',
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                         },
                           'argument' => {
                                         'desc' => 'An object of CSS properties and values that the animation will move toward.',
                                         'name' => 'properties',
                                         'type' => 'PlainObject'
                                       },
                           'added' => '1.0'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/animated-selector.xml ####
Possible keys are: sample return title desc note category type name example longdesc signature
$VAR1 = {
          'sample' => ':animated',
          'return' => '',
          'title' => ':animated Selector',
          'desc' => 'Select all elements that are in the progress of an animation at the time the selector is run.',
          'note' => {
                    'data-selector' => ':animated',
                    'id' => 'jquery-selector-extension',
                    'type' => 'additional'
                  },
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'type' => 'selector',
          'name' => 'animated',
          'example' => {
                       'code' => '
$( "#run" ).click(function() {
  $( "div:animated" ).toggleClass( "colored" );
});

function animateIt() {
  $( "#mover" ).slideToggle( "slow", animateIt );
}

animateIt();
',
                       'css' => '
  div {
    background: yellow;
    border: 1px solid #AAA;
    width: 80px;
    height: 80px;
    margin: 0 5px;
    float: left;
  }
  div.colored {
    background: green;
  }
',
                       'desc' => 'Change the color of any div that is animated.',
                       'html' => '
<button id="run">Run</button>

<div></div>
<div id="mover"></div>
<div></div>
'
                     },
          'longdesc' => {
                        'p' => {
                               'code' => ':animated',
                               'content' => [
                                              ' If you use a custom jQuery build ',
                                              ', the ',
                                              ' selector will throw an error. '
                                            ],
                               'strong' => 'Note:',
                               'em' => 'without the effects module'
                             }
                      },
          'signature' => {
                         'added' => '1.2'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/append.xml ####
Possible keys are: desc note return title signature name type example longdesc category
$VAR1 = {
          'desc' => 'Insert content, specified by the parameter, to the end of each element in the set of matched elements.',
          'note' => {
                    'svg-support' => {
                                     'type' => 'additional'
                                   },
                    'html-code-execution' => {
                                             'type' => 'additional'
                                           }
                  },
          'return' => 'jQuery',
          'title' => '.append()',
          'signature' => [
                         {
                           'argument' => {
                                         'content' => {
                                                      'type' => {
                                                                'Element' => {},
                                                                'jQuery' => {},
                                                                'Array' => {},
                                                                'htmlString' => {},
                                                                'Text' => {}
                                                              },
                                                      'optional' => 'true',
                                                      'desc' => 'One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.'
                                                    }
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'desc' => {
                                                   'code' => 'this',
                                                   'content' => [
                                                                  'A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, ',
                                                                  ' refers to the current element in the set.'
                                                                ]
                                                 },
                                         'type' => 'Function',
                                         'return' => {
                                                     'type' => {
                                                               'htmlString' => {},
                                                               'Text' => {},
                                                               'Element' => {},
                                                               'jQuery' => {}
                                                             }
                                                   },
                                         'name' => 'function',
                                         'argument' => {
                                                       'index' => {
                                                                  'type' => 'Integer'
                                                                },
                                                       'html' => {
                                                                 'type' => 'String'
                                                               }
                                                     }
                                       }
                         }
                       ],
          'name' => 'append',
          'type' => 'method',
          'example' => [
                       {
                         'code' => '
$( "p" ).append( "<strong>Hello</strong>" );
',
                         'html' => '
<p>I would like to say: </p>
',
                         'desc' => 'Appends some HTML to all paragraphs.',
                         'css' => '
  p {
    background: yellow;
  }
'
                       },
                       {
                         'css' => '
  p {
    background: yellow;
  }
',
                         'html' => '
<p>I would like to say: </p>
',
                         'desc' => 'Appends an Element to all paragraphs.',
                         'code' => '
$( "p" ).append( document.createTextNode( "Hello" ) );
'
                       },
                       {
                         'code' => '
$( "p" ).append( $( "strong" ) );
',
                         'css' => '
  p {
    background: yellow;
  }
',
                         'desc' => 'Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.',
                         'html' => '
<strong>Hello world!!!</strong>
<p>I would like to say: </p>
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'em' => 'first',
                                 'a' => {
                                        'href' => '/prepend/',
                                        'code' => '.prepend()'
                                      },
                                 'content' => [
                                                'The ',
                                                ' method inserts the  specified content as the last child of each element in the jQuery collection (To insert it as the ',
                                                ' child, use ',
                                                ').'
                                              ],
                                 'code' => '.append()'
                               },
                               {
                                 'code' => [
                                           '.append()',
                                           {
                                             'a' => {
                                                    'content' => '.appendTo()',
                                                    'href' => '/appendTo/'
                                                  }
                                           },
                                           '.append()',
                                           '.appendTo()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                ' methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With ',
                                                ', the selector expression preceding the method is the container into which the content is inserted. With ',
                                                ', on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.'
                                              ]
                               },
                               'Consider the following HTML:',
                               'You can create content and insert it into several elements at once:',
                               {
                                 'code' => '<div>',
                                 'content' => [
                                                'Each inner ',
                                                ' element gets this new content:'
                                              ]
                               },
                               'You can also select an element on the page and insert it into another:',
                               'If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned):',
                               {
                                 'content' => ': If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.',
                                 'strong' => 'Important'
                               },
                               {
                                 'content' => [
                                                'Similar to other content-adding methods such as ',
                                                ' and ',
                                                ', ',
                                                ' also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.'
                                              ],
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '.prepend()',
                                                    'href' => '/prepend/'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'content' => '.before()',
                                                    'href' => '/before/'
                                                  }
                                           },
                                           '.append()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'For example, the following will insert two new ',
                                                's and an existing ',
                                                ' as the last three child nodes of the body:'
                                              ],
                                 'code' => [
                                           '<div>',
                                           '<div>'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Since ',
                                                ' can accept any number of additional arguments, the same result can be achieved by passing in the three ',
                                                's as three separate arguments, like so: ',
                                                '. The type and number of arguments will largely depend on how you collect the elements in your code.'
                                              ],
                                 'code' => [
                                           '.append()',
                                           '<div>',
                                           '$(\'body\').append( $newdiv1, newdiv2, existingdiv1 )'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".inner" ).append( "<p>Test</p>" );
    '
                                 },
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">
    Hello
    <p>Test</p>
  </div>
  <div class="inner">
    Goodbye
    <p>Test</p>
  </div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".container" ).append( $( "h2" ) );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
  <h2>Greetings</h2>
</div>
    '
                                 },
                                 {
                                   'code' => '
var $newdiv1 = $( "<div id=\'object1\'></div>" ),
  newdiv2 = document.createElement( "div" ),
  existingdiv1 = document.getElementById( "foo" );

$( "body" ).append( $newdiv1, [ newdiv2, existingdiv1 ] );
    '
                                 }
                               ],
                        'h4' => {
                                'id' => 'additional-arguments',
                                'content' => 'Additional Arguments'
                              }
                      },
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-inside'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/appendTo.xml ####
Possible keys are: signature category name type longdesc example desc note return title
$VAR1 = {
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'desc' => 'A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.',
                                       'name' => 'target',
                                       'type' => {
                                                 'Array' => {},
                                                 'htmlString' => {},
                                                 'Element' => {},
                                                 'jQuery' => {},
                                                 'Selector' => {}
                                               }
                                     }
                       },
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-inside'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'appendTo',
          'type' => 'method',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "<p>Test</p>" ).appendTo( ".inner" );
    '
                                 },
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">
    Hello
    <p>Test</p>
  </div>
  <div class="inner">
    Goodbye
    <p>Test</p>
  </div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "h2" ).appendTo( $( ".container" ) );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
  <h2>Greetings</h2>
</div>
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                ' methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With ',
                                                ', the selector expression preceding the method is the container into which the content is inserted. With ',
                                                ', on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.'
                                              ],
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/append/',
                                                    'content' => '.append()'
                                                  }
                                           },
                                           '.appendTo()',
                                           '.append()',
                                           '.appendTo()'
                                         ]
                               },
                               'Consider the following HTML:',
                               'We can create content and insert it into several elements at once:',
                               {
                                 'code' => '<div>',
                                 'content' => [
                                                'Each inner ',
                                                ' element gets this new content:'
                                              ]
                               },
                               'We can also select an element on the page and insert it into another:',
                               'If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned) and a new set consisting of the inserted element is returned:',
                               'If there is more than one target element, however, cloned copies of the inserted element will be created for each target except the last, and that new set (the original element plus clones) is returned.',
                               {
                                 'code' => '.end()',
                                 'content' => [
                                                ' the append-to-single-element case did not create a new set, but instead returned the original set which made it difficult to use the ',
                                                ' method reliably when being used with an unknown number of elements.'
                                              ],
                                 'strong' => 'Before jQuery 1.9,'
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$( "span" ).appendTo( "#foo" );
',
                       'html' => '
<span>I have nothing more to say... </span>

<div id="foo">FOO! </div>
',
                       'desc' => 'Append all spans to the element with the ID "foo" (Check append() documentation for more examples)',
                       'css' => '
  #foo {
    background: yellow;
  }
'
                     },
          'desc' => 'Insert every element in the set of matched elements to the end of the target.',
          'note' => {
                    'html-code-execution' => {
                                             'type' => 'additional'
                                           },
                    'svg-support' => {
                                     'type' => 'additional'
                                   }
                  },
          'return' => 'jQuery',
          'title' => '.appendTo()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/attr.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element.',
          'entry' => {
                     'attr' => {
                               'signature' => [
                                              {
                                                'argument' => {
                                                              'attributeName' => {
                                                                                 'desc' => 'The name of the attribute to set.',
                                                                                 'type' => 'String'
                                                                               },
                                                              'value' => {
                                                                         'desc' => {
                                                                                   'code' => 'null',
                                                                                   'content' => [
                                                                                                  'A value to set for the attribute. If ',
                                                                                                  ', the specified attribute will be removed (as in ',
                                                                                                  ').'
                                                                                                ],
                                                                                   'a' => {
                                                                                          'code' => '.removeAttr()',
                                                                                          'href' => '/removeAttr/'
                                                                                        }
                                                                                 },
                                                                         'type' => {
                                                                                   'Null' => {},
                                                                                   'String' => {},
                                                                                   'Number' => {}
                                                                                 }
                                                                       }
                                                            },
                                                'added' => '1.0'
                                              },
                                              {
                                                'argument' => {
                                                              'desc' => 'An object of attribute-value pairs to set.',
                                                              'type' => 'PlainObject',
                                                              'name' => 'attributes'
                                                            },
                                                'added' => '1.0'
                                              },
                                              {
                                                'added' => '1.1',
                                                'argument' => {
                                                              'attributeName' => {
                                                                                 'desc' => 'The name of the attribute to set.',
                                                                                 'type' => 'String'
                                                                               },
                                                              'function' => {
                                                                            'type' => 'Function',
                                                                            'return' => {
                                                                                        'type' => {
                                                                                                  'Number' => {},
                                                                                                  'String' => {}
                                                                                                }
                                                                                      },
                                                                            'argument' => {
                                                                                          'index' => {
                                                                                                     'type' => 'Integer'
                                                                                                   },
                                                                                          'attr' => {
                                                                                                    'type' => 'String'
                                                                                                  }
                                                                                        },
                                                                            'desc' => {
                                                                                      'code' => 'this',
                                                                                      'content' => [
                                                                                                     'A function returning the value to set. ',
                                                                                                     ' is the current element. Receives the index position of the element in the set and the old attribute value as arguments.'
                                                                                                   ]
                                                                                    }
                                                                          }
                                                            }
                                              }
                                            ],
                               'category' => [
                                             {
                                               'slug' => 'attributes'
                                             },
                                             {
                                               'slug' => 'manipulation/general-attributes'
                                             },
                                             {
                                               'slug' => 'version/1.0'
                                             },
                                             {
                                               'slug' => 'version/1.1'
                                             },
                                             {
                                               'slug' => 'version/1.6'
                                             }
                                           ],
                               'type' => 'method',
                               'example' => [
                                            {
                                              'code' => '
$( "img" ).attr({
  src: "/resources/hat.gif",
  title: "jQuery",
  alt: "jQuery Logo"
});
$( "div" ).text( $( "img" ).attr( "alt" ) );
',
                                              'desc' => 'Set some attributes for all <img>s in the page.',
                                              'html' => '
<img>
<img>
<img>

<div><b>Attribute of Ajax</b></div>
',
                                              'css' => '
  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }
'
                                            },
                                            {
                                              'desc' => 'Set the id for divs based on the position in the page.',
                                              'html' => '
<div>Zero-th <span></span></div>
<div>First <span></span></div>
<div>Second <span></span></div>
',
                                              'css' => '
  div {
    color: blue;
  }
  span {
    color: red;
  }
  b {
    font-weight: bolder;
  }
',
                                              'code' => '
$( "div" )
  .attr( "id", function( arr ) {
    return "div-id" + arr;
  })
  .each(function() {
    $( "span", this ).html( "(id = \'<b>" + this.id + "</b>\')" );
});
'
                                            },
                                            {
                                              'html' => '
<img title="hat.gif">
',
                                              'desc' => 'Set the src attribute from title attribute on the image.',
                                              'code' => '
$( "img" ).attr( "src", function() {
  return "/resources/" + this.title;
});
'
                                            }
                                          ],
                               'longdesc' => {
                                             'pre' => [
                                                      {
                                                        'code' => '<img id="greatphoto" src="brush-seller.jpg" alt="brush seller">'
                                                      },
                                                      {
                                                        'code' => '
$( "#greatphoto" ).attr( "alt", "Beijing Brush Seller" );
      '
                                                      },
                                                      {
                                                        'code' => '
$( "#greatphoto" ).attr( "title", "Photo by Kelly Clark" );
      '
                                                      },
                                                      {
                                                        'code' => '
$( "#greatphoto" ).attr({
  alt: "Beijing Brush Seller",
  title: "photo by Kelly Clark"
});
      '
                                                      },
                                                      {
                                                        'code' => '
$( "#greatphoto" ).attr( "title", function( i, val ) {
  return val + " - photo by Kelly Clark";
});
      '
                                                      }
                                                    ],
                                             'p' => [
                                                    {
                                                      'code' => '.attr()',
                                                      'content' => [
                                                                     'The ',
                                                                     " method is a convenient way to set the value of attributes\x{2014}especially when setting multiple attributes or using values returned by a function. Consider the following image:"
                                                                   ]
                                                    },
                                                    {
                                                      'code' => [
                                                                'alt',
                                                                '.attr()'
                                                              ],
                                                      'content' => [
                                                                     'To change the ',
                                                                     ' attribute, simply pass the name of the attribute and its new value to the ',
                                                                     ' method:'
                                                                   ]
                                                    },
                                                    {
                                                      'content' => ' an attribute the same way:',
                                                      'em' => 'Add'
                                                    },
                                                    {
                                                      'content' => [
                                                                     'To change the ',
                                                                     ' attribute and add the ',
                                                                     ' attribute at the same time, pass both sets of names and values into the method at once using a plain JavaScript object. Each key-value pair in the object adds or modifies an attribute:'
                                                                   ],
                                                      'code' => [
                                                                'alt',
                                                                'title'
                                                              ]
                                                    },
                                                    'When setting multiple attributes, the quotes around attribute names are optional.',
                                                    {
                                                      'strong' => 'WARNING',
                                                      'content' => ': When setting the \'class\' attribute, you must always use quotes!'
                                                    },
                                                    'By using a function to set attributes, you can compute the value based on other properties of the element. For example, to concatenate a new value with an existing value:',
                                                    'This use of a function to compute attribute values can be particularly useful when modifying the attributes of multiple elements at once.',
                                                    {
                                                      'code' => [
                                                                'function(index, attr){}',
                                                                'undefined'
                                                              ],
                                                      'strong' => 'Note: ',
                                                      'content' => [
                                                                     'If nothing is returned in the setter function (ie. ',
                                                                     '), or if ',
                                                                     ' is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.'
                                                                   ]
                                                    }
                                                  ],
                                             'h4' => {
                                                     'setting-several-attrs' => {
                                                                                'content' => 'Setting several attributes at once'
                                                                              },
                                                     'setting-simple-attr' => {
                                                                              'content' => 'Setting a simple attribute'
                                                                            },
                                                     'computed-attr-values' => {
                                                                               'content' => 'Computed attribute values'
                                                                             }
                                                   },
                                             'div' => {
                                                      'class' => 'warning',
                                                      'p' => {
                                                             'strong' => 'Note:',
                                                             'content' => [
                                                                            ' Attempting to change the ',
                                                                            ' attribute on an ',
                                                                            ' or ',
                                                                            ' element created via ',
                                                                            ' will throw an exception on Internet Explorer 8 or older.'
                                                                          ],
                                                             'code' => [
                                                                       'type',
                                                                       'input',
                                                                       'button',
                                                                       'document.createElement()'
                                                                     ]
                                                           }
                                                    }
                                           },
                               'desc' => 'Set one or more attributes for the set of matched elements.',
                               'return' => 'jQuery'
                             }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/attribute-contains-prefix-selector.xml ####
Possible keys are: desc sample return title signature type name longdesc example category
$VAR1 = {
          'desc' => 'Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).',
          'sample' => '[attribute|=\'value\']',
          'return' => '',
          /''title' => 'Attribute Contains Prefix Selector [name|="value"]',
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'attribute' => {
                                                      'type' => 'String',
                                                      'desc' => 'An attribute name.'
                                                    },
                                       'value' => {
                                                  'desc' => {
                                                            'a' => {
                                                                   'content' => 'valid identifier',
                                                                   'href' => 'https://www.w3.org/TR/css3-selectors/#attribute-selectors'
                                                                 },
                                                            'content' => [
                                                                           'An attribute value. Can be either a ',
                                                                           ' or a quoted string.'
                                                                         ]
                                                          },
                                                  'type' => 'String'
                                                }
                                     }
                       },
          'type' => 'selector',
          'name' => 'attributeContainsPrefix',
          'longdesc' => {
                        'p' => 'This selector was introduced into the CSS specification to handle language attributes.'
                      },
          'example' => {
                       'code' => '
$( "a[hreflang|=\'en\']" ).css( "border", "3px dotted green" );
',
                       'html' => '
<a href="example.html" hreflang="en">Some text</a>
<a href="example.html" hreflang="en-UK">Some other text</a>
<a href="example.html" hreflang="english">will not be outlined</a>
',
                       'desc' => 'Finds all links with an hreflang attribute that is english.',
                       'css' => '
  a {
    display: inline-block;
  }
'
                     },
          'category' => [
                        {
                          'slug' => 'selectors/attribute-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/attribute-contains-selector.xml ####
Possible keys are: desc sample return title signature type name example longdesc category
$VAR1 = {
          'desc' => 'Selects elements that have the specified attribute with a value containing a given substring.',
          'sample' => '[attribute*=\'value\']',
          'return' => '',
          'title' => 'Attribute Contains Selector [name*="value"]',
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'attribute' => {
                                                      'type' => 'String',
                                                      'desc' => 'An attribute name.'
                                                    },
                                       'value' => {
                                                  'desc' => {
                                                            'content' => [
                                                                           'An attribute value. Can be either a ',
                                                                           ' or a quoted string.'
                                                                         ],
                                                            'a' => {
                                                                   'content' => 'valid identifier',
                                                                   'href' => 'https://www.w3.org/TR/css3-selectors/#attribute-selectors'
                                                                 }
                                                          },
                                                  'type' => 'String'
                                                }
                                     }
                       },
          'type' => 'selector',
          'name' => 'attributeContains',
          'example' => {
                       'desc' => 'Finds all inputs with a name attribute that contains \'man\' and sets the value with some text.',
                       'html' => '
<input name="man-news">
<input name="milkman">
<input name="letterman2">
<input name="newmilk">
',
                       'code' => '
$( "input[name*=\'man\']" ).val( "has man in it!" );
'
                     },
          'longdesc' => {
                        'p' => 'This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector\'s string appears anywhere within the element\'s attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~="word"]), which is more appropriate in many cases.'
                      },
          'category' => [
                        {
                          'slug' => 'selectors/attribute-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/attribute-contains-word-selector.xml ####
Possible keys are: return sample title desc category name type example longdesc signature
$VAR1 = {
          'return' => '',
          'sample' => '[attribute~=\'value\']',
          'title' => 'Attribute Contains Word Selector [name~="value"]',
          'desc' => 'Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.',
          'category' => [
                        {
                          'slug' => 'selectors/attribute-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'attributeContainsWord',
          'type' => 'selector',
          'example' => {
                       'html' => '
<input name="man-news">
<input name="milk man">
<input name="letterman2">
<input name="newmilk">
',
                       'desc' => 'Finds all inputs with a name attribute that contains the word \'man\' and sets the value with some text.',
                       'code' => '
$( "input[name~=\'man\']" ).val( "mr. man is in it!" );
'
                     },
          'longdesc' => {
                        'p' => 'This selector matches the test string against each word in the attribute value, where a "word" is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.'
                      },
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'value' => {
                                                  'desc' => {
                                                            'a' => {
                                                                   'href' => 'https://www.w3.org/TR/css3-selectors/#attribute-selectors',
                                                                   'content' => 'valid identifier'
                                                                 },
                                                            'content' => [
                                                                           'An attribute value. Can be either a ',
                                                                           ' or a quoted string.'
                                                                         ]
                                                          },
                                                  'type' => 'String'
                                                },
                                       'attribute' => {
                                                      'desc' => 'An attribute name.',
                                                      'type' => 'String'
                                                    }
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/attribute-ends-with-selector.xml ####
Possible keys are: sample return title desc category type name longdesc example signature
$VAR1 = {
          'sample' => '[attribute$=\'value\']',
          'return' => '',
          'title' => 'Attribute Ends With Selector [name$="value"]',
          'desc' => 'Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.',
          'category' => [
                        {
                          'slug' => 'selectors/attribute-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'selector',
          'name' => 'attributeEndsWith',
          'longdesc' => {},
          'example' => {
                       'html' => '
<input name="newsletter">
<input name="milkman">
<input name="jobletter">
',
                       'desc' => 'Finds all inputs with an attribute name that ends with \'letter\' and puts text in them.',
                       'code' => '
$( "input[name$=\'letter\']" ).val( "a letter" );
'
                     },
          'signature' => {
                         'argument' => {
                                       'attribute' => {
                                                      'type' => 'String',
                                                      'desc' => 'An attribute name.'
                                                    },
                                       'value' => {
                                                  'type' => 'String',
                                                  'desc' => {
                                                            'a' => {
                                                                   'content' => 'valid identifier',
                                                                   'href' => 'https://www.w3.org/TR/css3-selectors/#attribute-selectors'
                                                                 },
                                                            'content' => [
                                                                           'An attribute value. Can be either a ',
                                                                           ' or a quoted string.'
                                                                         ]
                                                          }
                                                }
                                     },
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/attribute-equals-selector.xml ####
Possible keys are: category type name longdesc example signature sample return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/attribute-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'selector',
          'name' => 'attributeEquals',
          'longdesc' => {},
          'example' => {
                       'html' => '
<div>
  <label>
    <input type="radio" name="newsletter" value="Hot Fuzz">
    <span>name?</span>
  </label>
</div>
<div>
  <label>
    <input type="radio" name="newsletter" value="Cold Fusion">
    <span>value?</span>
  </label>
</div>
<div>
  <label>
    <input type="radio" name="newsletter" value="Evil Plans">
    <span>value?</span>
  </label>
</div>
',
                       'desc' => 'Finds all inputs with a value of "Hot Fuzz" and changes the text of the next sibling span.',
                       'code' => '
$( "input[value=\'Hot Fuzz\']" ).next().text( "Hot Fuzz" );
'
                     },
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'value' => {
                                                  'desc' => {
                                                            'strong' => {
                                                                        'a' => {
                                                                               'href' => 'https://www.w3.org/TR/css3-selectors/#attribute-selectors',
                                                                               'content' => 'valid identifier'
                                                                             },
                                                                        'content' => [
                                                                                       'Can be either a ',
                                                                                       ' or a quoted string.'
                                                                                     ]
                                                                      },
                                                            'content' => 'An attribute value. '
                                                          },
                                                  'type' => 'String'
                                                },
                                       'attribute' => {
                                                      'type' => 'String',
                                                      'desc' => 'An attribute name.'
                                                    }
                                     }
                       },
          'sample' => '[attribute=\'value\']',
          'return' => '',
          'title' => 'Attribute Equals Selector [name="value"]',
          'desc' => 'Selects elements that have the specified attribute with a value exactly equal to a certain value.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/attribute-not-equal-selector.xml ####
Possible keys are: category name type longdesc example signature sample return title note desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/attribute-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'attributeNotEqual',
          'type' => 'selector',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'This selector is equivalent to ',
                                              '.'
                                            ],
                               'code' => ':not([attr=\'value\'])'
                             }
                      },
          'example' => {
                       'code' => '
$( "input[name!=\'newsletter\']" ).next().append( "<b>; not newsletter</b>" );
',
                       'html' => '
<div>
  <input type="radio" name="newsletter" value="Hot Fuzz">
  <span>name is newsletter</span>
</div>
<div>
  <input type="radio" value="Cold Fusion">
  <span>no name</span>
</div>
<div>
  <input type="radio" name="accept" value="Evil Plans">
  <span>name is accept</span>
</div>
',
                       'desc' => 'Finds all inputs that don\'t have the name \'newsletter\' and appends text to the span next to it.'
                     },
          'signature' => {
                         'argument' => {
                                       'attribute' => {
                                                      'type' => 'String',
                                                      'desc' => 'An attribute name.'
                                                    },
                                       'value' => {
                                                  'type' => 'String',
                                                  'desc' => {
                                                            'a' => {
                                                                   'content' => 'valid identifier',
                                                                   'href' => 'https://www.w3.org/TR/css3-selectors/#attribute-selectors'
                                                                 },
                                                            'content' => [
                                                                           'An attribute value. Can be either a ',
                                                                           ' or a quoted string.'
                                                                         ]
                                                          }
                                                }
                                     },
                         'added' => '1.0'
                       },
          'sample' => '[attribute!=\'value\']',
          'return' => '',
          'title' => 'Attribute Not Equal Selector [name!="value"]',
          'note' => {
                    'data-selector' => '[name!="value"]',
                    'data-alt' => '$( "your-pure-css-selector" ).not( "[name=\'value\']" )',
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension-alt'
                  },
          'desc' => 'Select elements that either don\'t have the specified attribute, or do have the specified attribute but not with a certain value.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/attribute-starts-with-selector.xml ####
Possible keys are: desc sample return title signature category type name longdesc example
$VAR1 = {
          'desc' => 'Selects elements that have the specified attribute with a value beginning exactly with a given string.',
          'sample' => '[attribute^=\'value\']',
          'return' => '',
          'title' => 'Attribute Starts With Selector [name^="value"]',
          'signature' => {
                         'argument' => {
                                       'attribute' => {
                                                      'desc' => 'An attribute name.',
                                                      'type' => 'String'
                                                    },
                                       'value' => {
                                                  'desc' => {
                                                            'a' => {
                                                                   'content' => 'valid identifier',
                                                                   'href' => 'https://www.w3.org/TR/css3-selectors/#attribute-selectors'
                                                                 },
                                                            'content' => [
                                                                           'An attribute value. Can be either a ',
                                                                           ' or a quoted string.'
                                                                         ]
                                                          },
                                                  'type' => 'String'
                                                }
                                     },
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/attribute-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'selector',
          'name' => 'attributeStartsWith',
          'longdesc' => {
                        'p' => 'This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.'
                      },
          'example' => {
                       'code' => '
$( "input[name^=\'news\']" ).val( "news here!" );
',
                       'desc' => 'Finds all inputs with an attribute name that starts with \'news\' and puts text in them.',
                       'html' => '
<input name="newsletter">
<input name="milkman">
<input name="newsboy">
'
                     }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/before.xml ####
Possible keys are: signature category example longdesc name type desc note title return
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'content' => {
                                                      'desc' => 'One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert before each element in the set of matched elements.',
                                                      'optional' => 'true',
                                                      'type' => {
                                                                'Element' => {},
                                                                'jQuery' => {},
                                                                'Text' => {},
                                                                'Array' => {},
                                                                'htmlString' => {}
                                                              }
                                                    }
                                       },
                           'added' => '1.0'
                         },
                         {
                           'argument' => {
                                         'name' => 'function',
                                         'return' => {
                                                     'type' => {
                                                               'htmlString' => {},
                                                               'Text' => {},
                                                               'jQuery' => {},
                                                               'Element' => {}
                                                             }
                                                   },
                                         'type' => 'Function',
                                         'argument' => {
                                                       'name' => 'index',
                                                       'type' => 'Integer'
                                                     },
                                         'desc' => {
                                                   'content' => [
                                                                  'A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, ',
                                                                  ' refers to the current element in the set.
      '
                                                                ],
                                                   'code' => 'this'
                                                 }
                                       },
                           'added' => '1.4'
                         },
                         {
                           'argument' => {
                                         'desc' => {
                                                   'code' => 'this',
                                                   'content' => [
                                                                  'A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, ',
                                                                  ' refers to the current element in the set.
      '
                                                                ]
                                                 },
                                         'argument' => {
                                                       'html' => {
                                                                 'type' => 'String'
                                                               },
                                                       'index' => {
                                                                  'type' => 'Integer'
                                                                }
                                                     },
                                         'return' => {
                                                     'type' => {
                                                               'Element' => {},
                                                               'jQuery' => {},
                                                               'Text' => {},
                                                               'htmlString' => {}
                                                             }
                                                   },
                                         'name' => 'function-html',
                                         'type' => 'Function'
                                       },
                           'added' => '1.10'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-outside'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'example' => [
                       {
                         'code' => '
$( "p" ).before( "<b>Hello</b>" );
',
                         'html' => '
<p> is what I said...</p>
',
                         'desc' => 'Inserts some HTML before all paragraphs.',
                         'css' => '
  p {
    background: yellow;
  }
'
                       },
                       {
                         'html' => '
<p> is what I said...</p>
',
                         'desc' => 'Inserts a DOM element before all paragraphs.',
                         'css' => '
  p {
    background: yellow;
  }
',
                         'code' => '
$( "p" ).before( document.createTextNode( "Hello" ) );
'
                       },
                       {
                         'css' => '
  p {
    background: yellow;
  }
',
                         'html' => '
<p> is what I said...</p><b>Hello</b>
',
                         'desc' => 'Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.',
                         'code' => '
$( "p" ).before( $( "b" ) );
'
                       }
                     ],
          'longdesc' => {
                        'h4' => {
                                'content' => 'Additional Arguments',
                                'id' => 'additional-arguments'
                              },
                        'p' => [
                               {
                                 'code' => [
                                           '.before()',
                                           {
                                             'a' => {
                                                    'href' => '/insertBefore/',
                                                    'content' => '.insertBefore()'
                                                  }
                                           },
                                           '.before()',
                                           '$(target).before(contentToBeInserted)',
                                           '.insertBefore()',
                                           '.insertBefore()',
                                           '$(contentToBeInserted).insertBefore(target)'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                " methods perform the same task. The major difference is in the syntax\x{2014}specifically, in the placement of the content and target. With ",
                                                ', the content to be inserted comes from the method\'s argument: ',
                                                '. With ',
                                                ', on the other hand, the content precedes the method and is inserted before the target, which in turn is passed as the ',
                                                ' method\'s argument: ',
                                                '.'
                                              ]
                               },
                               'Consider the following HTML:',
                               'You can create content and insert it before several elements at once:',
                               {
                                 'code' => '<div>',
                                 'content' => [
                                                'Each inner ',
                                                ' element gets this new content:'
                                              ]
                               },
                               'You can also select an element on the page and insert it before another:',
                               'If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved before the target (not cloned):',
                               {
                                 'strong' => 'Important',
                                 'content' => ': If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.'
                               },
                               {
                                 'content' => [
                                                'Similar to other content-adding methods such as ',
                                                ' and ',
                                                ', ',
                                                ' also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.'
                                              ],
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/prepend/',
                                                    'content' => '.prepend()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'content' => '.after()',
                                                    'href' => '/after/'
                                                  }
                                           },
                                           '.before()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'For example, the following will insert two new ',
                                                's and an existing ',
                                                ' before the first paragraph:'
                                              ],
                                 'code' => [
                                           '<div>',
                                           '<div>'
                                         ]
                               },
                               {
                                 'code' => [
                                           '.before()',
                                           '<div>',
                                           '$( "p" ).first().before( $newdiv1, newdiv2, existingdiv1 )'
                                         ],
                                 'content' => [
                                                'Since ',
                                                ' can accept any number of additional arguments, the same result can be achieved by passing in the three ',
                                                's as three separate arguments, like so: ',
                                                '. The type and number of arguments will largely depend on how you collect the elements in your code.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <h2>Greetings</h2>
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".inner" ).before( "<p>Test</p>" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <h2>Greetings</h2>
  <p>Test</p>
  <div class="inner">Hello</div>
  <p>Test</p>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".container" ).before( $( "h2" ) );
    '
                                 },
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
var newdiv1 = $( "<div id=\'object1\'></div>" ),
  newdiv2 = document.createElement( "div" ),
  existingdiv1 = document.getElementById( "foo" );

$( "p" ).first().before( newdiv1, [ newdiv2, existingdiv1 ] );
    '
                                 }
                               ]
                      },
          'name' => 'before',
          'type' => 'method',
          'desc' => 'Insert content, specified by the parameter, before each element in the set of matched elements.',
          'note' => {
                    'html-code-execution' => {
                                             'type' => 'additional'
                                           },
                    'disconnected-manipulation' => {
                                                   'data-title' => '.before()',
                                                   'type' => 'additional'
                                                 }
                  },
          'title' => '.before()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/bind.xml ####
Possible keys are: signature longdesc example type name category desc title return
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'type' => 'Function'
                                                    },
                                         'eventType' => {
                                                        'desc' => 'A string containing one or more DOM event types, such as "click" or "submit," or custom event names.',
                                                        'type' => 'String'
                                                      },
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      }
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'eventData' => {
                                                        'optional' => 'true',
                                                        'type' => 'Anything',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      },
                                         'preventBubble' => {
                                                            'desc' => 'Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.',
                                                            'type' => 'Boolean',
                                                            'optional' => 'true'
                                                          },
                                         'eventType' => {
                                                        'desc' => 'A string containing one or more DOM event types, such as "click" or "submit," or custom event names.',
                                                        'type' => 'String'
                                                      }
                                       }
                         },
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'type' => 'Object',
                                         'name' => 'events',
                                         'desc' => 'An object containing one or more DOM event types and functions to execute for them.'
                                       }
                         }
                       ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$( "#foo" ).bind( "click", function() {
  alert( "User clicked on \'foo.\'" );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).bind( "mouseenter mouseleave", function() {
  $( this ).toggleClass( "entered" );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).bind({
  click: function() {
    // Do something on click
  },
  mouseenter: function() {
    // Do something on mouseenter
  }
});
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).bind( "click", function() {
  alert( $( this ).text() );
});
    '
                                 },
                                 {
                                   'code' => '
$( document ).ready(function() {
  $( "#foo" ).bind( "click", function( event ) {
    alert( "The mouse cursor is at (" +
      event.pageX + ", " + event.pageY +
      ")" );
  });
});
    '
                                 },
                                 {
                                   'code' => '
var message = "Spoon!";
$( "#foo" ).bind( "click", function() {
  alert( message );
});
message = "Not in the face!";
$( "#bar" ).bind( "click", function() {
  alert( message );
});
    '
                                 },
                                 {
                                   'code' => '
var message = "Spoon!";
$( "#foo" ).bind( "click", {
  msg: message
}, function( event ) {
  alert( event.data.msg );
});
message = "Not in the face!";
$( "#bar" ).bind( "click", {
  msg: message
}, function( event ) {
  alert( event.data.msg );
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.bind()',
                                           '.bind()'
                                         ],
                                 'content' => [
                                                'As of jQuery 1.7, the ',
                                                ' method is the preferred method for attaching event handlers to a document. For earlier versions, the ',
                                                ' method is used for attaching an event handler directly to elements. Handlers are attached to the currently selected elements in the jQuery object, so those elements ',
                                                ' at the point the call to ',
                                                ' occurs. For more flexible event binding, see the discussion of event delegation in ',
                                                ' or ',
                                                '.'
                                              ],
                                 'a' => [
                                        {
                                          'code' => '.on()',
                                          'href' => '/on/'
                                        },
                                        {
                                          'href' => '/on/',
                                          'code' => '.on()'
                                        },
                                        {
                                          'code' => '.delegate()',
                                          'href' => '/delegate/'
                                        }
                                      ],
                                 'em' => 'must exist'
                               },
                               {
                                 'code' => [
                                           'eventType',
                                           '.trigger()',
                                           '.triggerHandler()'
                                         ],
                                 'content' => [
                                                'Any string is legal for ',
                                                '; if the string is not the name of a native DOM event, then the handler is bound to a custom event. These events are never called by the browser, but may be triggered manually from other JavaScript code using ',
                                                ' or ',
                                                '.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'eventType',
                                           '.',
                                           '.bind( "click.name", handler )',
                                           'click',
                                           'name',
                                           '.unbind()'
                                         ],
                                 'content' => [
                                                'If the ',
                                                ' string contains a period (',
                                                ') character, then the event is namespaced. The period character separates the event from its namespace. For example, in the call ',
                                                ', the string ',
                                                ' is the event type, and the string ',
                                                ' is the namespace. Namespacing allows us to unbind or trigger some events of a type without affecting others. See the discussion of ',
                                                ' for more information.'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'href' => '/click/',
                                          'code' => '.click()'
                                        },
                                        {
                                          'content' => 'events category',
                                          'href' => '/category/events/'
                                        }
                                      ],
                                 'content' => [
                                                'There are shorthand methods for some standard browser events such as ',
                                                ' that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the ',
                                                '.'
                                              ]
                               },
                               'When an event reaches an element, all handlers bound to that event type for the element are fired. If there are multiple handlers registered, they will always execute in the order in which they were bound. After all handlers have executed, the event continues along the normal event propagation path.',
                               {
                                 'content' => [
                                                'A basic usage of ',
                                                ' is:'
                                              ],
                                 'code' => '.bind()'
                               },
                               {
                                 'code' => [
                                           'foo',
                                           'click'
                                         ],
                                 'content' => [
                                                'This code will cause the element with an ID of ',
                                                ' to respond to the ',
                                                ' event. When a user clicks inside this element thereafter, the alert will be shown.'
                                              ]
                               },
                               'Multiple event types can be bound at once by including each one separated by a space:',
                               {
                                 'code' => [
                                           '<div id="foo">',
                                           '<div>'
                                         ],
                                 'content' => [
                                                'The effect of this on ',
                                                ' (when it does not initially have the "entered" class) is to add the "entered" class when the mouse enters the ',
                                                ' and remove the class when the mouse leaves. '
                                              ]
                               },
                               'As of jQuery 1.4 we can bind multiple event handlers simultaneously by passing an object of event type/handler pairs:',
                               {
                                 'code' => [
                                           'handler',
                                           'this',
                                           '$()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' parameter takes a callback function, as shown above. Within the handler, the keyword ',
                                                ' refers to the DOM element to which the handler is bound. To make use of the element in jQuery, it can be passed to the normal ',
                                                ' function. For example:'
                                              ]
                               },
                               {
                                 'code' => 'foo',
                                 'content' => [
                                                'After this code is executed, when the user clicks inside the element with an ID of ',
                                                ', its text contents will be shown as an alert.
    '
                                              ]
                               },
                               'As of jQuery 1.4.2 duplicate event handlers can be bound to an element instead of being discarded. This is useful when the event data feature is being used, or when other unique data resides in a closure around the event handler function.',
                               {
                                 'content' => [
                                                'In jQuery 1.4.3 you can now pass in ',
                                                ' in place of an event handler. This will bind an event handler equivalent to: ',
                                                '. This function can be removed at a later time by calling: ',
                                                '.'
                                              ],
                                 'code' => [
                                           'false',
                                           'function(){ return false; }',
                                           '.unbind( eventName, false )'
                                         ]
                               },
                               {
                                 'code' => 'handler',
                                 'content' => [
                                                'The ',
                                                ' callback function can also take parameters. When the function is called, the event object will be passed to the first parameter.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. However, at times it becomes necessary to gather more information about the user\'s environment at the time the event was initiated. ',
                                                '.'
                                              ],
                                 'a' => {
                                        'content' => 'View the full Event Object',
                                        'href' => '/category/events/event-object/'
                                      }
                               },
                               {
                                 'content' => [
                                                'Returning ',
                                                ' from a handler is equivalent to calling both ',
                                                ' and ',
                                                ' on the event object.'
                                              ],
                                 'code' => [
                                           'false',
                                           '.preventDefault()',
                                           '.stopPropagation()'
                                         ]
                               },
                               'Using the event object in a handler looks like this:',
                               {
                                 'code' => 'foo',
                                 'content' => [
                                                'Note the parameter added to the anonymous function. This code will cause a click on the element with ID ',
                                                ' to report the page coordinates of the mouse cursor at the time of the click.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The optional ',
                                                ' parameter is not commonly used. When provided, this argument allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. For example, suppose we have two event handlers that both refer to the same external variable:'
                                              ],
                                 'code' => 'eventData'
                               },
                               {
                                 'samp' => 'Not in the face!',
                                 'code' => [
                                           'message',
                                           'eventData'
                                         ],
                                 'content' => [
                                                'Because the handlers are closures that both have ',
                                                ' in their environment, both will display the message ',
                                                ' when triggered. The variable\'s value has changed. To sidestep this, we can pass the message in using ',
                                                ':
    '
                                              ]
                               },
                               {
                                 'em' => 'by value',
                                 'content' => [
                                                'This time the variable is not referred to directly within the handlers; instead, the variable is passed in ',
                                                ' through ',
                                                ', which fixes the value at the time the event is bound. The first handler will now display ',
                                                ' while the second will alert '
                                              ],
                                 'samp' => [
                                           'Spoon!',
                                           'Not in the face!'
                                         ],
                                 'code' => 'eventData'
                               },
                               {
                                 'content' => [
                                                'If ',
                                                ' is present, it is the second argument to the ',
                                                ' method; if no additional data needs to be sent to the handler, then the callback is passed as the second and final argument.'
                                              ],
                                 'code' => [
                                           'eventData',
                                           '.bind()'
                                         ]
                               },
                               'As of jQuery 1.4 we can no longer attach data (and thus, events) to object, embed, or applet elements because critical errors occur when attaching data to Java applets.',
                               {
                                 'content' => [
                                                'Although demonstrated in the next example, it is inadvisable to bind handlers to both the ',
                                                ' and ',
                                                ' events for the same element. The sequence of events triggered varies from browser to browser, with some receiving two click events before the ',
                                                ' and others only one. Double-click sensitivity (maximum time between clicks that is detected as a double click) can vary by operating system and browser, and is often user-configurable.'
                                              ],
                                 'strong' => 'Note: ',
                                 'code' => [
                                           'click',
                                           'dblclick',
                                           'dblclick'
                                         ]
                               }
                             ],
                        'div' => [
                                 {
                                   'p' => {
                                          'em' => 'by reference',
                                          'content' => [
                                                         'Note that objects are passed to functions ',
                                                         ', which further complicates this scenario.'
                                                       ]
                                        },
                                   'class' => 'warning'
                                 },
                                 {
                                   'p' => {
                                          'code' => '.trigger()',
                                          'content' => [
                                                         'See the ',
                                                         ' method reference for a way to pass data to a handler at the time the event happens rather than when the handler is bound.'
                                                       ]
                                        },
                                   'class' => 'warning'
                                 }
                               ],
                        'h4' => {
                                'event-object' => {
                                                  'a' => {
                                                         'href' => '/category/events/event-object/',
                                                         'content' => 'The Event object'
                                                       }
                                                },
                                'passing-event-data' => {
                                                        'content' => 'Passing Event Data'
                                                      },
                                'multiple-events' => {
                                                     'content' => 'Multiple Events'
                                                   },
                                'event-handlers' => {
                                                    'content' => 'Event Handlers'
                                                  }
                              }
                      },
          'example' => [
                       {
                         'html' => '
<p>Click or double click here.</p>
<span></span>
',
                         'desc' => 'Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.',
                         'css' => '
  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
     background: #ccc;
  }
  span {
    color: red;
  }
',
                         'code' => '
$( "p" ).bind( "click", function( event ) {
  var str = "( " + event.pageX + ", " + event.pageY + " )";
  $( "span" ).text( "Click happened! " + str );
});
$( "p" ).bind( "dblclick", function() {
  $( "span" ).text( "Double-click happened in " + this.nodeName );
});
$( "p" ).bind( "mouseenter mouseleave", function( event ) {
  $( this ).toggleClass( "over" );
});
'
                       },
                       {
                         'desc' => 'To display each paragraph\'s text in an alert box whenever it is clicked:',
                         'code' => '
$( "p" ).bind( "click", function() {
  alert( $( this ).text() );
});
'
                       },
                       {
                         'code' => '
function handler( event ) {
  alert( event.data.foo );
}
$( "p" ).bind( "click", {
  foo: "bar"
}, handler );
',
                         'desc' => 'You can pass some extra data before the event handler:'
                       },
                       {
                         'code' => '
$( "form" ).bind( "submit", function() {
  return false;
})
',
                         'desc' => {
                                   'code' => 'false',
                                   'content' => [
                                                  'Cancel a default action and prevent it from bubbling up by returning ',
                                                  ':'
                                                ]
                                 }
                       },
                       {
                         'code' => '
$( "form" ).bind( "submit", function( event ) {
  event.preventDefault();
});
',
                         'desc' => 'Cancel only the default action by using the .preventDefault() method.'
                       },
                       {
                         'desc' => 'Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.',
                         'code' => '
$( "form" ).bind( "submit", function( event ) {
  event.stopPropagation();
});
'
                       },
                       {
                         'code' => '
$( "p" ).bind( "myCustomEvent", function( e, myName, myValue ) {
  $( this ).text( myName + ", hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent", [ "John" ] );
});
',
                         'css' => '
  p {
    color: red;
  }
  span {
    color: blue;
  }
',
                         'html' => '
<p>Has an attached custom event.</p>
<button>Trigger custom event</button>
<span style="display: none;"></span>
',
                         'desc' => 'Bind custom events.'
                       },
                       {
                         'desc' => 'Bind multiple events simultaneously.',
                         'code' => '
$( "div.test" ).bind({
  click: function() {
    $( this ).addClass( "active" );
  },
  mouseenter: function() {
    $( this ).addClass( "inside" );
  },
  mouseleave: function() {
    $( this ).removeClass( "inside" );
  }
});
'
                       }
                     ],
          'type' => 'method',
          'name' => 'bind',
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'desc' => 'Attach a handler to an event for the elements.',
          'title' => '.bind()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/blur.xml ####
Possible keys are: note desc return title signature category type name example longdesc
$VAR1 = {
          'note' => {
                    'data-event' => 'blur',
                    'type' => 'additional',
                    'id' => 'detach-shorthand'
                  },
          'desc' => 'Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.',
          'return' => 'jQuery',
          'title' => '.blur()',
          'signature' => [
                         {
                           'argument' => {
                                         'name' => 'handler',
                                         'type' => 'Function',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'argument' => {
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      },
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'type' => 'Function'
                                                    }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'events/form-events'
                        },
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'type' => 'method',
          'name' => 'blur',
          'example' => {
                       'code' => '
$( "p" ).blur();
',
                       'desc' => 'To trigger the blur event on all paragraphs:'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ],
                                 'code' => [
                                           '.on( "blur", handler )',
                                           '.trigger( "blur" )'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when it loses focus. Originally, this event was only applicable to form elements, such as ',
                                                '. In recent browsers, the domain of the event has been extended to include all element types. An element can lose focus via keyboard commands, such as the Tab key, or by mouse clicks elsewhere on the page.'
                                              ],
                                 'code' => [
                                           'blur',
                                           '<input>'
                                         ]
                               },
                               'For example, consider the HTML:',
                               'Now if the first field has the focus, clicking elsewhere or tabbing away from it displays the alert:',
                               {
                                 'samp' => 'Handler for .blur() called.'
                               },
                               {
                                 'content' => [
                                                'To trigger the event programmatically, apply ',
                                                ' without an argument:'
                                              ],
                                 'code' => '.blur()'
                               },
                               {
                                 'samp' => 'Trigger the handler',
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also alert the message.'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'code' => '.live()',
                                          'href' => '/live/'
                                        },
                                        {
                                          'code' => '.delegate()',
                                          'href' => '/delegate/'
                                        }
                                      ],
                                 'content' => [
                                                'The ',
                                                ' event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the ',
                                                ' event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping ',
                                                ' to the ',
                                                ' event in its event delegation methods, ',
                                                ' and ',
                                                '.'
                                              ],
                                 'code' => [
                                           'blur',
                                           'blur',
                                           'blur',
                                           'focusout'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<form>
  <input id="target" type="text" value="Field 1">
  <input type="text" value="Field 2">
</form>
<div id="other">
  Trigger the handler
</div>
The event handler can be bound to the first input field:
$( "#target" ).blur(function() {
  alert( "Handler for .blur() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).blur();
});
    '
                                 }
                               ]
                      }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/button-selector.xml ####
Possible keys are: name type longdesc example category signature sample return title desc note
$VAR1 = {
          'name' => 'button',
          'type' => 'selector',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'An equivalent selector to ',
                                              ' using valid CSS is ',
                                              '.'
                                            ],
                               'code' => [
                                         '$( ":button" )',
                                         '$( "button, input[type=\'button\']" )'
                                       ]
                             }
                      },
          'example' => {
                       'desc' => 'Find all button inputs and mark them.',
                       'html' => '
<form>
  <fieldset>
    <input type="button" value="Input Button">
    <input type="checkbox">

    <input type="file">
    <input type="hidden">
    <input type="image">

    <input type="password">
    <input type="radio">
    <input type="reset">

    <input type="submit">
    <input type="text">
    <select>
      <option>Option</option>
    </select>

    <textarea></textarea>
    <button>Button</button>
  </fieldset>
</form>

<div></div>
',
                       'css' => '
  textarea {
    height: 35px;
  }
  div {
    color: red;
  }
  fieldset {
    margin: 0;
    padding: 0;
    border-width: 0;
  }
  .marked {
    background-color: yellow;
    border: 3px red solid;
  }
',
                       'code' => '
var input = $( ":button" ).addClass( "marked" );
$( "div" ).text( "For this type jQuery found " + input.length + "." );
// Prevent the form from submitting
$( "form" ).submit(function( event ) {
  event.preventDefault();
});
'
                     },
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0'
                       },
          'sample' => ':button',
          'return' => '',
          'title' => ':button Selector',
          'desc' => 'Selects all button elements and elements of type button.',
          'note' => {
                    'id' => 'jquery-selector-extension',
                    'type' => 'additional',
                    'data-selector' => ':button'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.add.xml ####
Possible keys are: category name type longdesc example signature return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'name' => 'callbacks.add',
          'type' => 'method',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'This method returns the Callbacks object onto which it is attached (',
                                              ').'
                                            ],
                               'code' => 'this'
                             }
                      },
          'example' => {
                       'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo: " + value );
};

// Another function to also be added to the list
var bar = function( value ) {
  console.log( "bar: " + value );
};

var callbacks = $.Callbacks();

// Add the function "foo" to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "hello" );
// Outputs: "foo: hello"

// Add the function "bar" to the list
callbacks.add( bar );

// Fire the items on the list again
callbacks.fire( "world" );

// Outputs:
// "foo: world"
// "bar: world"
',
                       'desc' => {
                                 'code' => 'callbacks.add()',
                                 'content' => [
                                                'Use ',
                                                ' to add new callbacks to a callback list:'
                                              ]
                               }
                     },
          'signature' => {
                         'argument' => {
                                       'desc' => 'A function, or array of functions, that are to be added to the callback list.',
                                       'type' => {
                                                 'Function' => {},
                                                 'Array' => {}
                                               },
                                       'name' => 'callbacks'
                                     },
                         'added' => '1.7'
                       },
          'return' => 'Callbacks',
          'title' => 'callbacks.add()',
          'desc' => 'Add a callback or a collection of callbacks to a callback list.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.disable.xml ####
Possible keys are: category example longdesc name type signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'example' => {
                       'desc' => {
                                 'code' => 'callbacks.disable()',
                                 'content' => [
                                                'Use ',
                                                ' to disable further calls to a callback list:'
                                              ]
                               },
                       'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( value );
};

var callbacks = $.Callbacks();

// Add the above function to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "foo" );
// Outputs: foo

// Disable further calls being possible
callbacks.disable();

// Attempt to fire with "foobar" as an argument
callbacks.fire( "foobar" );
// foobar isn\'t output
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'This method returns the Callbacks object onto which it is attached (',
                                              ').'
                                            ],
                               'code' => 'this'
                             }
                      },
          'name' => 'callbacks.disable',
          'type' => 'method',
          'signature' => {
                         'added' => '1.7'
                       },
          'title' => 'callbacks.disable()',
          'return' => 'Callbacks',
          'desc' => 'Disable a callback list from doing anything more.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.disabled.xml ####
Possible keys are: category longdesc example type name signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'longdesc' => {},
          'example' => {
                       'desc' => {
                                 'code' => 'callbacks.disabled()',
                                 'content' => [
                                                'Use ',
                                                ' to determine if the callbacks list has been disabled:'
                                              ]
                               },
                       'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo:" + value );
};

var callbacks = $.Callbacks();

// Add the logging function to the callback list
callbacks.add( foo );

// Fire the items on the list, passing an argument
callbacks.fire( "hello" );
// Outputs "foo: hello"

// Disable the callbacks list
callbacks.disable();

// Test the disabled state of the list
console.log ( callbacks.disabled() );
// Outputs: true
'
                     },
          'type' => 'method',
          'name' => 'callbacks.disabled',
          'signature' => {
                         'added' => '1.7'
                       },
          'title' => 'callbacks.disabled()',
          'return' => 'Boolean',
          'desc' => 'Determine if the callbacks list has been disabled.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.empty.xml ####
Possible keys are: category longdesc example name type signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'This method returns the Callbacks object onto which it is attached (',
                                              ').'
                                            ],
                               'code' => 'this'
                             }
                      },
          'example' => {
                       'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value1, value2 ) {
  console.log( "foo: " + value1 + "," + value2 );
};

// Another function to also be added to the list
var bar = function( value1, value2 ) {
  console.log( "bar: " + value1 + "," + value2 );
};

var callbacks = $.Callbacks();

// Add the two functions
callbacks.add( foo );
callbacks.add( bar );

// Empty the callbacks list
callbacks.empty();

// Check to ensure all callbacks have been removed
console.log( callbacks.has( foo ) );
// false
console.log( callbacks.has( bar ) );
// false
',
                       'desc' => {
                                 'content' => [
                                                'Use ',
                                                ' to empty a list of callbacks:'
                                              ],
                                 'code' => 'callbacks.empty()'
                               }
                     },
          'name' => 'callbacks.empty',
          'type' => 'method',
          'signature' => {
                         'added' => '1.7'
                       },
          'title' => 'callbacks.empty()',
          'return' => 'Callbacks',
          'desc' => 'Remove all of the callbacks from a list.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.fire.xml ####
Possible keys are: desc return title signature name type example longdesc category
$VAR1 = {
          'desc' => 'Call all of the callbacks with the given arguments.',
          'return' => 'Callbacks',
          'title' => 'callbacks.fire()',
          'signature' => {
                         'added' => '1.7',
                         'argument' => {
                                       'desc' => 'The argument or list of arguments to pass back to the callback list.',
                                       'name' => 'arguments',
                                       'type' => 'Anything'
                                     }
                       },
          'name' => 'callbacks.fire',
          'type' => 'method',
          'example' => {
                       'desc' => {
                                 'content' => [
                                                'Use ',
                                                ' to invoke the callbacks in a list with any arguments that have been passed:'
                                              ],
                                 'code' => 'callbacks.fire()'
                               },
                       'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo:" + value );
};

var callbacks = $.Callbacks();

// Add the function "foo" to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "hello" ); // Outputs: "foo: hello"
callbacks.fire( "world" ); // Outputs: "foo: world"

// Add another function to the list
var bar = function( value ){
  console.log( "bar:" + value );
};

// Add this function to the list
callbacks.add( bar );

// Fire the items on the list again
callbacks.fire( "hello again" );
// Outputs:
// "foo: hello again"
// "bar: hello again"
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'This method returns the Callbacks object onto which it is attached (',
                                              ').'
                                            ],
                               'code' => 'this'
                             }
                      },
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.fired.xml ####
Possible keys are: desc return title signature name type example longdesc category
$VAR1 = {
          'desc' => 'Determine if the callbacks have already been called at least once.',
          'return' => 'Boolean',
          'title' => 'callbacks.fired()',
          'signature' => {
                         'added' => '1.7'
                       },
          'name' => 'callbacks.fired',
          'type' => 'method',
          'example' => {
                       'desc' => {
                                 'code' => 'callbacks.fired()',
                                 'content' => [
                                                'Use ',
                                                ' to determine if the callbacks in a list have been called at least once:'
                                              ]
                               },
                       'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo:" + value );
};

var callbacks = $.Callbacks();

// Add the function "foo" to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "hello" ); // Outputs: "foo: hello"
callbacks.fire( "world" ); // Outputs: "foo: world"

// Test to establish if the callbacks have been called
console.log( callbacks.fired() );
'
                     },
          'longdesc' => {},
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.fireWith.xml ####
Possible keys are: signature category type name longdesc example desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.7',
                         'argument' => {
                                       'args' => {
                                                 'desc' => 'An argument, or array of arguments, to pass to the callbacks in the list.',
                                                 'optional' => 'true'
                                               },
                                       'context' => {
                                                    'optional' => 'true',
                                                    'desc' => 'A reference to the context in which the callbacks in the list should be fired.'
                                                  }
                                     }
                       },
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'type' => 'method',
          'name' => 'callbacks.fireWith',
          'longdesc' => {
                        'p' => {
                               'code' => 'this',
                               'content' => [
                                              'This method returns the Callbacks object onto which it is attached (',
                                              ').'
                                            ]
                             }
                      },
          'example' => {
                       'code' => '
// A sample logging function to be added to a callbacks list
var log = function( value1, value2 ) {
  console.log( "Received: " + value1 + "," + value2 );
};

var callbacks = $.Callbacks();

// Add the log method to the callbacks list
callbacks.add( log );

// Fire the callbacks on the list using the context "window"
// and an arguments array

callbacks.fireWith( window, [ "foo","bar" ] );
// Outputs: "Received: foo, bar"
',
                       'desc' => {
                                 'content' => [
                                                'Use ',
                                                ' to fire a list of callbacks with a specific context and an array of arguments:'
                                              ],
                                 'code' => 'callbacks.fireWith()'
                               }
                     },
          'desc' => 'Call all callbacks in a list with the given context and arguments.',
          'return' => 'Callbacks',
          'title' => 'callbacks.fireWith()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.has.xml ####
Possible keys are: desc title return signature example longdesc name type category
$VAR1 = {
          'desc' => 'Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list.',
          'title' => 'callbacks.has()',
          'return' => 'Boolean',
          'signature' => {
                         'argument' => {
                                       'type' => 'Function',
                                       'name' => 'callback',
                                       'optional' => 'true',
                                       'desc' => 'The callback to search for.'
                                     },
                         'added' => '1.7'
                       },
          'example' => {
                       'desc' => {
                                 'code' => 'callbacks.has()',
                                 'content' => [
                                                'Use ',
                                                ' to check if a callback list contains a specific callback:'
                                              ]
                               },
                       'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value1, value2 ) {
  console.log( "Received: " + value1 + "," + value2 );
};

// A second function which will not be added to the list
var bar = function( value1, value2 ) {
  console.log( "foobar" );
};

var callbacks = $.Callbacks();

// Add the log method to the callbacks list
callbacks.add( foo );

// Determine which callbacks are in the list
console.log( callbacks.has( foo ) );
// true
console.log( callbacks.has( bar ) );
// false
'
                     },
          'longdesc' => {},
          'name' => 'callbacks.has',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.lock.xml ####
Possible keys are: name type example longdesc category signature return title desc
$VAR1 = {
          'name' => 'callbacks.lock',
          'type' => 'method',
          'example' => [
                       {
                         'desc' => {
                                   'content' => [
                                                  'Use ',
                                                  ' to lock a callback list to avoid further changes being made to the list state:'
                                                ],
                                   'code' => 'callbacks.lock()'
                                 },
                         'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo:" + value );
};

var callbacks = $.Callbacks();

// Add the logging function to the callback list
callbacks.add( foo );

// Fire the items on the list, passing an argument
callbacks.fire( "hello" );
// Outputs "foo: hello"

// Lock the callbacks list
callbacks.lock();

// Try firing the items again
callbacks.fire( "world" );

// As the list was locked, no items were called,
// so "world" isn\'t logged
'
                       },
                       {
                         'html' => '
<div id="log"></div>
',
                         'desc' => {
                                   'content' => [
                                                  'Use ',
                                                  ' to lock a callback list with "memory," and then resume using the list:'
                                                ],
                                   'code' => 'callbacks.lock()'
                                 },
                         'code' => '
// Simple function for logging results
var log = function( value ) {
  $( "#log" ).append( "<p>" + value + "</p>" );
};

// Two sample functions to be added to a callbacks list
var foo = function( value ) {
  log( "foo: " + value );
};
var bar = function( value ) {
  log( "bar: " + value );
};

// Create the callbacks object with the "memory" flag
var callbacks = $.Callbacks( "memory" );

// Add the foo logging function to the callback list
callbacks.add( foo );

// Fire the items on the list, passing an argument
callbacks.fire( "hello" );
// Outputs "foo: hello"

// Lock the callbacks list
callbacks.lock();

// Try firing the items again
callbacks.fire( "world" );
// As the list was locked, no items were called,
// so "foo: world" isn\'t logged

// Add the foo function to the callback list again
callbacks.add( foo );

// Try firing the items again
callbacks.fire( "silentArgument" );
// Outputs "foo: hello" because the argument value was stored in memory

// Add the bar function to the callback list
callbacks.add( bar );

callbacks.fire( "youHadMeAtHello" );
// Outputs "bar: hello" because the list is still locked,
// and the argument value is still stored in memory
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'This method returns the Callbacks object onto which it is attached (',
                                                ').'
                                              ],
                                 'code' => 'this'
                               },
                               {
                                 'code' => '"memory"',
                                 'content' => [
                                                'If the Callbacks object is created with the ',
                                                ' flag as its argument, additional functions may be added and fired after the callback list is locked.'
                                              ]
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'signature' => {
                         'added' => '1.7'
                       },
          'return' => 'Callbacks',
          'title' => 'callbacks.lock()',
          'desc' => 'Lock a callback list in its current state.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.locked.xml ####
Possible keys are: category type name longdesc example signature return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'type' => 'method',
          'name' => 'callbacks.locked',
          'longdesc' => {},
          'example' => {
                       'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo: " + value );
};

var callbacks = $.Callbacks();

// Add the logging function to the callback list
callbacks.add( foo );

// Fire the items on the list, passing an argument
callbacks.fire( "hello" );
// Outputs "foo: hello"

// Lock the callbacks list
callbacks.lock();

// Test the lock-state of the list
console.log ( callbacks.locked() );
// true
',
                       'desc' => {
                                 'content' => [
                                                'Use ',
                                                ' to determine the lock-state of a callback list:'
                                              ],
                                 'code' => 'callbacks.locked()'
                               }
                     },
          'signature' => {
                         'added' => '1.7'
                       },
          'return' => 'Boolean',
          'title' => 'callbacks.locked()',
          'desc' => 'Determine if the callbacks list has been locked.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/callbacks.remove.xml ####
Possible keys are: category example longdesc name type signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'example' => {
                       'code' => '
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo: " + value );
};

var callbacks = $.Callbacks();

// Add the function "foo" to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "hello" );
// Outputs: "foo: hello"

// Remove "foo" from the callback list
callbacks.remove( foo );

// Fire the items on the list again
callbacks.fire( "world" );

// Nothing output as "foo" is no longer in the list
',
                       'desc' => {
                                 'content' => [
                                                'Use ',
                                                ' to remove callbacks from a callback list:'
                                              ],
                                 'code' => 'callbacks.remove()'
                               }
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'This method returns the Callbacks object onto which it is attached (',
                                              ').'
                                            ],
                               'code' => 'this'
                             }
                      },
          'name' => 'callbacks.remove',
          'type' => 'method',
          'signature' => {
                         'added' => '1.7',
                         'argument' => {
                                       'type' => {
                                                 'Function' => {},
                                                 'Array' => {}
                                               },
                                       'name' => 'callbacks',
                                       'desc' => 'A function, or array of functions, that are to be removed from the callback list.'
                                     }
                       },
          'title' => 'callbacks.remove()',
          'return' => 'Callbacks',
          'desc' => 'Remove a callback or a collection of callbacks from a callback list.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/change.xml ####
Possible keys are: signature category longdesc example name type note desc title return
$VAR1 = {
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       }
                         },
                         {
                           'argument' => {
                                         'handler' => {
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'type' => 'Function',
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    },
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'optional' => 'true',
                                                        'type' => 'Anything'
                                                      }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'events/form-events'
                        },
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'longdesc' => {
                        'div' => {
                                 'p' => {
                                        'strong' => 'Note: ',
                                        'content' => [
                                                       'Changing the value of an input element using JavaScript, using ',
                                                       ' for example, won\'t fire the event.'
                                                     ],
                                        'a' => {
                                               'code' => '.val()',
                                               'href' => '/val'
                                             }
                                      },
                                 'class' => 'warning'
                               },
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "change", handler )',
                                           '.trigger( "change" )'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'change',
                                           '<input>',
                                           '<textarea>',
                                           '<select>'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when its value changes. This event is limited to ',
                                                ' elements, ',
                                                ' boxes and ',
                                                ' elements. For select boxes, checkboxes, and radio buttons, the event is fired immediately when the user makes a selection with the mouse, but for the other element types the event is deferred until the element loses focus.'
                                              ]
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to the text input and the select box:',
                               {
                                 'content' => [
                                                'Now when the second option is selected from the dropdown, the alert is displayed. It is also displayed if you change the text in the field and then click away. If the field loses focus without the contents having changed, though, the event is not triggered. To trigger the event manually, apply ',
                                                ' without arguments:'
                                              ],
                                 'code' => '.change()'
                               },
                               {
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also alert the message. The message will display twice, because the handler has been bound to the ',
                                                ' event on both of the form elements.'
                                              ],
                                 'code' => 'change',
                                 'samp' => 'Trigger the handler'
                               },
                               {
                                 'code' => 'change',
                                 'content' => [
                                                'As of jQuery 1.4, the ',
                                                ' event bubbles in Internet Explorer, behaving consistently with the event in other modern browsers.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<form>
  <input class="target" type="text" value="Field 1">
  <select class="target">
    <option value="option1" selected="selected">Option 1</option>
    <option value="option2">Option 2</option>
  </select>
</form>
<div id="other">
  Trigger the handler
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".target" ).change(function() {
  alert( "Handler for .change() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( ".target" ).change();
});
    '
                                 }
                               ]
                      },
          'example' => [
                       {
                         'code' => '
$( "select" )
  .change(function () {
    var str = "";
    $( "select option:selected" ).each(function() {
      str += $( this ).text() + " ";
    });
    $( "div" ).text( str );
  })
  .change();
',
                         'css' => '
  div {
    color: red;
  }
',
                         'html' => '
<select name="sweets" multiple="multiple">
  <option>Chocolate</option>
  <option selected="selected">Candy</option>
  <option>Taffy</option>
  <option selected="selected">Caramel</option>
  <option>Fudge</option>
  <option>Cookie</option>
</select>
<div></div>
',
                         'desc' => 'Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.'
                       },
                       {
                         'code' => '
$( "input[type=\'text\']" ).change(function() {
  // Check input( $( this ).val() ) for validity here
});
',
                         'desc' => 'To add a validity test to all text input elements:'
                       }
                     ],
          'name' => 'change',
          'type' => 'method',
          'note' => {
                    'data-event' => 'change',
                    'id' => 'detach-shorthand',
                    'type' => 'additional'
                  },
          'desc' => 'Bind an event handler to the "change" JavaScript event, or trigger that event on an element.',
          'title' => '.change()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/checkbox-selector.xml ####
Possible keys are: desc note sample return title signature category name type example longdesc
$VAR1 = {
          'desc' => 'Selects all elements of type checkbox.',
          'note' => {
                    'data-alt' => '[type="checkbox"]',
                    'data-selector' => ':checkbox',
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension-alt'
                  },
          'sample' => ':checkbox',
          'return' => '',
          'title' => ':checkbox Selector',
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'checkbox',
          'type' => 'selector',
          'example' => {
                       'css' => '
  textarea {
    height: 25px;
  }
',
                       'html' => '
<form>
  <input type="button" value="Input Button">
  <input type="checkbox">

  <input type="checkbox">
  <input type="file">
  <input type="hidden">

  <input type="image">
  <input type="password">
  <input type="radio">

  <input type="reset">
  <input type="submit">
  <input type="text">

  <select>
    <option>Option</option>
  </select>

  <textarea></textarea>
  <button>Button</button>
</form>

<div></div>
',
                       'desc' => 'Finds all checkbox inputs.',
                       'code' => '
var input = $( "form input:checkbox" )
  .wrap( "<span></span>" )
  .parent()
  .css({
    background: "yellow",
    border: "3px red solid"
  });

$( "div" )
  .text( "For this type jQuery found " + input.length + "." )
  .css( "color", "red" );

// Prevent the form from submitting
$( "form" ).submit(function( event ) {
    event.preventDefault();
});
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              ' is equivalent to ',
                                              '. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare ',
                                              ' is equivalent to ',
                                              ', so ',
                                              ' should be used instead. '
                                            ],
                               'code' => [
                                         '$( ":checkbox" )',
                                         '$( "[type=checkbox]" )',
                                         '$(\':checkbox\')',
                                         '$( "*:checkbox" )',
                                         '$( "input:checkbox" )'
                                       ]
                             }
                      }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/checked-selector.xml ####
Possible keys are: example longdesc name type category signature title sample return desc
$VAR1 = {
          'example' => [
                       {
                         'css' => '
  div {
    color: red;
  }
',
                         'desc' => 'Determine how many input elements are checked.',
                         'html' => '
<form>
  <p>
    <input type="checkbox" name="newsletter" value="Hourly" checked="checked">

    <input type="checkbox" name="newsletter" value="Daily">
    <input type="checkbox" name="newsletter" value="Weekly">

    <input type="checkbox" name="newsletter" value="Monthly" checked>
    <input type="checkbox" name="newsletter" value="Yearly">
  </p>
</form>
<div></div>
',
                         'code' => '
var countChecked = function() {
  var n = $( "input:checked" ).length;
  $( "div" ).text( n + (n === 1 ? " is" : " are") + " checked!" );
};
countChecked();

$( "input[type=checkbox]" ).on( "click", countChecked );
'
                       },
                       {
                         'code' => '
$( "input" ).on( "click", function() {
  $( "#log" ).html( $( "input:checked" ).val() + " is checked!" );
});
',
                         'desc' => 'Identify the checked radio input.',
                         'html' => '
<form>
  <div>
    <input type="radio" name="fruit" value="orange" id="orange">
    <label for="orange">orange</label>
  </div>
  <div>
    <input type="radio" name="fruit" value="apple" id="apple">
    <label for="apple">apple</label>
  </div>
  <div>
    <input type="radio" name="fruit" value="banana" id="banana">
    <label for="banana">banana</label>
  </div>
  <div id="log"></div>
</form>
',
                         'css' => '
  input, label {
    line-height: 1.5em;
  }
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           ':checked',
                                           'select'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' selector works for checkboxes, radio buttons, and options of ',
                                                ' elements.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => '/selected-selector/',
                                        'code' => ':selected'
                                      },
                                 'content' => [
                                                'To retrieve only the selected options of ',
                                                ' elements, use the ',
                                                ' selector.'
                                              ],
                                 'code' => 'select'
                               }
                             ]
                      },
          'name' => 'checked',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0'
                       },
          'title' => ':checked Selector',
          'sample' => ':checked',
          'return' => '',
          'desc' => 'Matches all elements that are checked or selected.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/child-selector.xml ####
Possible keys are: category type name longdesc example signature sample return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/hierarchy-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'selector',
          'name' => 'child',
          'longdesc' => {
                        'p' => {
                               'strong' => '>',
                               'content' => [
                                              'The child combinator (E ',
                                              ' F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.'
                                            ]
                             }
                      },
          'example' => {
                       'code' => '
$( "ul.topnav > li" ).css( "border", "3px double red" );
',
                       'desc' => 'Places a border around all list items that are children of <ul class="topnav"> .',
                       'html' => '
<ul class="topnav">
  <li>Item 1</li>
  <li>Item 2
    <ul>
    <li>Nested item 1</li>
    <li>Nested item 2</li>
    <li>Nested item 3</li>
    </ul>
  </li>
  <li>Item 3</li>
</ul>
',
                       'css' => '
  body {
    font-size: 14px;
  }
  '
                     },
          'signature' => {
                         'argument' => {
                                       'child' => {
                                                  'type' => 'Selector',
                                                  'desc' => 'A selector to filter the child elements.'
                                                },
                                       'parent' => {
                                                   'desc' => 'Any valid selector.',
                                                   'type' => 'Selector'
                                                 }
                                     },
                         'added' => '1.0'
                       },
          'sample' => 'parent > child',
          'return' => '',
          'title' => 'Child Selector ("parent > child")',
          'desc' => 'Selects all direct child elements specified by "child" of elements specified by "parent".'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/children.xml ####
Possible keys are: signature longdesc example name type category desc title return
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'name' => 'selector',
                                       'type' => 'Selector',
                                       'optional' => 'true',
                                       'desc' => 'A string containing a selector expression to match elements against.'
                                     },
                         'added' => '1.0'
                       },
          'longdesc' => {
                        'p' => [
                               {
                                 'em' => 'all',
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method allows us to search through the children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The ',
                                                ' method differs from ',
                                                ' in that ',
                                                ' only travels a single level down the DOM tree while ',
                                                ' can traverse down multiple levels to select descendant elements (grandchildren, etc.) as well. Note also that like most jQuery methods, ',
                                                ' does not return text nodes; to get ',
                                                ' children including text and comment nodes, use ',
                                                '.'
                                              ],
                                 'code' => [
                                           '.children()',
                                           '.children()',
                                           {
                                             'a' => {
                                                    'content' => '.find()',
                                                    'href' => '/find/'
                                                  }
                                           },
                                           '.children()',
                                           '.find()',
                                           '.children()',
                                           {
                                             'a' => {
                                                    'content' => '.contents()',
                                                    'href' => '/contents/'
                                                  }
                                           }
                                         ]
                               },
                               {
                                 'code' => [
                                           '.children()',
                                           '$()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method optionally accepts a selector expression of the same type that we can pass to the ',
                                                ' function. If the selector is supplied, the elements will be filtered by testing whether they match it.'
                                              ]
                               },
                               'Consider a page with a basic nested list on it:',
                               'If we begin at the level-2 list, we can find its children:',
                               'The result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included.'
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<ul class="level-1">
  <li class="item-i">I</li>
  <li class="item-ii">II
    <ul class="level-2">
      <li class="item-a">A</li>
      <li class="item-b">B
        <ul class="level-3">
          <li class="item-1">1</li>
          <li class="item-2">2</li>
          <li class="item-3">3</li>
        </ul>
      </li>
      <li class="item-c">C</li>
    </ul>
  </li>
  <li class="item-iii">III</li>
</ul>
'
                                 },
                                 {
                                   'code' => '$( "ul.level-2" ).children().css( "background-color", "red" );'
                                 }
                               ]
                      },
          'example' => [
                       {
                         'code' => '
$( "#container" ).click(function ( event ) {
  $( "*" ).removeClass( "hilite" );
  var kids = $( event.target ).children();
  var len = kids.addClass( "hilite" ).length;

  $( "#results span:first" ).text( len );
  $( "#results span:last" ).text( event.target.tagName );

  event.preventDefault();
});
',
                         'css' => '
  body {
    font-size: 16px;
    font-weight: bolder;
  }
  div {
    width: 130px;
    height: 82px;
    margin: 10px;
    float: left;
    border: 1px solid blue;
    padding: 4px;
  }
  #container {
    width: auto;
    height: 105px;
    margin: 0;
    float: none;
    border: none;
  }
  .hilite {
    border-color: red;
  }
  #results {
    display: block;
    color: red;
  }
  p, span, em, a, b, button {
    border: 1px solid transparent;
  }
  p {
    margin: 10px;
  }
  span {
    color: blue;
  }
  input {
    width: 100px;
  }
',
                         'desc' => 'Find all children of the clicked element.',
                         'html' => '
<div id="container">
  <div>
    <p>This <span>is the <em>way</em> we</span>
      write <em>the</em> demo,</p>
  </div>

  <div>
    <a href="#"><b>w</b>rit<b>e</b></a> the <span>demo,</span> <button>write
    the</button> demo,
  </div>

  <div>
    This <span>the way we <em>write</em> the <em>demo</em> so</span>
    <input type="text" value="early"> in
  </div>

  <p>
    <span>t</span>he <span>m</span>orning.
    <span id="results">Found <span>0</span> children in <span>TAG</span>.</span>
  </p>
</div>
'
                       },
                       {
                         'code' => '
$( "div" ).children().css( "border-bottom", "3px double red" );
',
                         'desc' => 'Find all children of each div.',
                         'html' => '
<p>Hello (this is a paragraph)</p>

<div><span>Hello Again (this span is a child of the a div)</span></div>
<p>And <span>Again</span> (in another paragraph)</p>

<div>And One Last <span>Time</span> (most text directly in a div)</div>
',
                         'css' => '
  body {
    font-size: 16px;
    font-weight: bolder;
  }
  span {
    color: blue;
  }
  p {
    margin: 5px 0;
  }
'
                       },
                       {
                         'code' => '
$( "div" ).children( ".selected" ).css( "color", "blue" );
',
                         'desc' => 'Find all children with a class "selected" of each div.',
                         'html' => '
<div>
  <span>Hello</span>
  <p class="selected">Hello Again</p>
  <div class="selected">And Again</div>
  <p>And One Last Time</p>
</div>
',
                         'css' => '
  body {
    font-size: 16px;
    font-weight: bolder;
  }
  p {
    margin: 5px 0;
  }
'
                       }
                     ],
          'name' => 'children',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'desc' => 'Get the children of each element in the set of matched elements, optionally filtered by a selector.',
          'title' => '.children()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/class-selector.xml ####
Possible keys are: signature category example longdesc type name desc title sample return
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'desc' => 'A class to search for. An element can have multiple classes; only one of them must match.',
                                       'type' => 'String',
                                       'name' => 'class'
                                     },
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/basic-css-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => [
                       {
                         'code' => '
$( ".myClass" ).css( "border", "3px solid red" );
',
                         'css' => '
  div, span {
    width: 120px;
    height: 40px;
    float: left;
    padding: 10px;
    margin: 10px;
    background-color: #EEEEEE;
  }
',
                         'desc' => 'Finds the element with the class "myClass".',
                         'html' => '
<div class="notMe">div class="notMe"</div>
<div class="myClass">div class="myClass"</div>
<span class="myClass">span class="myClass"</span>
'
                       },
                       {
                         'code' => '
$( ".myclass.otherclass" ).css( "border", "13px solid red" );
',
                         'css' => '
  div, span {
    width: 120px;
    height: 40px;
    float: left;
    padding: 10px;
    margin: 10px;
    background-color: #EEEEEE;
  }
',
                         'html' => '
<div class="myclass">div class="notMe"</div>
<div class="myclass otherclass">div class="myClass"</div>
<span class="myclass otherclass">span class="myClass"</span>
',
                         'desc' => 'Finds the element with both "myclass" and "otherclass" classes.'
                       }
                     ],
          'longdesc' => {
                        'p' => {
                               'code' => 'getElementsByClassName()',
                               'content' => [
                                              'For class selectors, jQuery uses JavaScript\'s native ',
                                              ' function if the browser supports it.'
                                            ]
                             }
                      },
          'type' => 'selector',
          'name' => 'class',
          'desc' => 'Selects all elements with the given class. ',
          'title' => 'Class Selector (".class")',
          'sample' => '.class',
          'return' => ''
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/clearQueue.xml ####
Possible keys are: return title desc type name example longdesc category signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.clearQueue()',
          'desc' => 'Remove from the queue all items that have not yet been run.',
          'type' => 'method',
          'name' => 'clearQueue',
          'example' => {
                       'code' => '
$( "#start" ).click(function() {
  var myDiv = $( "div" );
  myDiv.show( "slow" );
  myDiv.animate({
    left:"+=200"
  }, 5000 );

  myDiv.queue(function() {
    var that = $( this );
    that.addClass( "newcolor" );
    that.dequeue();
  });

  myDiv.animate({
    left:"-=200"
  }, 1500 );
  myDiv.queue(function() {
    var that = $( this );
    that.removeClass( "newcolor" );
    that.dequeue();
  });
  myDiv.slideUp();
});

$( "#stop" ).click(function() {
  var myDiv = $( "div" );
  myDiv.clearQueue();
  myDiv.stop();
});
',
                       'desc' => 'Empty the queue.',
                       'html' => '
<button id="start">Start</button>
<button id="stop">Stop</button>
<div></div>
',
                       'css' => '
  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }
'
                     },
          'longdesc' => {
                        'p' => {
                               'code' => [
                                         '.clearQueue()',
                                         '.clearQueue()',
                                         'fx',
                                         '.stop(true)',
                                         '.stop()',
                                         '.clearQueue()',
                                         '.queue()'
                                       ],
                               'content' => [
                                              'When the ',
                                              ' method is called, all functions on the queue that have not been executed are removed from the queue. When used without an argument, ',
                                              ' removes the remaining functions from ',
                                              ', the standard effects queue. In this way it is similar to ',
                                              '. However,  while the ',
                                              ' method is meant to be used only with animations, ',
                                              ' can also be used to remove any function that has been added to a generic jQuery queue with the ',
                                              ' method. '
                                            ]
                             }
                      },
          'category' => [
                        {
                          'slug' => 'effects/custom-effects'
                        },
                        {
                          'slug' => 'data'
                        },
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'desc' => {
                                                 'content' => [
                                                                'A string containing the name of the queue. Defaults to ',
                                                                ', the standard effects queue.'
                                                              ],
                                                 'code' => 'fx'
                                               },
                                       'type' => 'String',
                                       'name' => 'queueName',
                                       'optional' => 'true'
                                     },
                         'added' => '1.4'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/click.xml ####
Possible keys are: desc note return title signature name type longdesc example category
$VAR1 = {
          'desc' => 'Bind an event handler to the "click" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'data-event' => 'click',
                    'id' => 'detach-shorthand',
                    'type' => 'additional'
                  },
          'return' => 'jQuery',
          'title' => '.click()',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       }
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'handler' => {
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    },
                                         'eventData' => {
                                                        'type' => 'Anything',
                                                        'optional' => 'true',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'name' => 'click',
          'type' => 'method',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div id="target">
  Click here
</div>
<div id="other">
  Trigger the handler
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).click(function() {
  alert( "Handler for .click() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).click();
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "click", handler )',
                                           '.trigger( "click" )',
                                           'click'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.
    The ',
                                                ' event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event.
    For example, consider the HTML:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The event handler can be bound to any ',
                                                ':'
                                              ],
                                 'code' => '<div>'
                               },
                               'Now if we click on this element, the alert is displayed:',
                               {
                                 'samp' => 'Handler for .click() called.'
                               },
                               'We can also trigger the event when a different element is clicked:',
                               {
                                 'content' => [
                                                'After this code executes, clicking on ',
                                                ' will also alert the message.'
                                              ],
                                 'samp' => 'Trigger the handler'
                               },
                               {
                                 'code' => 'click',
                                 'content' => [
                                                'The ',
                                                ' event is only triggered after this exact series of events:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'This is usually the desired sequence before taking an action. If this is not required, the ',
                                                ' or ',
                                                ' event may be more suitable.'
                                              ],
                                 'code' => [
                                           'mousedown',
                                           'mouseup'
                                         ]
                               }
                             ],
                        'ul' => {
                                'li' => [
                                        'The mouse button is depressed while the pointer is inside the element.',
                                        'The mouse button is released while the pointer is inside the element.'
                                      ]
                              },
                        'figure' => {
                                    'figcaption' => 'Figure 1 - Illustration of the rendered HTML',
                                    'img' => {
                                             'src' => '/resources/0042_05_03.png',
                                             'alt' => ''
                                           }
                                  }
                      },
          'example' => [
                       {
                         'code' => '
$( "p" ).click(function() {
  $( this ).slideUp();
});
',
                         'css' => '
  p {
    color: red;
    margin: 5px;
    cursor: pointer;
  }
  p:hover {
    background: yellow;
  }
',
                         'html' => '
<p>First Paragraph</p>
<p>Second Paragraph</p>
<p>Yet one more Paragraph</p>
',
                         'desc' => 'Hide paragraphs on a page when they are clicked:'
                       },
                       {
                         'desc' => 'Trigger the click event on all of the paragraphs on the page:',
                         'code' => '
$( "p" ).click();
'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/clone.xml ####
Possible keys are: category longdesc example type name signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'manipulation/copying'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'longdesc' => {
                        'div' => [
                                 {
                                   'class' => 'warning',
                                   'p' => {
                                          'content' => [
                                                         ' For performance reasons, the dynamic state of certain form elements (e.g., user data typed into ',
                                                         ' and user selections made to a ',
                                                         ') is not copied to the cloned elements. When cloning ',
                                                         ' elements, the dynamic state of the element (e.g., user data typed into text inputs and user selections made to a checkbox) is retained in the cloned elements.'
                                                       ],
                                          'strong' => 'Note:',
                                          'code' => [
                                                    'textarea',
                                                    'select',
                                                    'input'
                                                  ]
                                        }
                                 },
                                 {
                                   'p' => {
                                          'code' => '.clone()',
                                          'strong' => 'Note:',
                                          'content' => [
                                                         ' When using the ',
                                                         ' method, you can modify the cloned elements or their contents before (re-)inserting them into the document.'
                                                       ]
                                        },
                                   'class' => 'warning'
                                 },
                                 {
                                   'p' => {
                                          'strong' => 'Note:',
                                          'content' => [
                                                         ' Using ',
                                                         ' has the side-effect of producing elements with duplicate ',
                                                         ' attributes, which are supposed to be unique. Where possible, it is recommended to avoid cloning elements with this attribute or using ',
                                                         ' attributes as identifiers instead.'
                                                       ],
                                          'code' => [
                                                    '.clone()',
                                                    'id',
                                                    'class'
                                                  ]
                                        },
                                   'class' => 'warning'
                                 }
                               ],
                        'p' => [
                               {
                                 'em' => 'deep',
                                 'code' => '.clone()',
                                 'content' => [
                                                'The ',
                                                ' method performs a ',
                                                ' copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'When used in conjunction with one of the insertion methods, ',
                                                ' is a convenient way to duplicate elements on a page. Consider the following HTML:'
                                              ],
                                 'code' => '.clone()'
                               },
                               {
                                 'content' => [
                                                'As shown in the discussion for ',
                                                ',  normally when an element is inserted somewhere in the DOM, it is moved from its old location. So, given the code:'
                                              ],
                                 'code' => {
                                           'a' => {
                                                  'href' => '/append/',
                                                  'content' => '.append()'
                                                }
                                         }
                               },
                               'The resulting DOM structure would be:',
                               'To prevent this and instead create a copy of the element, you could write the following:',
                               'This would produce:',
                               {
                                 'em' => 'not',
                                 'code' => [
                                           'withDataAndEvents',
                                           '.data()'
                                         ],
                                 'content' => [
                                                'Normally, any event handlers bound to the original element are ',
                                                ' copied to the clone. The optional ',
                                                ' parameter allows us to change this behavior, and to instead make copies of all of the event handlers as well, bound to the new copy of the element. As of jQuery 1.4, all element data (attached by the ',
                                                ' method) is also copied to the new copy. '
                                              ]
                               },
                               'However, objects and arrays within element data are not copied and will continue to be shared between the cloned element and the original element. To deep copy all data, copy each one manually:',
                               {
                                 'content' => [
                                                'As of jQuery 1.5, ',
                                                ' can be optionally enhanced with ',
                                                ' to copy the events and data for all children of the cloned element.'
                                              ],
                                 'code' => [
                                           'withDataAndEvents',
                                           'deepWithDataAndEvents '
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <div class="hello">Hello</div>
  <div class="goodbye">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".hello" ).appendTo( ".goodbye" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="goodbye">
    Goodbye
    <div class="hello">Hello</div>
  </div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".hello" ).clone().appendTo( ".goodbye" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="hello">Hello</div>
  <div class="goodbye">
    Goodbye
    <div class="hello">Hello</div>
  </div>
</div>
    '
                                 },
                                 {
                                   'code' => '
// Original element with attached data
var $elem = $( "#elem" ).data( "arr": [ 1 ] ),
    $clone = $elem.clone( true )
      // Deep copy to prevent data sharing
      .data( "arr", $.extend( [], $elem.data( "arr" ) ) );
    '
                                 }
                               ]
                      },
          'example' => {
                       'code' => '
$( "b" ).clone().prependTo( "p" );
',
                       'desc' => 'Clones all b elements (and selects the clones) and prepends them to all paragraphs.',
                       'html' => '
<b>Hello</b><p>, how are you?</p>
'
                     },
          'type' => 'method',
          'name' => 'clone',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'optional' => 'true',
                                         'name' => 'withDataAndEvents',
                                         'type' => 'Boolean',
                                         'desc' => 'A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well.',
                                         'default' => 'false'
                                       }
                         },
                         {
                           'added' => '1.5',
                           'argument' => {
                                         'deepWithDataAndEvents' => {
                                                                    'desc' => {
                                                                              'content' => [
                                                                                             'A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument\'s value (which defaults to ',
                                                                                             ').'
                                                                                           ],
                                                                              'code' => 'false'
                                                                            },
                                                                    'default' => 'value of withDataAndEvents',
                                                                    'optional' => 'true',
                                                                    'type' => 'Boolean'
                                                                  },
                                         'withDataAndEvents' => {
                                                                'default' => 'false',
                                                                'desc' => {
                                                                          'code' => 'false',
                                                                          'content' => [
                                                                                         'A Boolean indicating whether event handlers and data should be copied along with the elements. The default value is ',
                                                                                         '. '
                                                                                       ],
                                                                          'em' => {
                                                                                  'code' => [
                                                                                            'true',
                                                                                            'false'
                                                                                          ],
                                                                                  'content' => [
                                                                                                 '*In jQuery 1.5.0 the default value was incorrectly ',
                                                                                                 '; it was changed back to ',
                                                                                                 ' in 1.5.1 and up.'
                                                                                               ]
                                                                                }
                                                                        },
                                                                'type' => 'Boolean',
                                                                'optional' => 'true'
                                                              }
                                       }
                         }
                       ],
          'title' => '.clone()',
          'return' => 'jQuery',
          'desc' => 'Create a deep copy of the set of matched elements.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/closest.xml ####
Possible keys are: entry
$VAR1 = {
          'entry' => {
                     'closest' => {
                                  'desc' => 'Get an array of all the elements and selectors matched against the current element up through the DOM tree.',
                                  'removed' => '1.8',
                                  'return' => 'Array',
                                  'deprecated' => '1.7',
                                  'signature' => {
                                                 'added' => '1.4',
                                                 'argument' => {
                                                               'selectors' => {
                                                                              'type' => 'Array',
                                                                              'desc' => 'An array or string containing a selector expression to match elements against (can also be a jQuery object).'
                                                                            },
                                                               'context' => {
                                                                            'desc' => 'A DOM element within which a matching element may be found.',
                                                                            'type' => 'Element',
                                                                            'optional' => 'true'
                                                                          }
                                                             }
                                               },
                                  'category' => [
                                                {
                                                  'slug' => 'traversing/tree-traversal'
                                                },
                                                {
                                                  'slug' => 'version/1.3'
                                                },
                                                {
                                                  'slug' => 'version/1.4'
                                                },
                                                {
                                                  'slug' => 'version/1.6'
                                                }
                                              ],
                                  'type' => 'method',
                                  'longdesc' => {
                                                'div' => {
                                                         'strong' => {
                                                                     'content' => [
                                                                                    'This signature (only!) is deprecated as of jQuery 1.7 and ',
                                                                                    ' in jQuery 1.8'
                                                                                  ],
                                                                     'em' => 'removed'
                                                                   },
                                                         'content' => '. It was primarily meant to be used internally or by plugin authors.',
                                                         'class' => 'warning'
                                                       }
                                              }
                                }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/contains-selector.xml ####
Possible keys are: signature category longdesc example name type desc title sample return
$VAR1 = {
          'signature' => {
                         'added' => '1.1.4',
                         'argument' => {
                                       'name' => 'text',
                                       'type' => 'String',
                                       'desc' => 'A string of text to look for. It\'s case sensitive.'
                                     }
                       },
          'category' => [
                        {
                          'slug' => 'selectors/content-filter-selector'
                        },
                        {
                          'slug' => 'version/1.1.4'
                        }
                      ],
          'longdesc' => {
                        'p' => {
                               'code' => ':contains()',
                               'content' => [
                                              'The matching text can appear directly within the selected element, in any of that element\'s descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of ',
                                              ' can be written as a bare word or surrounded by quotation marks. The text must have matching case to be selected.'
                                            ]
                             }
                      },
          'example' => {
                       'code' => '
$( "div:contains(\'John\')" ).css( "text-decoration", "underline" );
',
                       'desc' => 'Finds all divs containing "John" and underlines them.',
                       'html' => '
<div>John Resig</div>
<div>George Martin</div>
<div>Malcom John Sinclair</div>
<div>J. Ohn</div>
'
                     },
          'name' => 'contains',
          'type' => 'selector',
          'desc' => 'Select all elements that contain the specified text.',
          'title' => ':contains() Selector',
          'sample' => ':contains(text)',
          'return' => ''
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/contents.xml ####
Possible keys are: signature category type name example longdesc desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.2'
                       },
          'category' => [
                        {
                          'slug' => 'traversing/miscellaneous-traversal'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'type' => 'method',
          'name' => 'contents',
          'example' => [
                       {
                         'code' => '
$( "p" )
  .contents()
  .filter(function(){
    return this.nodeType !== 1;
  })
  .wrap( "<b></b>" );
',
                         'desc' => 'Find all the text nodes inside a paragraph and wrap them with a bold tag.',
                         'html' => '
<p>Hello <a href="http://ejohn.org/">John</a>, how are you doing?</p>
'
                       },
                       {
                         'html' => '
<iframe src="//api.jquery.com/" width="80%" height="600" id="frameDemo"></iframe>
',
                         'desc' => 'Change the background color of links inside of an iframe.',
                         'code' => '
$( "#frameDemo" ).contents().find( "a" ).css( "background-color", "#BADA55" );
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.contents()',
                                           '.contents()',
                                           '.children()'
                                         ],
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The ',
                                                ' and ',
                                                ' methods are similar, except that the former includes text nodes and comment nodes as well as HTML elements in the resulting jQuery object. Please note that most jQuery operations don\'t support text nodes and comment nodes. The few that do will have an explicit note on their API documentation page.'
                                              ]
                               },
                               {
                                 'code' => '.contents()',
                                 'content' => [
                                                'The ',
                                                ' method can also be used to get the content document of an iframe, if the iframe is on the same domain as the main page.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '<div>',
                                           '<br>'
                                         ],
                                 'content' => [
                                                'Consider a simple ',
                                                ' with a number of text nodes, each of which is separated by two line break elements (',
                                                '):'
                                              ]
                               },
                               {
                                 'content' => [
                                                'We can employ the ',
                                                ' method to help convert this blob of text into three well-formed paragraphs:'
                                              ],
                                 'code' => '.contents()'
                               },
                               {
                                 'a' => {
                                        'href' => 'https://developer.mozilla.org/docs/en/DOM/Node.nodeType',
                                        'code' => '.nodeType',
                                        'content' => ' property'
                                      },
                                 'code' => [
                                           '<div class="container">',
                                           '<br />'
                                         ],
                                 'content' => [
                                                'This code first retrieves the contents  of ',
                                                ' and then filters it for text nodes, which are wrapped in paragraph tags. This is accomplished by testing the ',
                                                ' of the element. This DOM property holds a numeric code indicating the node\'s type; text nodes use the code 3. The contents are again filtered, this time for ',
                                                ' elements, and these elements are removed.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed
  do eiusmod tempor incididunt ut labore et dolore magna aliqua.
  <br><br>
  Ut enim ad minim veniam, quis nostrud exercitation ullamco
  laboris nisi ut aliquip ex ea commodo consequat.
  <br><br>
  Duis aute irure dolor in reprehenderit in voluptate velit
  esse cillum dolore eu fugiat nulla pariatur.
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".container" )
  .contents()
    .filter(function() {
      return this.nodeType === 3;
    })
      .wrap( "<p></p>" )
      .end()
    .filter( "br" )
    .remove();
    '
                                 }
                               ]
                      },
          'desc' => 'Get the children of each element in the set of matched elements, including text and comment nodes.',
          'return' => 'jQuery',
          'title' => '.contents()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/context.xml ####
Possible keys are: category example longdesc name type deprecated signature title return desc removed
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'internals'
                        },
                        {
                          'slug' => 'properties/jquery-object-instance-properties'
                        },
                        {
                          'slug' => 'version/1.3'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.10'
                        }
                      ],
          'example' => {
                       'code' => '
$( "ul" )
  .append( "<li>" + $( "ul" ).context + "</li>" )
  .append( "<li>" + $( "ul", document.body ).context.nodeName + "</li>" );
',
                       'html' => '
Context: <ul></ul>
',
                       'desc' => 'Determine the exact context used.'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.context',
                                           '.live()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' property was deprecated in jQuery 1.10 and is only maintained to the extent needed for supporting ',
                                                ' in the jQuery Migrate plugin. It may be removed without notice in a future version.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' method for binding event handlers uses this property to determine the root element to use for its event delegation needs.'
                                              ],
                                 'code' => '.live()'
                               },
                               {
                                 'content' => [
                                                'The value of this property is typically equal to ',
                                                ', as this is the default context for jQuery objects if none is supplied. The context may differ if, for example, the object was created by searching within an ',
                                                ' or XML document.'
                                              ],
                                 'code' => [
                                           'document',
                                           '<iframe>'
                                         ]
                               },
                               {
                                 'code' => [
                                           'jQuery()',
                                           '.add()'
                                         ],
                                 'content' => [
                                                'Note that the context property may only apply to the elements originally selected by ',
                                                ', as it is possible for the user to add elements to the collection via methods such as ',
                                                ' and these may have a different context.'
                                              ]
                               }
                             ]
                      },
          'name' => 'context',
          'type' => 'property',
          'deprecated' => '1.10',
          'signature' => {
                         'added' => '1.3'
                       },
          'title' => '.context',
          'return' => 'Element',
          'desc' => {
                    'content' => [
                                   'The DOM node context originally passed to ',
                                   '; if none was passed then context will likely be the document.'
                                 ],
                    'code' => 'jQuery()'
                  },
          'removed' => '3.0'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/contextmenu.xml ####
Possible keys are: signature longdesc example type name category desc note title return
$VAR1 = {
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     },
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       }
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'eventData' => {
                                                        'optional' => 'true',
                                                        'type' => 'Anything',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      },
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  }
                                                    }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.
    The ',
                                                ' event is sent to an element when the right button of the mouse is clicked on it, but before the context menu is displayed. In case the context menu key is pressed, the event is triggered on the ',
                                                ' element. Any HTML element can receive this event.
    For example, consider the HTML:'
                                              ],
                                 'code' => [
                                           '.on( "contextmenu", handler )',
                                           '.trigger( "contextmenu" )',
                                           'contextmenu',
                                           'html'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The event handler can be bound to the ',
                                                ' as follows:'
                                              ],
                                 'code' => '<div>'
                               },
                               'Now right-clicking on this element displays the alert:',
                               {
                                 'samp' => 'Handler for .contextmenu() called.'
                               },
                               {
                                 'content' => [
                                                'To trigger the event manually, call ',
                                                ' without an argument:'
                                              ],
                                 'code' => '.contextmenu()'
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div id="target">
  Right-click here
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).contextmenu(function() {
  alert( "Handler for .contextmenu() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).contextmenu();
    '
                                 }
                               ]
                      },
          'example' => [
                       {
                         'code' => '
$( "p" ).contextmenu(function() {
  alert( "Hello World!" );
});
',
                         'desc' => 'To show a "Hello World!" alert box when the contextmenu event is triggered on a paragraph on the page:'
                       },
                       {
                         'css' => '
  div {
    background: blue;
    color: white;
    height: 100px;
    width: 150px;
 }
  div.contextmenu {
    background: yellow;
    color: black;
  }
',
                         'desc' => 'Right click to toggle background color.',
                         'html' => '
<div></div>
<span>Right click the block</span>
',
                         'code' => '
var div = $( "div:first" );
div.contextmenu(function() {
  div.toggleClass( "contextmenu" );
});
'
                       }
                     ],
          'type' => 'method',
          'name' => 'contextmenu',
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'desc' => 'Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'id' => 'detach-shorthand',
                    'type' => 'additional',
                    'data-event' => 'contextmenu'
                  },
          'title' => '.contextmenu()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/css.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.',
          'entry' => {
                     'css' => {
                              'return' => 'jQuery',
                              'desc' => 'Set one or more CSS properties for the set of matched elements.',
                              'category' => [
                                            {
                                              'slug' => 'css'
                                            },
                                            {
                                              'slug' => 'manipulation/style-properties'
                                            },
                                            {
                                              'slug' => 'version/1.0'
                                            },
                                            {
                                              'slug' => 'version/1.4'
                                            }
                                          ],
                              'longdesc' => {
                                            'p' => [
                                                   {
                                                     'code' => [
                                                               '.prop()',
                                                               '.css()'
                                                             ],
                                                     'content' => [
                                                                    'As with the ',
                                                                    ' method, the ',
                                                                    ' method makes setting properties of elements quick and easy. This method can take either a property name and value as separate parameters, or a single object of key-value pairs.'
                                                                  ]
                                                   },
                                                   {
                                                     'code' => [
                                                               '.css({ "background-color": "#ffe", "border-left": "5px solid #ccc" })',
                                                               '.css({backgroundColor: "#ffe", borderLeft: "5px solid #ccc" })'
                                                             ],
                                                     'content' => [
                                                                    'Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands and returns the correct value for both ',
                                                                    ' and ',
                                                                    '. Notice that with the DOM notation, quotation marks around the property names are optional, but with CSS notation they\'re required due to the hyphen in the name.'
                                                                  ]
                                                   },
                                                   {
                                                     'content' => [
                                                                    'When a number is passed as the value, jQuery will convert it to a string and add ',
                                                                    ' to the end of that string. If the property requires units other than ',
                                                                    ', convert the value to a string and add the appropriate units before calling the method.'
                                                                  ],
                                                     'code' => [
                                                               'px',
                                                               'px'
                                                             ]
                                                   },
                                                   {
                                                     'code' => [
                                                               '.css()',
                                                               'style',
                                                               '$( "#mydiv" ).css( "color", "green" )',
                                                               'document.getElementById( "mydiv" ).style.color = "green"',
                                                               '$( "#mydiv" ).css( "color", "" )',
                                                               '.css()',
                                                               'style',
                                                               '<style>',
                                                               'border',
                                                               'background',
                                                               '<style>'
                                                             ],
                                                     'strong' => 'Warning:',
                                                     'content' => [
                                                                    'When using ',
                                                                    ' as a setter, jQuery modifies the element\'s ',
                                                                    ' property. For example,  ',
                                                                    ' is equivalent to ',
                                                                    ". Setting the value of a style property to an empty string \x{2014} e.g. ",
                                                                    " \x{2014} removes that property from an element if it has already been directly applied, whether in the HTML style attribute, through jQuery's ",
                                                                    ' method, or through direct DOM manipulation of the ',
                                                                    ' property. As a consequence, the element\'s style for that property will be restored to whatever value was applied. So, this method can be used to cancel any style modification you have previously performed. It does not, however, remove a style that has been applied with a CSS rule in a stylesheet or ',
                                                                    ' element. ',
                                                                    ' one notable exception is that, for IE 8 and below, removing a shorthand property such as ',
                                                                    ' or ',
                                                                    ' will remove that style entirely from the element, regardless of what is set in a stylesheet or ',
                                                                    ' element.'
                                                                  ]
                                                   },
                                                   {
                                                     'strong' => 'Note:',
                                                     'content' => [
                                                                    ' ignores ',
                                                                    ' declarations. So, the statement ',
                                                                    ' does not turn the color of all paragraphs in the page to red. It\'s strongly advised to use classes instead; otherwise use a jQuery plugin.'
                                                                  ],
                                                     'code' => [
                                                               '.css()',
                                                               '!important',
                                                               '$( "p" ).css( "color", "red !important" )'
                                                             ]
                                                   },
                                                   {
                                                     'content' => [
                                                                    'As of jQuery 1.8, the ',
                                                                    ' setter will automatically take care of prefixing the property name. For example, take ',
                                                                    ' in Chrome/Safari will set it as ',
                                                                    ', Firefox will use ',
                                                                    ', and IE10 will use ',
                                                                    '.'
                                                                  ],
                                                     'code' => [
                                                               '.css()',
                                                               '.css( "user-select", "none" )',
                                                               '-webkit-user-select',
                                                               '-moz-user-select',
                                                               '-ms-user-select'
                                                             ]
                                                   },
                                                   {
                                                     'code' => [
                                                               '.css()',
                                                               '.animate()',
                                                               '+=',
                                                               '-=',
                                                               '.css( "padding-left", "+=15" )'
                                                             ],
                                                     'content' => [
                                                                    'As of jQuery 1.6, ',
                                                                    ' accepts relative values similar to ',
                                                                    '. Relative values are a string starting with ',
                                                                    ' or ',
                                                                    ' to increment or decrement the current value. For example, if an element\'s padding-left was 10px, ',
                                                                    ' would result in a total padding-left of 25px.'
                                                                  ]
                                                   },
                                                   {
                                                     'content' => [
                                                                    'As of jQuery 1.4, ',
                                                                    ' allows us to pass a function as the property value:'
                                                                  ],
                                                     'code' => '.css()'
                                                   },
                                                   'This example sets the widths of the matched elements to incrementally larger values.',
                                                   {
                                                     'code' => [
                                                               'function( index, style ){} )',
                                                               'undefined'
                                                             ],
                                                     'content' => [
                                                                    'If nothing is returned in the setter function (ie. ',
                                                                    ', or if ',
                                                                    ' is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.'
                                                                  ],
                                                     'strong' => 'Note: '
                                                   }
                                                 ],
                                            'pre' => {
                                                     'code' => '
$( "div.example" ).css( "width", function( index ) {
  return index * 50;
});
      '
                                                   }
                                          },
                              'example' => [
                                           {
                                             'html' => '
  <p>Just roll the mouse over me.</p>

  <p>Or me to see a color change.</p>
',
                                             'desc' => 'Change the color of any paragraph to red on mouseover event.',
                                             'css' => '
  p {
    color: blue;
    width: 200px;
    font-size: 14px;
  }
',
                                             'code' => '
$( "p" ).on( "mouseover", function() {
  $( this ).css( "color", "red" );
});
'
                                           },
                                           {
                                             'desc' => 'Increase the width of #box by 200 pixels the first time it is clicked.',
                                             'html' => '
<div id="box">Click me to grow</div>
',
                                             'css' => '
  #box {
    background: black;
    color: snow;
    width: 100px;
    padding: 10px;
  }
',
                                             'code' => '
$( "#box" ).one( "click", function() {
  $( this ).css( "width", "+=200" );
});
'
                                           },
                                           {
                                             'code' => '
var words = $( "p" ).first().text().split( /\\s+/ );
var text = words.join( "</span> <span>" );
$( "p" ).first().html( "<span>" + text + "</span>" );
$( "span" ).on( "click", function() {
  $( this ).css( "background-color", "yellow" );
});
',
                                             'css' => '
  p {
    color: blue;
    font-weight: bold;
    cursor: pointer;
  }
',
                                             'html' => '
<p>
  Once upon a time there was a man
  who lived in a pizza parlor. This
  man just loved pizza and ate it all
  the time.  He went on to be the
  happiest man in the world.  The end.
</p>
',
                                             'desc' => 'Highlight a clicked word in the paragraph.'
                                           },
                                           {
                                             'code' => '
$( "p" )
  .on( "mouseenter", function() {
    $( this ).css({
      "background-color": "yellow",
      "font-weight": "bolder"
    });
  })
  .on( "mouseleave", function() {
    var styles = {
      backgroundColor : "#ddd",
      fontWeight: ""
    };
    $( this ).css( styles );
  });
',
                                             'css' => '
  p {
    color: green;
  }
',
                                             'desc' => 'Change the font weight and background color on mouseenter and mouseleave.',
                                             'html' => '
<p>Move the mouse over a paragraph.</p>
<p>Like this one or the one above.</p>
'
                                           },
                                           {
                                             'css' => '
  div {
    width: 20px;
    height: 15px;
    background-color: #f33;
  }
',
                                             'html' => '
<div>click</div>
<div>click</div>
',
                                             'desc' => 'Increase the size of a div when you click it.',
                                             'code' => '
$( "div" ).on( "click", function() {
  $( this ).css({
    width: function( index, value ) {
      return parseFloat( value ) * 1.2;
    },
    height: function( index, value ) {
      return parseFloat( value ) * 1.2;
    }
  });
});
'
                                           }
                                         ],
                              'type' => 'method',
                              'signature' => [
                                             {
                                               'argument' => {
                                                             'value' => {
                                                                        'desc' => 'A value to set for the property.',
                                                                        'type' => {
                                                                                  'Number' => {},
                                                                                  'String' => {}
                                                                                }
                                                                      },
                                                             'propertyName' => {
                                                                               'desc' => 'A CSS property name.',
                                                                               'type' => 'String'
                                                                             }
                                                           },
                                               'added' => '1.0'
                                             },
                                             {
                                               'argument' => {
                                                             'propertyName' => {
                                                                               'type' => 'String',
                                                                               'desc' => 'A CSS property name.'
                                                                             },
                                                             'function' => {
                                                                           'desc' => {
                                                                                     'code' => 'this',
                                                                                     'content' => [
                                                                                                    'A function returning the value to set. ',
                                                                                                    ' is the current element. Receives the index position of the element in the set and the old value as arguments.'
                                                                                                  ]
                                                                                   },
                                                                           'argument' => {
                                                                                         'value' => {
                                                                                                    'type' => 'String'
                                                                                                  },
                                                                                         'index' => {
                                                                                                    'type' => 'Integer'
                                                                                                  }
                                                                                       },
                                                                           'type' => 'Function',
                                                                           'return' => {
                                                                                       'type' => {
                                                                                                 'Number' => {},
                                                                                                 'String' => {}
                                                                                               }
                                                                                     }
                                                                         }
                                                           },
                                               'added' => '1.4'
                                             },
                                             {
                                               'added' => '1.0',
                                               'argument' => {
                                                             'desc' => 'An object of property-value pairs to set.',
                                                             'name' => 'properties',
                                                             'type' => 'PlainObject'
                                                           }
                                             }
                                           ]
                            }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/data.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'data' => {
                               'return' => 'Object',
                               'note' => {
                                         'type' => 'additional',
                                         'id' => 'no-data-on-xml'
                                       },
                               'desc' => 'Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.',
                               'category' => [
                                             {
                                               'slug' => 'data'
                                             },
                                             {
                                               'slug' => 'miscellaneous/data-storage'
                                             },
                                             {
                                               'slug' => 'version/1.2.3'
                                             },
                                             {
                                               'slug' => 'version/1.4'
                                             },
                                             {
                                               'slug' => 'version/1.4.3'
                                             }
                                           ],
                               'type' => 'method',
                               'longdesc' => {
                                             'p' => [
                                                    {
                                                      'code' => '.data()',
                                                      'content' => [
                                                                     'The ',
                                                                     ' method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:'
                                                                   ]
                                                    },
                                                    {
                                                      'content' => [
                                                                     'The above lines alert the data values that were set on the ',
                                                                     ' element. If no data at all was set on that element, ',
                                                                     ' is returned.'
                                                                   ],
                                                      'code' => [
                                                                'body',
                                                                'undefined'
                                                              ]
                                                    },
                                                    {
                                                      'content' => [
                                                                     ' changes the behavior of this method to align it to the ',
                                                                     '. Specifically, jQuery 3 transforms every two-character sequence of "-" (U+002D) followed by a lowercase ASCII letter by the uppercase version of the letter as per definition of [the algorithm of the Dataset API](http://www.w3.org/TR/html5/dom.html#dom-dataset). Writing a statement like ',
                                                                     ' will return ',
                                                                     '.'
                                                                   ],
                                                      'strong' => 'jQuery 3',
                                                      'code' => [
                                                                '$( "body" ).data( { "my-name": "aValue" } ).data();',
                                                                '{ myName: "aValue" }'
                                                              ],
                                                      'a' => {
                                                             'content' => 'Dataset API specifications',
                                                             'href' => 'http://www.w3.org/TR/html5/dom.html#dom-dataset'
                                                           }
                                                    },
                                                    {
                                                      'a' => [
                                                             {
                                                               'content' => 'HTML 5 data- attributes',
                                                               'href' => 'http://ejohn.org/blog/html-5-data-attributes/'
                                                             },
                                                             {
                                                               'href' => 'http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes',
                                                               'content' => 'W3C HTML5 specification'
                                                             }
                                                           ],
                                                      'content' => [
                                                                     'As of jQuery 1.4.3 ',
                                                                     ' will be automatically pulled in to jQuery\'s data object. The treatment of attributes with embedded dashes was changed in jQuery 1.6 to conform to the ',
                                                                     '.'
                                                                   ]
                                                    },
                                                    'For example, given the following HTML:',
                                                    'All of the following jQuery code will work.',
                                                    {
                                                      'content' => [
                                                                     'The second statement of the code above correctly refers to the ',
                                                                     ' attribute of the element. In case no data is stored with the passed key, jQuery searches among the attributes of the element, converting a camel-cased string into a dashed string and then prepending ',
                                                                     ' to the result. So, the string ',
                                                                     ' is converted to ',
                                                                     '.'
                                                                   ],
                                                      'code' => [
                                                                'data-last-value',
                                                                'data-',
                                                                'lastValue',
                                                                'data-last-value'
                                                              ]
                                                    },
                                                    'Every attempt is made to convert the string to a JavaScript value (this includes booleans, numbers, objects, arrays, and null). A value is only converted to a number if doing so doesn\'t change the value\'s representation. For example, "1E02" and "100.000" are equivalent as numbers (numeric value 100) but converting them would alter their representation so they are left as strings. The string value "100" is converted to the number 100.',
                                                    {
                                                      'em' => 'including quoted property names',
                                                      'a' => {
                                                             'content' => 'valid JSON syntax',
                                                             'href' => 'http://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example'
                                                           },
                                                      'code' => 'jQuery.parseJSON',
                                                      'content' => [
                                                                     'When the data attribute is an object (starts with \'{\') or array (starts with \'[\') then ',
                                                                     ' is used to parse the string; it must follow ',
                                                                     '. If the value isn\'t parseable as a JavaScript value, it is left as a string.'
                                                                   ]
                                                    },
                                                    {
                                                      'code' => {
                                                                'a' => {
                                                                       'content' => 'attr()',
                                                                       'href' => '/attr/'
                                                                     }
                                                              },
                                                      'content' => [
                                                                     'To retrieve the value\'s attribute as a string without any attempt to convert it, use the ',
                                                                     ' method.'
                                                                   ]
                                                    },
                                                    'The data- attributes are pulled in the first time the data property is accessed and then are no longer accessed or mutated (all data values are then stored internally in jQuery).',
                                                    {
                                                      'code' => [
                                                                '.data()',
                                                                '.data(obj)',
                                                                '.data()'
                                                              ],
                                                      'content' => [
                                                                     'Calling ',
                                                                     ' with no parameters retrieves all of the values as a JavaScript object. This object can be safely cached in a variable as long as a new object is not set with ',
                                                                     '. Using the object directly to get or set values is faster than making individual calls to ',
                                                                     ' to get or set each value:'
                                                                   ]
                                                    }
                                                  ],
                                             'pre' => [
                                                      {
                                                        'code' => '
alert( $( "body" ).data( "foo" ) );
alert( $( "body" ).data() );
      '
                                                      },
                                                      {
                                                        'code' => '
alert( $( "body" ).data( "foo" ) ); // undefined
$( "body" ).data( "bar", "foobar" );
alert( $( "body" ).data( "bar" ) ); // foobar
      '
                                                      },
                                                      {
                                                        'code' => '<div data-role="page" data-last-value="43" data-hidden="true" data-options=\'{"name":"John"}\'></div>'
                                                      },
                                                      {
                                                        'code' => '
$( "div" ).data( "role" ) === "page";
$( "div" ).data( "lastValue" ) === 43;
$( "div" ).data( "hidden" ) === true;
$( "div" ).data( "options" ).name === "John";
      '
                                                      },
                                                      {
                                                        'code' => '
var mydata = $( "#mydiv" ).data();
if ( mydata.count < 9 ) {
  mydata.count = 43;
  mydata.status = "embiggened";
}
    '
                                                      }
                                                    ],
                                             'h4' => {
                                                     'a' => {
                                                            'href' => '#data-html5',
                                                            'content' => 'HTML5 data-* Attributes'
                                                          },
                                                     'id' => 'data-html5'
                                                   }
                                           },
                               'example' => {
                                            'desc' => 'Get the data named "blah" stored at for an element.',
                                            'html' => '
<div>A div</div>
<button>Get "blah" from the div</button>
<button>Set "blah" to "hello"</button>
<button>Set "blah" to 86</button>
<button>Remove "blah" from the div</button>
<p>The "blah" value of this div is <span>?</span></p>
',
                                            'css' => '
  div {
    margin: 5px;
    background: yellow;
  }
  button {
    margin: 5px;
    font-size: 14px;
  }
  p {
    margin: 5px;
    color: blue;
  }
  span {
    color: red;
  }
',
                                            'code' => '
$( "button" ).click(function() {
  var value;

  switch ( $( "button" ).index( this ) ) {
    case 0 :
      value = $( "div" ).data( "blah" );
      break;
    case 1 :
      $( "div" ).data( "blah", "hello" );
      value = "Stored!";
      break;
    case 2 :
      $( "div" ).data( "blah", 86 );
      value = "Stored!";
      break;
    case 3 :
      $( "div" ).removeData( "blah" );
      value = "Removed!";
      break;
  }

  $( "span" ).text( "" + value );
});
'
                                          },
                               'signature' => [
                                              {
                                                'added' => '1.2.3',
                                                'argument' => {
                                                              'desc' => 'Name of the data stored.',
                                                              'name' => 'key',
                                                              'type' => 'String'
                                                            }
                                              },
                                              {
                                                'added' => '1.4'
                                              }
                                            ]
                             }
                   },
          'desc' => 'Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/dblclick.xml ####
Possible keys are: name type longdesc example category signature return title note desc
$VAR1 = {
          'name' => 'dblclick',
          'type' => 'method',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div id="target">
  Double-click here
</div>
<div id="other">
  Trigger the handler
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).dblclick(function() {
  alert( "Handler for .dblclick() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).dblclick();
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "dblclick", handler )',
                                           '.trigger( "dblclick" )',
                                           'dblclick'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.
    The ',
                                                ' event is sent to an element when the element is double-clicked. Any HTML element can receive this event.
    For example, consider the HTML:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The event handler can be bound to any ',
                                                ':'
                                              ],
                                 'code' => '<div>'
                               },
                               'Now double-clicking on this element displays the alert:',
                               {
                                 'samp' => 'Handler for .dblclick() called.'
                               },
                               {
                                 'code' => '.dblclick()',
                                 'content' => [
                                                'To trigger the event manually, call ',
                                                ' without an argument:'
                                              ]
                               },
                               {
                                 'samp' => 'Trigger the handler',
                                 'content' => [
                                                'After this code executes, (single) clicks on ',
                                                ' will also alert the message.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event is only triggered after this exact series of events:'
                                              ],
                                 'code' => 'dblclick'
                               },
                               {
                                 'code' => [
                                           'click',
                                           'dblclick',
                                           'click',
                                           'dblclick'
                                         ],
                                 'content' => [
                                                'It is inadvisable to bind handlers to both the ',
                                                ' and ',
                                                ' events for the same element. The sequence of events triggered varies from browser to browser, with some receiving two ',
                                                ' events before the ',
                                                ' and others only one. Double-click sensitivity (maximum time between clicks that is detected as a double click) can vary by operating system and browser, and is often user-configurable.
    '
                                              ]
                               }
                             ],
                        'ul' => {
                                'li' => [
                                        'The mouse button is depressed while the pointer is inside the element.',
                                        'The mouse button is released while the pointer is inside the element.',
                                        'The mouse button is depressed again while the pointer is inside the element, within a time window that is system-dependent.',
                                        'The mouse button is released while the pointer is inside the element.'
                                      ]
                              },
                        'figure' => {
                                    'figcaption' => 'Figure 1 - Illustration of the rendered HTML',
                                    'img' => {
                                             'alt' => '',
                                             'src' => '/resources/0042_05_04.png'
                                           }
                                  }
                      },
          'example' => [
                       {
                         'code' => '
$( "p" ).dblclick(function() {
  alert( "Hello World!" );
});
',
                         'desc' => 'To bind a "Hello World!" alert box to the dblclick event on every paragraph on the page:'
                       },
                       {
                         'code' => '
var divdbl = $( "div:first" );
divdbl.dblclick(function() {
  divdbl.toggleClass( "dbl" );
});
',
                         'desc' => 'Double click to toggle background color.',
                         'html' => '
<div></div>
<span>Double click the block</span>
',
                         'css' => '
  div {
    background: blue;
    color: white;
    height: 100px;
    width: 150px;
 }
  div.dbl {
    background: yellow;
    color: black;
  }
'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'signature' => [
                         {
                           'argument' => {
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'argument' => {
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      },
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  }
                                                    }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'return' => 'jQuery',
          'title' => '.dblclick()',
          'note' => {
                    'type' => 'additional',
                    'id' => 'detach-shorthand',
                    'data-event' => 'dblclick'
                  },
          'desc' => 'Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.always.xml ####
Possible keys are: desc title return signature category longdesc example name type
$VAR1 = {
          'desc' => ' Add handlers to be called when the Deferred object is either resolved or rejected. ',
          'title' => 'deferred.always()',
          'return' => 'Deferred',
          'signature' => {
                         'added' => '1.6',
                         'argument' => {
                                       'alwaysCallbacks' => {
                                                            'type' => 'Function',
                                                            'optional' => 'true',
                                                            'desc' => '
        Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
      '
                                                          }
                                     }
                       },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               {
                                 'a' => [
                                        {
                                          'href' => '/deferred.resolve/',
                                          'code' => 'resolve'
                                        },
                                        {
                                          'href' => '/deferred.reject/',
                                          'code' => 'reject'
                                        },
                                        {
                                          'href' => '/deferred.resolveWith/',
                                          'code' => 'resolveWith'
                                        },
                                        {
                                          'code' => 'rejectWith',
                                          'href' => '/deferred.rejectWith/'
                                        },
                                        {
                                          'href' => '/category/deferred-object/',
                                          'content' => 'Deferred object'
                                        }
                                      ],
                                 'code' => [
                                           'alwaysCallbacks',
                                           'deferred.always()',
                                           '.always()'
                                         ],
                                 'content' => [
                                                'The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the ',
                                                ' are called. Since ',
                                                ' returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional ',
                                                ' methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the ',
                                                ', ',
                                                ', ',
                                                ' or ',
                                                ' method calls. For more information, see the documentation for ',
                                                '.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'deferred.always()',
                                           '.resolve()',
                                           '.reject()',
                                           'Deferred'
                                         ],
                                 'strong' => 'Note:',
                                 'content' => [
                                                ' The ',
                                                ' method receives the arguments that were used to ',
                                                ' or ',
                                                ' the ',
                                                ' object, which are often very different. For this reason, it\'s best to use it only for actions that do not require inspecting the arguments. In all other cases, use explicit ',
                                                ' or ',
                                                ' handlers since the arguments will have well-known orders.'
                                              ],
                                 'a' => [
                                        {
                                          'code' => '.done()',
                                          'href' => '/deferred.done/'
                                        },
                                        {
                                          'code' => '.fail()',
                                          'href' => '/deferred.fail/'
                                        }
                                      ]
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$.get( "test.php" ).always(function() {
  alert( "$.get completed with success or error callback arguments" );
});
',
                       'desc' => {
                                 'a' => {
                                        'href' => '/jQuery.get/',
                                        'code' => 'jQuery.get()'
                                      },
                                 'content' => [
                                                'Since the ',
                                                ' method returns a ',
                                                ' object, which is derived from a Deferred object, we can attach a callback for both success and error using the ',
                                                ' method.'
                                              ],
                                 'code' => [
                                           'jqXHR',
                                           'deferred.always()'
                                         ]
                               }
                     },
          'name' => 'deferred.always',
          'type' => 'method'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.done.xml ####
Possible keys are: desc title return signature category example longdesc type name
$VAR1 = {
          'desc' => ' Add handlers to be called when the Deferred object is resolved. ',
          'title' => 'deferred.done()',
          'return' => 'Deferred',
          'signature' => {
                         'argument' => {
                                       'doneCallbacks' => {
                                                          'type' => 'Function',
                                                          'optional' => 'true',
                                                          'desc' => '
        Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
      '
                                                        }
                                     },
                         'added' => '1.5'
                       },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'example' => [
                       {
                         'code' => '
$.get( "test.php" ).done(function() {
  alert( "$.get succeeded" );
});
',
                         'desc' => {
                                   'code' => '.done()',
                                   'content' => [
                                                  'Since the ',
                                                  ' method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the ',
                                                  ' method.'
                                                ],
                                   'a' => {
                                          'code' => 'jQuery.get',
                                          'href' => '/jQuery.get/'
                                        }
                                 }
                       },
                       {
                         'code' => '
// 3 functions to call when the Deferred object is resolved
function fn1() {
  $( "p" ).append( " 1 " );
}
function fn2() {
  $( "p" ).append( " 2 " );
}
function fn3( n ) {
  $( "p" ).append( n + " 3 " + n );
}

// Create a deferred object
var dfd = $.Deferred();

// Add handlers to be called when dfd is resolved
dfd
// .done() can take any number of functions or arrays of functions
  .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )
// We can chain done methods, too
  .done(function( n ) {
    $( "p" ).append( n + " we\'re done." );
  });

// Resolve the Deferred object when the button is clicked
$( "button" ).on( "click", function() {
  dfd.resolve( "and" );
});
',
                         'html' => '
<button>Go</button>
<p>Ready...</p>
',
                         'desc' => 'Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:'
                       }
                     ],
          'longdesc' => {
                        'p' => {
                               'code' => [
                                         'deferred.done()',
                                         'deferred.done()',
                                         '.done()'
                                       ],
                               'content' => [
                                              'The ',
                                              ' method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since ',
                                              ' returns the deferred object, other methods of the deferred object can be chained to this one, including additional ',
                                              ' methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the ',
                                              ' or ',
                                              ' method call in the order they were added. For more information, see the documentation for ',
                                              '.'
                                            ],
                               'a' => [
                                      {
                                        'href' => '/deferred.resolve/',
                                        'code' => 'resolve'
                                      },
                                      {
                                        'href' => '/deferred.resolveWith/',
                                        'code' => 'resolveWith'
                                      },
                                      {
                                        'content' => 'Deferred object',
                                        'href' => '/category/deferred-object/'
                                      }
                                    ]
                             }
                      },
          'type' => 'method',
          'name' => 'deferred.done'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.fail.xml ####
Possible keys are: desc title return signature category longdesc example name type
$VAR1 = {
          'desc' => ' Add handlers to be called when the Deferred object is rejected. ',
          'title' => 'deferred.fail()',
          'return' => 'Deferred',
          'signature' => {
                         'added' => '1.5',
                         'argument' => {
                                       'failCallbacks' => {
                                                          'optional' => 'true',
                                                          'type' => 'Function',
                                                          'desc' => '
        Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
      '
                                                        }
                                     }
                       },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'longdesc' => {
                        'p' => {
                               'a' => [
                                      {
                                        'href' => '/deferred.reject/',
                                        'code' => 'deferred.reject()'
                                      },
                                      {
                                        'href' => '/deferred.rejectWith/',
                                        'code' => 'deferred.rejectWith()'
                                      },
                                      {
                                        'href' => '/category/deferred-object/',
                                        'content' => 'Deferred object'
                                      }
                                    ],
                               'content' => [
                                              'The ',
                                              ' method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since ',
                                              ' returns the deferred object, other methods of the deferred object can be chained to this one, including additional ',
                                              ' methods. The failCallbacks are executed using the arguments provided to the ',
                                              ' or ',
                                              ' method call in the order they were added. For more information, see the documentation for ',
                                              '.'
                                            ],
                               'code' => [
                                         'deferred.fail()',
                                         'deferred.fail()',
                                         'deferred.fail()'
                                       ]
                             }
                      },
          'example' => {
                       'desc' => {
                                 'a' => {
                                        'code' => 'jQuery.get',
                                        'href' => '/jQuery.get/'
                                      },
                                 'content' => [
                                                'Since the ',
                                                ' method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the ',
                                                ' and ',
                                                ' methods.'
                                              ],
                                 'code' => [
                                           'deferred.done()',
                                           'deferred.fail()'
                                         ]
                               },
                       'code' => '
$.get( "test.php" )
  .done(function() {
    alert( "$.get succeeded" );
  })
  .fail(function() {
    alert( "$.get failed!" );
  });
'
                     },
          'name' => 'deferred.fail',
          'type' => 'method'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.isRejected.xml ####
Possible keys are: removed desc title return deprecated signature category longdesc type name
$VAR1 = {
          'removed' => '1.8',
          'desc' => ' Determine whether a Deferred object has been rejected. ',
          'title' => 'deferred.isRejected()',
          'return' => 'Boolean',
          'deprecated' => '1.7',
          'signature' => {
                         'added' => '1.5'
                       },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.7'
                        },
                        {
                          'slug' => 'removed'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'As of jQuery 1.7 this API has been deprecated; please use ',
                                                ' instead.'
                                              ],
                                 'a' => {
                                        'code' => 'deferred.state()',
                                        'href' => '/deferred.state/'
                                      }
                               },
                               {
                                 'a' => [
                                        {
                                          'code' => 'deferred.reject()',
                                          'href' => 'h/deferred.reject/'
                                        },
                                        {
                                          'code' => 'deferred.rejectWith()',
                                          'href' => '/deferred.rejectWith/'
                                        }
                                      ],
                                 'code' => 'true',
                                 'content' => [
                                                'Returns ',
                                                ' if the Deferred object is in the rejected state, meaning that either ',
                                                ' or ',
                                                ' has been called for the object and the failCallbacks have been called (or are in the process of being called).'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Note that a Deferred object can be in one of three states: pending, resolved, or rejected; use ',
                                                ' to determine whether the Deferred object is in the resolved state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.'
                                              ],
                                 'a' => {
                                        'code' => 'deferred.isResolved()',
                                        'href' => '/deferred.isResolved/'
                                      }
                               }
                             ]
                      },
          'type' => 'method',
          'name' => 'deferred.isRejected'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.isResolved.xml ####
Possible keys are: deprecated signature category type name longdesc removed desc return title
$VAR1 = {
          'deprecated' => '1.7',
          'signature' => {
                         'added' => '1.5'
                       },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.7'
                        },
                        {
                          'slug' => 'removed'
                        }
                      ],
          'type' => 'method',
          'name' => 'deferred.isResolved',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           'deprecated',
                                           'removed'
                                         ],
                                 'content' => [
                                                'This API is ',
                                                ' as of jQuery 1.7 and ',
                                                ' as of jQuery 1.8; please use ',
                                                ' instead.'
                                              ],
                                 'a' => {
                                        'href' => '/deferred.state/',
                                        'code' => 'deferred.state()'
                                      }
                               },
                               {
                                 'a' => [
                                        {
                                          'code' => 'deferred.resolve()',
                                          'href' => '/deferred.resolve/'
                                        },
                                        {
                                          'code' => 'deferred.resolveWith()',
                                          'href' => '/deferred.resolveWith/'
                                        }
                                      ],
                                 'code' => 'true',
                                 'content' => [
                                                'Returns ',
                                                ' if the Deferred object is in the resolved state, meaning that either ',
                                                ' or ',
                                                ' has been called for the object and the doneCallbacks have been called (or are in the process of being called).'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => '/deferred.isRejected/',
                                        'code' => 'deferred.isRejected()'
                                      },
                                 'content' => [
                                                'Note that a Deferred object can be in one of three states: pending, resolved, or rejected; use ',
                                                ' to determine whether the Deferred object is in the rejected state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.'
                                              ]
                               }
                             ]
                      },
          'removed' => '1.8',
          'desc' => ' Determine whether a Deferred object has been resolved. ',
          'return' => 'Boolean',
          'title' => 'deferred.isResolved()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.notify.xml ####
Possible keys are: category longdesc name type signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               'Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred\'s state or reporting status by returning a restricted Promise object through deferred.promise().',
                               {
                                 'content' => [
                                                'When ',
                                                ' is called, any progressCallbacks added by ',
                                                ' or ',
                                                ' are called. Callbacks are executed in the order they were added. Each callback is passed the ',
                                                ' from the ',
                                                '. Any calls to ',
                                                ' after a Deferred is resolved or rejected (or any progressCallbacks added after that) are ignored. For more information, see the documentation for ',
                                                '.'
                                              ],
                                 'code' => [
                                           'deferred.notify',
                                           'args',
                                           '.notify()',
                                           '.notify()'
                                         ],
                                 'a' => [
                                        {
                                          'code' => 'deferred.then',
                                          'href' => '/deferred.then/'
                                        },
                                        {
                                          'code' => 'deferred.progress',
                                          'href' => '/deferred.progress/'
                                        },
                                        {
                                          'content' => 'Deferred object',
                                          'href' => '/category/deferred-object/'
                                        }
                                      ]
                               }
                             ]
                      },
          'name' => 'deferred.notify',
          'type' => 'method',
          'signature' => {
                         'argument' => {
                                       'type' => 'Object',
                                       'name' => 'args',
                                       'desc' => '
        Optional arguments that are passed to the progressCallbacks.
      '
                                     },
                         'added' => '1.7'
                       },
          'title' => 'deferred.notify()',
          'return' => 'Deferred',
          'desc' => {
                    'content' => [
                                   ' Call the progressCallbacks on a Deferred object with the given ',
                                   '. '
                                 ],
                    'code' => 'args'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.notifyWith.xml ####
Possible keys are: return title desc category name type longdesc signature
$VAR1 = {
          'return' => 'Deferred',
          'title' => 'deferred.notifyWith()',
          'desc' => {
                    'code' => 'args',
                    'content' => [
                                   ' Call the progressCallbacks on a Deferred object with the given context and ',
                                   '. '
                                 ]
                  },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'name' => 'deferred.notifyWith',
          'type' => 'method',
          'longdesc' => {
                        'p' => [
                               'Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred\'s state or reporting status by returning a restricted Promise object through deferred.promise().',
                               {
                                 'a' => [
                                        {
                                          'href' => '/deferred.then/',
                                          'code' => 'deferred.then'
                                        },
                                        {
                                          'href' => '/deferred.progress/',
                                          'code' => 'deferred.progress'
                                        },
                                        {
                                          'href' => '/category/deferred-object/',
                                          'content' => 'Deferred object'
                                        }
                                      ],
                                 'content' => [
                                                'When ',
                                                ' is called, any progressCallbacks added by ',
                                                ' or ',
                                                ' are called. Callbacks are executed in the order they were added. Each callback is passed the ',
                                                ' from the ',
                                                '. Any calls to ',
                                                ' after a Deferred is resolved or rejected (or any progressCallbacks added after that) are ignored. For more information, see the documentation for ',
                                                '.'
                                              ],
                                 'code' => [
                                           'deferred.notifyWith',
                                           'args',
                                           '.notifyWith()',
                                           '.notifyWith()'
                                         ]
                               }
                             ]
                      },
          'signature' => {
                         'argument' => {
                                       'args' => {
                                                 'optional' => 'true',
                                                 'type' => 'Array',
                                                 'desc' => '
        An optional array of arguments that are passed to the progressCallbacks.
      '
                                               },
                                       'context' => {
                                                    'type' => 'Object',
                                                    'desc' => {
                                                              'code' => 'this',
                                                              'content' => [
                                                                             '
        Context passed to the progressCallbacks as the ',
                                                                             ' object.
      '
                                                                           ]
                                                            }
                                                  }
                                     },
                         'added' => '1.7'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.pipe.xml ####
Possible keys are: desc title return signature deprecated longdesc example type name category
$VAR1 = {
          'desc' => ' Utility method to filter and/or chain Deferreds.  ',
          'title' => 'deferred.pipe()',
          'return' => 'Promise',
          'signature' => [
                         {
                           'argument' => {
                                         'failFilter' => {
                                                         'optional' => 'true',
                                                         'type' => 'Function',
                                                         'desc' => '
        An optional function that is called when the Deferred is rejected.
      '
                                                       },
                                         'doneFilter' => {
                                                         'desc' => '
        An optional function that is called when the Deferred is resolved.
      ',
                                                         'type' => 'Function',
                                                         'optional' => 'true'
                                                       }
                                       },
                           'added' => '1.6'
                         },
                         {
                           'argument' => {
                                         'failFilter' => {
                                                         'optional' => 'true',
                                                         'type' => 'Function',
                                                         'desc' => '
        An optional function that is called when the Deferred is rejected.
      '
                                                       },
                                         'progressFilter' => {
                                                             'desc' => '
        An optional function that is called when progress notifications are sent to the Deferred.
      ',
                                                             'type' => 'Function',
                                                             'optional' => 'true'
                                                           },
                                         'doneFilter' => {
                                                         'desc' => '
        An optional function that is called when the Deferred is resolved.
      ',
                                                         'type' => 'Function',
                                                         'optional' => 'true'
                                                       }
                                       },
                           'added' => '1.7'
                         }
                       ],
          'deprecated' => '1.8',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'As of jQuery 1.8, the deferred.pipe() method is deprecated. The ',
                                                ' method, which replaces it, should be used instead.'
                                              ],
                                 'strong' => 'Deprecation Notice:',
                                 'code' => 'deferred.then()'
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' method returns a new promise that filters the status and values of a deferred through a function.  The ',
                                                ' and ',
                                                ' functions filter the original deferred\'s resolved / rejected status and values. ',
                                                ', the method also accepts a ',
                                                ' function to filter any calls to the original deferred\'s ',
                                                ' or ',
                                                ' methods. These filter functions can return a new value to be passed along to the piped promise\'s ',
                                                ' or ',
                                                ' callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise\'s callbacks. If the filter function used is ',
                                                ', or not specified, the piped promise will be resolved or rejected with the same values as the original.'
                                              ],
                                 'strong' => 'As of jQuery 1.7',
                                 'code' => [
                                           'deferred.pipe()',
                                           'doneFilter',
                                           'failFilter',
                                           'progressFilter',
                                           'notify',
                                           'notifyWith',
                                           'done()',
                                           'fail()',
                                           'null'
                                         ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'desc' => 'Filter resolve value:',
                         'code' => '
var defer = $.Deferred(),
  filtered = defer.pipe(function( value ) {
    return value * 2;
  });

defer.resolve( 5 );
filtered.done(function( value ) {
  alert( "Value is ( 2*5 = ) 10: " + value );
});
'
                       },
                       {
                         'code' => '
var defer = $.Deferred(),
  filtered = defer.pipe( null, function( value ) {
    return value * 3;
  });

defer.reject( 6 );
filtered.fail(function( value ) {
  alert( "Value is ( 3*6 = ) 18: " + value );
});
',
                         'desc' => 'Filter reject value:'
                       },
                       {
                         'code' => '
var request = $.ajax( url, { dataType: "json" } ),
  chained = request.pipe(function( data ) {
    return $.ajax( url2, { data: { user: data.userId } } );
  });

chained.done(function( data ) {
  // data retrieved from url2 as provided by the first request
});
',
                         'desc' => 'Chain tasks:'
                       }
                     ],
          'type' => 'method',
          'name' => 'deferred.pipe',
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.6'
                        },
                        {
                          'slug' => 'version/1.7'
                        },
                        {
                          'slug' => 'version/1.8'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.8'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.progress.xml ####
Possible keys are: desc title return signature category longdesc type name
$VAR1 = {
          'desc' => ' Add handlers to be called when the Deferred object generates progress notifications.',
          'title' => 'deferred.progress()',
          'return' => 'Deferred',
          'signature' => {
                         'argument' => {
                                       'progressCallbacks' => {
                                                              'optional' => 'true',
                                                              'type' => {
                                                                        'Function' => {},
                                                                        'Array' => {}
                                                                      },
                                                              'desc' => '
        Optional additional functions, or arrays of functions, to be called when the Deferred generates progress notifications.
      '
                                                            }
                                     },
                         'added' => '1.7'
                       },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'longdesc' => {
                        'p' => {
                               'code' => [
                                         'deferred.progress()',
                                         'notify',
                                         'notifyWith',
                                         'progressCallbacks',
                                         'deferred.progress()',
                                         'progressCallbacks',
                                         '.notify()',
                                         'notifyWith()'
                                       ],
                               'content' => [
                                              'The ',
                                              ' method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred generates progress notifications by calling ',
                                              ' or ',
                                              ', the ',
                                              ' are called. Since ',
                                              ' returns the Deferred object, other methods of the Deferred object can be chained to this one. When the Deferred is resolved or rejected, progress callbacks will no longer be called, with the exception that any ',
                                              ' added after the Deferred enters the resolved or rejected state are executed immediately when they are added, using the arguments that were passed to the ',
                                              ' or ',
                                              ' call. For more information, see the documentation for ',
                                              '.'
                                            ],
                               'a' => {
                                      'href' => '/jQuery.Deferred/',
                                      'content' => 'jQuery.Deferred()'
                                    }
                             }
                      },
          'type' => 'method',
          'name' => 'deferred.progress'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.promise.xml ####
Possible keys are: longdesc example name type category signature title return desc
$VAR1 = {
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ' and ',
                                                '), but not ones that change the state (',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', and ',
                                                ').'
                                              ],
                                 'code' => [
                                           'deferred.promise()',
                                           'then',
                                           'done',
                                           'fail',
                                           'always',
                                           'pipe',
                                           'progress',
                                           'state',
                                           'promise',
                                           'resolve',
                                           'reject',
                                           'notify',
                                           'resolveWith',
                                           'rejectWith',
                                           'notifyWith'
                                         ]
                               },
                               {
                                 'code' => [
                                           'target',
                                           'deferred.promise()'
                                         ],
                                 'content' => [
                                                'If ',
                                                ' is provided, ',
                                                ' will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'If you are creating a Deferred, keep a reference to the Deferred so that it can be resolved or rejected at some point. Return ',
                                                ' the Promise object via ',
                                                ' so other code can register callbacks or inspect the current state.'
                                              ],
                                 'code' => 'deferred.promise()',
                                 'em' => 'only'
                               },
                               {
                                 'content' => [
                                                'For more information, see the documentation for ',
                                                '.'
                                              ],
                                 'a' => {
                                        'content' => 'Deferred object',
                                        'href' => '/category/deferred-object/'
                                      }
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
function asyncEvent() {
  var dfd = jQuery.Deferred();

  // Resolve after a random interval
  setTimeout(function() {
    dfd.resolve( "hurray" );
  }, Math.floor( 400 + Math.random() * 2000 ) );

  // Reject after a random interval
  setTimeout(function() {
    dfd.reject( "sorry" );
  }, Math.floor( 400 + Math.random() * 2000 ) );

  // Show a "working..." message every half-second
  setTimeout(function working() {
    if ( dfd.state() === "pending" ) {
      dfd.notify( "working... " );
      setTimeout( working, 500 );
    }
  }, 1 );

  // Return the Promise so caller can\'t change the Deferred
  return dfd.promise();
}

// Attach a done, fail, and progress handler for the asyncEvent
$.when( asyncEvent() ).then(
  function( status ) {
    alert( status + ", things are going well" );
  },
  function( status ) {
    alert( status + ", you fail this time" );
  },
  function( status ) {
    $( "body" ).append( status );
  }
);
',
                         'desc' => 'Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first "wins" and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds "working..." to the document body.'
                       },
                       {
                         'code' => '
// Existing object
var obj = {
    hello: function( name ) {
      alert( "Hello " + name );
    }
  },
  // Create a Deferred
  defer = $.Deferred();

// Set object as a promise
defer.promise( obj );

// Resolve the deferred
defer.resolve( "John" );

// Use the object as a Promise
obj.done(function( name ) {
  obj.hello( name ); // Will alert "Hello John"
}).hello( "Karl" ); // Will alert "Hello Karl"
',
                         'desc' => 'Use the target argument to promote an existing object to a Promise:'
                       }
                     ],
          'name' => 'deferred.promise',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'desc' => 'Object onto which the promise methods have to be attached',
                                       'optional' => 'true',
                                       'type' => 'Object',
                                       'name' => 'target'
                                     },
                         'added' => '1.5'
                       },
          'title' => 'deferred.promise()',
          'return' => 'Promise',
          'desc' => ' Return a Deferred\'s Promise object. '
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.reject.xml ####
Possible keys are: title return desc longdesc name type category signature
$VAR1 = {
          'title' => 'deferred.reject()',
          'return' => 'Deferred',
          'desc' => {
                    'content' => [
                                   ' Reject a Deferred object and call any failCallbacks with the given ',
                                   '. '
                                 ],
                    'code' => 'args'
                  },
          'longdesc' => {
                        'p' => [
                               {
                                 'a' => {
                                        'code' => 'deferred.promise()',
                                        'href' => '/deferred.promise/'
                                      },
                                 'content' => [
                                                'Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred\'s state by returning a restricted Promise object through ',
                                                '.'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'code' => 'deferred.then()',
                                          'href' => '/deferred.then/'
                                        },
                                        {
                                          'href' => '/deferred.fail/',
                                          'code' => 'deferred.fail()'
                                        },
                                        {
                                          'href' => '/jQuery.Deferred/',
                                          'content' => 'jQuery.Deferred()'
                                        }
                                      ],
                                 'content' => [
                                                'When the Deferred is rejected, any failCallbacks added by ',
                                                ' or ',
                                                ' are called. Callbacks are executed in the order they were added. Each callback is passed the ',
                                                ' from the ',
                                                ' call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the ',
                                                ' call. For more information, see the documentation for ',
                                                '.'
                                              ],
                                 'code' => [
                                           'args',
                                           'deferred.reject()',
                                           'deferred.reject()'
                                         ]
                               }
                             ]
                      },
          'name' => 'deferred.reject',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'desc' => '
        Optional arguments that are passed to the failCallbacks.
      ',
                                       'optional' => 'true',
                                       'type' => 'Anything',
                                       'name' => 'args'
                                     },
                         'added' => '1.5'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.rejectWith.xml ####
Possible keys are: return title desc category type name longdesc signature
$VAR1 = {
          'return' => 'Deferred',
          'title' => 'deferred.rejectWith()',
          'desc' => {
                    'content' => [
                                   ' Reject a Deferred object and call any failCallbacks with the given ',
                                   ' and ',
                                   '. '
                                 ],
                    'code' => [
                              'context',
                              'args'
                            ]
                  },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'type' => 'method',
          'name' => 'deferred.rejectWith',
          'longdesc' => {
                        'p' => [
                               {
                                 'a' => {
                                        'code' => 'deferred.promise()',
                                        'href' => '/deferred.promise/'
                                      },
                                 'content' => [
                                                'Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred\'s state by returning a restricted Promise object through ',
                                                '.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'When the Deferred is rejected, any failCallbacks added by ',
                                                ' or ',
                                                ' are called. Callbacks are executed in the order they were added. Each callback is passed the ',
                                                ' from the ',
                                                ' call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the ',
                                                ' call. For more information, see the documentation for ',
                                                '.'
                                              ],
                                 'code' => [
                                           'args',
                                           'deferred.reject()',
                                           '.reject()'
                                         ],
                                 'a' => [
                                        {
                                          'href' => '/deferred.then/',
                                          'code' => 'deferred.then'
                                        },
                                        {
                                          'code' => 'deferred.fail',
                                          'href' => '/deferred.fail/'
                                        },
                                        {
                                          'href' => '/category/deferred-object/',
                                          'content' => 'Deferred object'
                                        }
                                      ]
                               }
                             ]
                      },
          'signature' => {
                         'argument' => {
                                       'context' => {
                                                    'type' => 'Object',
                                                    'desc' => {
                                                              'code' => 'this',
                                                              'content' => [
                                                                             '
        Context passed to the failCallbacks as the ',
                                                                             ' object.
      '
                                                                           ]
                                                            }
                                                  },
                                       'args' => {
                                                 'desc' => '
        An optional array of arguments that are passed to the failCallbacks.
      ',
                                                 'optional' => 'true',
                                                 'type' => 'Array'
                                               }
                                     },
                         'added' => '1.5'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.resolve.xml ####
Possible keys are: desc return title signature category name type longdesc
$VAR1 = {
          'desc' => {
                    'content' => [
                                   ' Resolve a Deferred object and call any doneCallbacks with the given ',
                                   '. '
                                 ],
                    'code' => 'args'
                  },
          'return' => 'Deferred',
          'title' => 'deferred.resolve()',
          'signature' => {
                         'argument' => {
                                       'optional' => 'true',
                                       'name' => 'args',
                                       'type' => 'Anything',
                                       'desc' => '
        Optional arguments that are passed to the doneCallbacks.
      '
                                     },
                         'added' => '1.5'
                       },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'name' => 'deferred.resolve',
          'type' => 'method',
          'longdesc' => {
                        'p' => [
                               {
                                 'a' => {
                                        'code' => 'deferred.promise()',
                                        'href' => '/deferred.promise/'
                                      },
                                 'content' => [
                                                'Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred\'s state by returning a restricted Promise object through ',
                                                '.'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'href' => '/deferred.then/',
                                          'code' => 'deferred.then()'
                                        },
                                        {
                                          'code' => 'deferred.done()',
                                          'href' => '/deferred.done/'
                                        },
                                        {
                                          'href' => '/jQuery.Deferred/',
                                          'content' => 'jQuery.Deferred()'
                                        }
                                      ],
                                 'code' => [
                                           'args',
                                           'deferred.resolve()',
                                           'deferred.resolve()'
                                         ],
                                 'content' => [
                                                'When the Deferred is resolved, any doneCallbacks added by ',
                                                ' or ',
                                                ' are called. Callbacks are executed in the order they were added. Each callback is passed the ',
                                                ' from the ',
                                                '. Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the ',
                                                ' call. For more information, see the documentation for ',
                                                '.'
                                              ]
                               }
                             ]
                      }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.resolveWith.xml ####
Possible keys are: desc title return signature longdesc name type category
$VAR1 = {
          'desc' => {
                    'code' => [
                              'context',
                              'args'
                            ],
                    'content' => [
                                   ' Resolve a Deferred object and call any doneCallbacks with the given ',
                                   ' and ',
                                   '. '
                                 ]
                  },
          'title' => 'deferred.resolveWith()',
          'return' => 'Deferred',
          'signature' => {
                         'added' => '1.5',
                         'argument' => {
                                       'context' => {
                                                    'desc' => {
                                                              'content' => [
                                                                             '
        Context passed to the doneCallbacks as the ',
                                                                             ' object.
      '
                                                                           ],
                                                              'code' => 'this'
                                                            },
                                                    'type' => 'Object'
                                                  },
                                       'args' => {
                                                 'desc' => '
        An optional array of arguments that are passed to the doneCallbacks.
      ',
                                                 'type' => 'Array',
                                                 'optional' => 'true'
                                               }
                                     }
                       },
          'longdesc' => {
                        'p' => [
                               {
                                 'a' => {
                                        'href' => '/deferred.promise/',
                                        'code' => 'deferred.promise()'
                                      },
                                 'content' => [
                                                'Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred\'s state by returning a restricted Promise object through ',
                                                '.'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'href' => '/deferred.then/',
                                          'code' => 'deferred.then'
                                        },
                                        {
                                          'code' => 'deferred.done',
                                          'href' => '/deferred.done/'
                                        },
                                        {
                                          'content' => 'Deferred object',
                                          'href' => '/category/deferred-object/'
                                        }
                                      ],
                                 'code' => [
                                           'args',
                                           '.resolve()',
                                           '.resolve()'
                                         ],
                                 'content' => [
                                                'When the Deferred is resolved, any doneCallbacks added by ',
                                                ' or ',
                                                ' are called. Callbacks are executed in the order they were added. Each callback is passed the ',
                                                ' from the ',
                                                '. Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the ',
                                                ' call. For more information, see the documentation for ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'name' => 'deferred.resolveWith',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.state.xml ####
Possible keys are: return title desc type name longdesc category signature
$VAR1 = {
          'return' => 'String',
          'title' => 'deferred.state()',
          'desc' => 'Determine the current state of a Deferred object. ',
          'type' => 'method',
          'name' => 'deferred.state',
          'longdesc' => {
                        'p' => [
                               'The deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:',
                               'This method is primarily useful for debugging to determine, for example, whether a Deferred has already been resolved even though you are inside code that intended to reject it.'
                             ],
                        'ul' => {
                                'li' => [
                                        {
                                          'strong' => '"pending"',
                                          'content' => ': The Deferred object is not yet in a completed state (neither "rejected" nor "resolved").'
                                        },
                                        {
                                          'content' => [
                                                         ': The Deferred object is in the resolved state, meaning that either ',
                                                         ' or ',
                                                         ' has been called for the object and the doneCallbacks have been called (or are in the process of being called). '
                                                       ],
                                          'strong' => '"resolved"',
                                          'a' => [
                                                 {
                                                   'code' => 'deferred.resolve()',
                                                   'href' => '/deferred.resolve/'
                                                 },
                                                 {
                                                   'code' => 'deferred.resolveWith()',
                                                   'href' => '/deferred.resolveWith/'
                                                 }
                                               ]
                                        },
                                        {
                                          'content' => [
                                                         ': The Deferred object is in the rejected state, meaning that either ',
                                                         ' or ',
                                                         ' has been called for the object and the failCallbacks have been called (or are in the process of being called).'
                                                       ],
                                          'strong' => '"rejected"',
                                          'a' => [
                                                 {
                                                   'code' => 'deferred.reject()',
                                                   'href' => '/deferred.reject/'
                                                 },
                                                 {
                                                   'href' => '/deferred.rejectWith/',
                                                   'code' => 'deferred.rejectWith()'
                                                 }
                                               ]
                                        }
                                      ]
                              }
                      },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'signature' => {
                         'added' => '1.7'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/deferred.then.xml ####
Possible keys are: signature type name example longdesc category desc return title
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'doneFilter' => {
                                                         'desc' => '
        A function that is called when the Deferred is resolved.
      ',
                                                         'type' => 'Function'
                                                       },
                                         'progressFilter' => {
                                                             'desc' => '
        An optional function that is called when progress notifications are sent to the Deferred.
      ',
                                                             'optional' => 'true',
                                                             'type' => 'Function'
                                                           },
                                         'failFilter' => {
                                                         'desc' => '
        An optional function that is called when the Deferred is rejected.
      ',
                                                         'optional' => 'true',
                                                         'type' => 'Function'
                                                       }
                                       },
                           'added' => '1.8'
                         },
                         {
                           'removed' => '1.8',
                           'argument' => {
                                         'doneCallbacks' => {
                                                            'type' => 'Function',
                                                            'desc' => '
        A function, or array of functions, called when the Deferred is resolved.
      '
                                                          },
                                         'failCallbacks' => {
                                                            'type' => 'Function',
                                                            'desc' => '
        A function, or array of functions, called when the Deferred is rejected.
      '
                                                          }
                                       },
                           'added' => '1.5'
                         },
                         {
                           'removed' => '1.8',
                           'added' => '1.7',
                           'argument' => {
                                         'doneCallbacks' => {
                                                            'type' => 'Function',
                                                            'desc' => '
        A function, or array of functions, called when the Deferred is resolved.
      '
                                                          },
                                         'failCallbacks' => {
                                                            'type' => 'Function',
                                                            'desc' => '
        A function, or array of functions, called when the Deferred is rejected.
      '
                                                          },
                                         'progressCallbacks' => {
                                                                'type' => 'Function',
                                                                'optional' => 'true',
                                                                'desc' => '
        A function, or array of functions, called when the Deferred notifies progress.
      '
                                                              }
                                       }
                         }
                       ],
          'type' => 'method',
          'name' => 'deferred.then',
          'example' => [
                       {
                         'desc' => {
                                   'a' => {
                                          'code' => 'jQuery.get',
                                          'href' => '/jQuery.get/'
                                        },
                                   'code' => '.then',
                                   'content' => [
                                                  'Since the ',
                                                  ' method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the ',
                                                  ' method.'
                                                ]
                                 },
                         'code' => '
$.get( "test.php" ).then(
  function() {
    alert( "$.get succeeded" );
  }, function() {
    alert( "$.get failed!" );
  }
);
'
                       },
                       {
                         'code' => '
var filterResolve = function() {
  var defer = $.Deferred(),
    filtered = defer.then(function( value ) {
      return value * 2;
    });

  defer.resolve( 5 );
  filtered.done(function( value ) {
    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
  });
};

$( "button" ).on( "click", filterResolve );
',
                         'html' => '
<button>Filter Resolve</button>
<p></p>
',
                         'desc' => 'Filter the resolve value:'
                       },
                       {
                         'code' => '
var defer = $.Deferred(),
  filtered = defer.then( null, function( value ) {
    return value * 3;
  });

defer.reject( 6 );
filtered.fail(function( value ) {
  alert( "Value is ( 3*6 = ) 18: " + value );
});
',
                         'desc' => 'Filter reject value:'
                       },
                       {
                         'code' => '
var request = $.ajax( url, { dataType: "json" } ),
  chained = request.then(function( data ) {
    return $.ajax( url2, { data: { user: data.userId } } );
  });

chained.done(function( data ) {
  // data retrieved from url2 as provided by the first request
});
',
                         'desc' => 'Chain tasks:'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'strong' => 'Prior to jQuery 1.8',
                                 'content' => ', the arguments could be a function or an array of functions.'
                               },
                               {
                                 'code' => [
                                           'null',
                                           '.done()',
                                           '.fail()',
                                           '.progress()'
                                         ],
                                 'content' => [
                                                'For all signatures, the arguments can be ',
                                                ' if no callback of that type is desired. Alternatively, use ',
                                                ', ',
                                                ' or ',
                                                ' to set only one type of callback without filtering status or values. '
                                              ]
                               },
                               {
                                 'code' => [
                                           'deferred.then()',
                                           'deferred.pipe()',
                                           'doneFilter',
                                           'failFilter',
                                           'progressFilter',
                                           'notify',
                                           'notifyWith',
                                           '.done()',
                                           '.fail()',
                                           'null'
                                         ],
                                 'content' => [
                                                ', the ',
                                                ' method returns a new promise that can filter the status and values of a deferred through a function, replacing the now-deprecated ',
                                                ' method. The ',
                                                ' and ',
                                                ' functions filter the original deferred\'s resolved / rejected status and values. The ',
                                                ' function filters any calls to the original deferred\'s ',
                                                ' or ',
                                                ' methods. These filter functions can return a new value to be passed along to the promise\'s ',
                                                ' or ',
                                                ' callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the promise\'s callbacks. If the filter function used is ',
                                                ', or not specified, the promise will be resolved or rejected with the same values as the original.'
                                              ],
                                 'strong' => 'As of jQuery 1.8'
                               },
                               {
                                 'content' => [
                                                'Callbacks are executed in the order they were added. Since
      ',
                                                ' returns a Promise, other methods of the
      Promise object can be chained to this one, including additional
      ',
                                                ' methods.
    '
                                              ],
                                 'code' => [
                                           'deferred.then',
                                           '.then()'
                                         ]
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'desc' => 'Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. ',
          'return' => 'Promise',
          'title' => 'deferred.then()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/delay.xml ####
Possible keys are: title return desc category longdesc example type name signature
$VAR1 = {
          'title' => '.delay()',
          'return' => 'jQuery',
          'desc' => 'Set a timer to delay execution of subsequent items in the queue.',
          'category' => [
                        {
                          'slug' => 'effects/custom-effects'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'longdesc' => {
                        'div' => {
                                 'p' => {
                                        'strong' => {
                                                    'code' => [
                                                              '.delay()',
                                                              '.delay()'
                                                            ],
                                                    'content' => [
                                                                   'The ',
                                                                   " method is best for delaying between queued jQuery effects. Because it is limited\x{2014}it doesn't, for example, offer a way to cancel the delay\x{2014}",
                                                                   ' is not a replacement for JavaScript\'s native ',
                                                                   ' function, which may be more appropriate for certain use cases.'
                                                                 ],
                                                    'a' => {
                                                           'href' => 'https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers.setTimeout',
                                                           'content' => 'setTimeout'
                                                         }
                                                  }
                                      },
                                 'class' => 'warning'
                               },
                        'p' => [
                               {
                                 'em' => 'not',
                                 'code' => [
                                           '.delay()',
                                           '.show()',
                                           '.hide()'
                                         ],
                                 'content' => [
                                                'Added to jQuery in version 1.4, the ',
                                                ' method allows us to delay the execution of functions that follow it in the queue. It can be used with the standard effects queue or with a custom queue. Only subsequent events in a queue are delayed; for example this will ',
                                                ' delay the no-arguments forms of ',
                                                ' or ',
                                                '  which do not use the effects queue.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\''
                                         ],
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of 200 and 600 milliseconds, respectively.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Using the standard effects queue, we can, for example, set an 800-millisecond delay between the ',
                                                ' and ',
                                                ' of ',
                                                ':'
                                              ],
                                 'code' => [
                                           '.slideUp()',
                                           '.fadeIn()',
                                           '<div id="foo">'
                                         ]
                               },
                               'When this statement is executed, the element slides up for 300 milliseconds and then pauses for 800 milliseconds before fading in for 400 milliseconds.'
                             ],
                        'pre' => {
                                 'code' => '
$( "#foo" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );
    '
                               }
                      },
          'example' => {
                       'code' => '
$( "button" ).click(function() {
  $( "div.first" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );
  $( "div.second" ).slideUp( 300 ).fadeIn( 400 );
});
',
                       'html' => '
<p><button>Run</button></p>
<div class="first"></div>
<div class="second"></div>
',
                       'desc' => 'Animate the hiding and showing of two divs, delaying the first before showing it.',
                       'css' => '
  div {
    position: absolute;
    width: 60px;
    height: 60px;
    float: left;
  }
  .first {
    background-color: #3f3;
    left: 0;
  }
  .second {
    background-color: #33f;
    left: 80px;
  }
'
                     },
          'type' => 'method',
          'name' => 'delay',
          'signature' => {
                         'added' => '1.4',
                         'argument' => {
                                       'duration' => {
                                                     'type' => 'Integer',
                                                     'desc' => 'An integer indicating the number of milliseconds to delay execution of the next item in the queue.'
                                                   },
                                       'queueName' => {
                                                      'desc' => {
                                                                'code' => 'fx',
                                                                'content' => [
                                                                               'A string containing the name of the queue. Defaults to ',
                                                                               ', the standard effects queue.'
                                                                             ]
                                                              },
                                                      'type' => 'String',
                                                      'optional' => 'true'
                                                    }
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/delegate.xml ####
Possible keys are: desc note title return signature example longdesc name type category
$VAR1 = {
          'desc' => 'Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.',
          'note' => {
                    'id' => 'propagation-for-live-or-delegate',
                    'type' => 'additional'
                  },
          'title' => '.delegate()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'added' => '1.4.2',
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'A function to execute at the time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  }
                                                    },
                                         'selector' => {
                                                       'desc' => 'A selector to filter the elements that trigger the event.',
                                                       'type' => 'String'
                                                     },
                                         'eventType' => {
                                                        'desc' => 'A string containing one or more space-separated JavaScript event types, such as "click" or "keydown," or custom event names.',
                                                        'type' => 'String'
                                                      }
                                       }
                         },
                         {
                           'argument' => {
                                         'selector' => {
                                                       'desc' => 'A selector to filter the elements that trigger the event.',
                                                       'type' => 'String'
                                                     },
                                         'handler' => {
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'desc' => 'A function to execute at the time the event is triggered.'
                                                    },
                                         'eventType' => {
                                                        'type' => 'String',
                                                        'desc' => 'A string containing one or more space-separated JavaScript event types, such as "click" or "keydown," or custom event names.'
                                                      },
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything'
                                                      }
                                       },
                           'added' => '1.4.2'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'events' => {
                                                     'type' => 'PlainObject',
                                                     'desc' => 'A plain object of one or more event types and functions to execute for them.'
                                                   },
                                         'selector' => {
                                                       'desc' => 'A selector to filter the elements that trigger the event.',
                                                       'type' => 'String'
                                                     }
                                       }
                         }
                       ],
          'example' => [
                       {
                         'html' => '
<p>Click me!</p>

<span></span>
',
                         'desc' => 'Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.',
                         'css' => '
  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
    background: #ccc;
  }
  span {
    color: red;
  }
',
                         'code' => '
$( "body" ).delegate( "p", "click", function() {
  $( this ).after( "<p>Another paragraph!</p>" );
});
'
                       },
                       {
                         'code' => '
$( "body" ).delegate( "p", "click", function() {
  alert( $( this ).text() );
});
',
                         'desc' => 'To display each paragraph\'s text in an alert box whenever it is clicked:'
                       },
                       {
                         'desc' => 'To cancel a default action and prevent it from bubbling up, return false:',
                         'code' => '
$( "body" ).delegate( "a", "click", function() {
  return false;
});
'
                       },
                       {
                         'code' => '
$( "body" ).delegate( "a", "click", function( event ) {
  event.preventDefault();
});
',
                         'desc' => 'To cancel only the default action by using the preventDefault method.'
                       },
                       {
                         'code' => '
$( "body" ).delegate( "p", "myCustomEvent", function( e, myName, myValue ) {
  $( this ).text( "Hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
});
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent" );
});
',
                         'css' => '
  p {
    color: red;
  }
  span {
    color: blue;
  }
',
                         'html' => '
<p>Has an attached custom event.</p>
<button>Trigger custom event</button>
<span style="display:none;"></span>
',
                         'desc' => 'Can bind custom events too.'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
// jQuery 1.4.3+
$( elements ).delegate( selector, events, data, handler );
// jQuery 1.7+
$( elements ).on( events, selector, data, handler );
    '
                                 },
                                 {
                                   'code' => '
$( "table" ).delegate( "td", "click", function() {
  $( this ).toggleClass( "chosen" );
});
    '
                                 },
                                 {
                                   'code' => '
$( "table" ).on( "click", "td", function() {
  $( this ).toggleClass( "chosen" );
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'a' => [
                                        {
                                          'href' => '/on/',
                                          'content' => '.on()'
                                        },
                                        {
                                          'href' => '/on/',
                                          'content' => '.on()'
                                        }
                                      ],
                                 'content' => [
                                                'As of jQuery 1.7, ',
                                                ' has been superseded by the ',
                                                ' method. For earlier versions, however, it remains the most effective means to use event delegation. More information on event binding and delegation is in the ',
                                                ' method. In general, these are the equivalent templates for the two methods:'
                                              ],
                                 'code' => '.delegate()'
                               },
                               {
                                 'content' => [
                                                'For example, the following ',
                                                ' code:'
                                              ],
                                 'code' => '.delegate()'
                               },
                               {
                                 'content' => [
                                                'is equivalent to the following code written using ',
                                                ':'
                                              ],
                                 'code' => '.on()'
                               },
                               {
                                 'content' => [
                                                'To remove events attached with ',
                                                ', see  the ',
                                                ' method.'
                                              ],
                                 'code' => 'delegate()',
                                 'a' => {
                                        'content' => '.undelegate()',
                                        'href' => '/undelegate/'
                                      }
                               },
                               {
                                 'code' => '.on()',
                                 'content' => [
                                                'Passing and handling event data works the same way as it does for ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'name' => 'delegate',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.4.2'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/dequeue.xml ####
Possible keys are: name type longdesc example category signature return title desc
$VAR1 = {
          'name' => 'dequeue',
          'type' => 'method',
          'longdesc' => {
                        'p' => {
                               'code' => [
                                         '.dequeue()',
                                         '.dequeue()'
                                       ],
                               'content' => [
                                              'When ',
                                              ' is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause ',
                                              ' to be called, so that the sequence can continue.'
                                            ]
                             }
                      },
          'example' => {
                       'code' => '
$( "button" ).click(function() {
  $( "div" )
    .animate({ left:"+=200px" }, 2000 )
    .animate({ top:"0px" }, 600 )
    .queue(function() {
      $( this ).toggleClass( "red" ).dequeue();
    })
    .animate({ left:"10px", top:"30px" }, 700 );
});
',
                       'html' => '
<button>Start</button>
<div></div>
',
                       'desc' => 'Use dequeue to end a custom queue function which allows the queue to keep going.',
                       'css' => '
  div {
    margin: 3px;
    width: 50px;
    position: absolute;
    height: 50px;
    left: 10px;
    top: 30px;
    background-color: yellow;
  }
  div.red {
    background-color: red;
  }
'
                     },
          'category' => [
                        {
                          'slug' => 'effects/custom-effects'
                        },
                        {
                          'slug' => 'data'
                        },
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'signature' => {
                         'added' => '1.2',
                         'argument' => {
                                       'desc' => {
                                                 'code' => 'fx',
                                                 'content' => [
                                                                'A string containing the name of the queue. Defaults to ',
                                                                ', the standard effects queue.'
                                                              ]
                                               },
                                       'name' => 'queueName',
                                       'type' => 'String',
                                       'optional' => 'true'
                                     }
                       },
          'return' => 'jQuery',
          'title' => '.dequeue()',
          'desc' => 'Execute the next function on the queue for the matched elements.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/descendant-selector.xml ####
Possible keys are: desc return sample title signature name type example longdesc category
$VAR1 = {
          'desc' => 'Selects all elements that are descendants of a given ancestor.',
          'return' => '',
          'sample' => 'ancestor descendant',
          'title' => 'Descendant Selector ("ancestor descendant")',
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'descendant' => {
                                                       'type' => 'Selector',
                                                       'desc' => 'A selector to filter the descendant elements.'
                                                     },
                                       'ancestor' => {
                                                     'desc' => 'Any valid selector.',
                                                     'type' => 'Selector'
                                                   }
                                     }
                       },
          'name' => 'descendant',
          'type' => 'selector',
          'example' => {
                       'code' => '
$( "form input" ).css( "border", "2px dotted blue" );
$( "form fieldset input" ).css( "backgroundColor", "yellow" );
',
                       'css' => '
  form {
    border: 2px green solid;
    padding: 2px;
    margin: 0;
    background: #efe;
  }
  div {
    color: red;
  }
  fieldset {
    margin: 1px;
    padding: 3px;
  }
',
                       'desc' => 'Mark all inputs that are descendants of a form with a dotted blue border. Give a yellow background to inputs that are descendants of a fieldset that is a descendant of a form.',
                       'html' => '
<form>
  <div>Form is surrounded by the green border.</div>

  <label for="name">Child of form:</label>
  <input name="name" id="name">

  <fieldset>
    <label for="newsletter">Grandchild of form, child of fieldset:</label>
    <input name="newsletter" id="newsletter">
  </fieldset>
</form>
Sibling to form: <input name="none">
'
                     },
          'longdesc' => {
                        'p' => 'A descendant of an element could be a child, grandchild, great-grandchild, and so on, of that element.'
                      },
          'category' => [
                        {
                          'slug' => 'selectors/hierarchy-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/detach.xml ####
Possible keys are: type name longdesc example category signature return title desc
$VAR1 = {
          'type' => 'method',
          'name' => 'detach',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The ',
                                              ' method is the same as ',
                                              ', except that ',
                                              ' keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.'
                                            ],
                               'code' => [
                                         '.detach()',
                                         {
                                           'a' => {
                                                  'href' => '/remove/',
                                                  'content' => '.remove()'
                                                }
                                         },
                                         '.detach()'
                                       ]
                             }
                      },
          'example' => {
                       'css' => '
  p {
    background: yellow;
    margin: 6px 0;
  }
  p.off {
    background: black;
  }
',
                       'html' => '
<p>Hello</p>
how are
<p>you?</p>
<button>Attach/detach paragraphs</button>
',
                       'desc' => 'Detach all paragraphs from the DOM',
                       'code' => '
$( "p" ).click(function() {
  $( this ).toggleClass( "off" );
});
var p;
$( "button" ).click(function() {
  if ( p ) {
    p.appendTo( "body" );
    p = null;
  } else {
    p = $( "p" ).detach();
  }
});
'
                     },
          'category' => [
                        {
                          'slug' => 'manipulation/dom-removal'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'desc' => 'A selector expression that filters the set of matched elements to be removed.',
                                       'name' => 'selector',
                                       'type' => 'Selector',
                                       'optional' => 'true'
                                     },
                         'added' => '1.4'
                       },
          'return' => 'jQuery',
          'title' => '.detach()',
          'desc' => 'Remove the set of matched elements from the DOM.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/die.xml ####
Possible keys are: category name type longdesc example deprecated signature return title desc removed
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.3'
                        },
                        {
                          'slug' => 'version/1.4.1'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.7'
                        },
                        {
                          'slug' => 'removed'
                        }
                      ],
          'name' => 'die',
          'type' => 'method',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Any handler that has been attached with ',
                                                ' can be removed with ',
                                                '. This method is analogous to calling ',
                                                ' with no arguments, which is used to remove all handlers attached with ',
                                                '.
  See the discussions of ',
                                                ' and ',
                                                ' for further details.'
                                              ],
                                 'code' => [
                                           '.live()',
                                           '.die()',
                                           '.off()',
                                           '.on()',
                                           '.live()',
                                           '.off()'
                                         ]
                               },
                               {
                                 'code' => '.live()',
                                 'content' => [
                                                'If used without an argument, .die() removes ',
                                                ' event handlers previously attached using ',
                                                ' from the elements.'
                                              ],
                                 'em' => 'all'
                               },
                               {
                                 'a' => [
                                        {
                                          'code' => '.off()',
                                          'href' => '/off/'
                                        },
                                        {
                                          'href' => '/on/',
                                          'code' => '.on()'
                                        }
                                      ],
                                 'strong' => 'As of jQuery 1.7',
                                 'content' => [
                                                ', use of ',
                                                ' (and its complementary method, ',
                                                ') is not recommended. Instead, use ',
                                                ' to remove event handlers bound with '
                                              ],
                                 'code' => [
                                           '.die()',
                                           '.live()'
                                         ]
                               },
                               {
                                 'content' => ' In order for .die() to function correctly, the selector used with it must match exactly the selector initially used with .live().',
                                 'strong' => 'Note:'
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "p" ).die();
',
                         'desc' => 'To unbind all live events from all paragraphs, write:'
                       },
                       {
                         'desc' => 'To unbind all live click events from all paragraphs, write:',
                         'code' => '
$( "p" ).die( "click" );
'
                       },
                       {
                         'code' => '
var foo = function() {
  // Code to handle some kind of event
};

// Now foo will be called when paragraphs are clicked
$( "p" ).live( "click", foo );

// Now foo will no longer be called
$( "p" ).die( "click", foo );
',
                         'desc' => 'To unbind just one previously bound handler, pass the function in as the second argument:'
                       }
                     ],
          'deprecated' => '1.7',
          'signature' => [
                         {
                           'added' => '1.4.1'
                         },
                         {
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'The function that is no longer to be executed.',
                                                      'type' => 'String',
                                                      'optional' => 'true'
                                                    },
                                         'eventType' => {
                                                        'desc' => {
                                                                  'content' => [
                                                                                 'A string containing a JavaScript event type, such as ',
                                                                                 ' or ',
                                                                                 '.'
                                                                               ],
                                                                  'code' => [
                                                                            'click',
                                                                            'keydown'
                                                                          ]
                                                                },
                                                        'type' => 'String'
                                                      }
                                       },
                           'added' => '1.3'
                         },
                         {
                           'argument' => {
                                         'desc' => {
                                                   'code' => [
                                                             'click',
                                                             'keydown'
                                                           ],
                                                   'content' => [
                                                                  'A plain object of one or more event types, such as ',
                                                                  ' or ',
                                                                  ' and their corresponding functions that are no longer to be executed.'
                                                                ]
                                                 },
                                         'name' => 'events',
                                         'type' => 'PlainObject'
                                       },
                           'added' => '1.4.3'
                         }
                       ],
          'return' => 'jQuery',
          'title' => '.die()',
          'desc' => {
                    'content' => [
                                   'Remove event handlers previously attached using ',
                                   ' from the elements.'
                                 ],
                    'code' => '.live()'
                  },
          'removed' => '1.9'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/disabled-selector.xml ####
Possible keys are: category type name longdesc example signature sample return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'selector',
          'name' => 'disabled',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '$(\':disabled\')',
                                           '$(\'*:disabled\')',
                                           '$(\'input:disabled\')'
                                         ],
                                 'content' => [
                                                'As with other pseudo-class selectors (those that begin with a ":"), it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare ',
                                                ' is equivalent to ',
                                                ', so ',
                                                ' or similar should be used instead. '
                                              ]
                               },
                               {
                                 'code' => [
                                           ':disabled',
                                           '[disabled]',
                                           ':disabled',
                                           '[disabled]'
                                         ],
                                 'content' => [
                                                'Although their resulting selections are usually the same, the ',
                                                ' selector is subtly different from the ',
                                                ' attribute selector;',
                                                ' matches elements that are ',
                                                ' while ',
                                                ' only checks for the existence of the disabled attribute.'
                                              ],
                                 'a' => {
                                        'content' => 'actually disabled',
                                        'href' => 'https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements'
                                      }
                               },
                               {
                                 'code' => [
                                           ':disabled',
                                           'disabled',
                                           '<button>',
                                           '<input>',
                                           '<optgroup>',
                                           '<option>',
                                           '<select>',
                                           '<textarea>',
                                           '<menuitem>',
                                           '<fieldset>'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' selector should only be used for selecting HTML elements that support the ',
                                                ' attribute (',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', and ',
                                                ').'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'html' => '
<form>
  <input name="email" disabled="disabled">
  <input name="id">
</form>
',
                       'desc' => 'Finds all input elements that are disabled.',
                       'code' => '
$( "input:disabled" ).val( "this is it" );
'
                     },
          'signature' => {
                         'added' => '1.0'
                       },
          'sample' => ':disabled',
          'return' => '',
          'title' => ':disabled Selector',
          'desc' => 'Selects all elements that are disabled.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/each.xml ####
Possible keys are: desc title return signature category example longdesc name type
$VAR1 = {
          'desc' => 'Iterate over a jQuery object, executing a function for each matched element. ',
          'title' => '.each()',
          'return' => 'jQuery',
          'signature' => {
                         'argument' => {
                                       'desc' => 'A function to execute for each matched element.',
                                       'name' => 'function',
                                       'type' => 'Function',
                                       'argument' => {
                                                     'element' => {
                                                                  'type' => 'Element'
                                                                },
                                                     'index' => {
                                                                'type' => 'Integer'
                                                              }
                                                   }
                                     },
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'miscellaneous/collection-manipulation'
                        },
                        {
                          'slug' => 'traversing'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => [
                       {
                         'code' => '
$( document.body ).click(function() {
  $( "div" ).each(function( i ) {
    if ( this.style.color !== "blue" ) {
      this.style.color = "blue";
    } else {
      this.style.color = "";
    }
  });
});
',
                         'desc' => 'Iterate over three divs and sets their color property.',
                         'html' => '
<div>Click here</div>
<div>to iterate through</div>
<div>these divs.</div>
',
                         'css' => '
  div {
    color: red;
    text-align: center;
    cursor: pointer;
    font-weight: bolder;
    width: 300px;
  }
'
                       },
                       {
                         'code' => '
$( "span" ).click(function() {
  $( "li" ).each(function() {
    $( this ).toggleClass( "example" );
  });
});
',
                         'desc' => {
                                   'code' => '$( this )',
                                   'content' => [
                                                  'To access a jQuery object instead of the regular DOM element, use ',
                                                  '. For example:'
                                                ]
                                 },
                         'html' => '
To do list: <span>(click here to change)</span>
<ul>
  <li>Eat</li>
  <li>Sleep</li>
  <li>Be merry</li>
</ul>
',
                         'css' => '
  ul {
    font-size: 18px;
    margin: 0;
  }
  span {
    color: blue;
    text-decoration: underline;
    cursor: pointer;
  }
  .example {
    font-style: italic;
  }
'
                       },
                       {
                         'code' => '
$( "button" ).click(function() {
  $( "div" ).each(function( index, element ) {
    // element == this
    $( element ).css( "backgroundColor", "yellow" );
    if ( $( this ).is( "#stop" ) ) {
      $( "span" ).text( "Stopped at div index #" + index );
      return false;
    }
  });
});
',
                         'html' => '
<button>Change colors</button>
<span></span>
<div></div>
<div></div>
<div></div>
<div></div>
<div id="stop">Stop here</div>
<div></div>
<div></div>
<div></div>
',
                         'desc' => {
                                   'code' => 'return false',
                                   'content' => [
                                                  'Use ',
                                                  ' to break out of each() loops early.'
                                                ]
                                 },
                         'css' => '
  div {
    width: 40px;
    height: 40px;
    margin: 5px;
    float: left;
    border: 2px blue solid;
    text-align: center;
  }
  span {
    color: red;
  }
'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>foo</li>
  <li>bar</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).each(function( index ) {
  console.log( index + ": " + $( this ).text() );
});
    '
                                 },
                                 {
                                   'code' => '
// The .each() method is unnecessary here:
$( "li" ).each(function() {
  $( this ).addClass( "foo" );
});

// Instead, you should rely on implicit iteration:
$( "li" ).addClass( "bar" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword ',
                                                ' refers to the element.'
                                              ],
                                 'code' => [
                                           '.each()',
                                           'this'
                                         ]
                               },
                               'Suppose you have a simple unordered list on the page:',
                               'You can select the list items and iterate across them:',
                               'A message is thus logged for each item in the list:',
                               {
                                 'br' => {},
                                 'samp' => [
                                           '0: foo',
                                           '1: bar'
                                         ]
                               },
                               {
                                 'content' => [
                                                'You can stop the loop from within the callback function by returning ',
                                                '.'
                                              ],
                                 'code' => 'false'
                               },
                               {
                                 'content' => [
                                                "Note: most jQuery methods that return a jQuery object also loop through the set of elements in the jQuery collection \x{2014} a process known as ",
                                                '. When this occurs, it is often unnecessary to ',
                                                ' iterate with the ',
                                                ' method:'
                                              ],
                                 'code' => '.each()',
                                 'i' => [
                                        'implicit iteration',
                                        'explicitly'
                                      ]
                               }
                             ]
                      },
          'name' => 'each',
          'type' => 'method'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/element-selector.xml ####
Possible keys are: category longdesc example name type signature title sample return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/basic-css-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'JavaScript\'s ',
                                              ' function is called to return the appropriate elements when this expression is used.'
                                            ],
                               'code' => 'getElementsByTagName()'
                             }
                      },
          'example' => {
                       'code' => '
$( "div" ).css( "border", "9px solid red" );
',
                       'css' => '
  div, span {
    width: 60px;
    height: 60px;
    float: left;
    padding: 10px;
    margin: 10px;
    background-color: #eee;
  }
',
                       'desc' => 'Finds every DIV element.',
                       'html' => '
<div>DIV1</div>
<div>DIV2</div>
<span>SPAN</span>
'
                     },
          'name' => 'element',
          'type' => 'selector',
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'desc' => 'An element to search for. Refers to the tagName of DOM nodes.',
                                       'name' => 'element',
                                       'type' => 'String'
                                     }
                       },
          'title' => 'Element Selector ("element")',
          'sample' => 'element',
          'return' => '',
          'desc' => 'Selects all elements with the given tag name.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/empty-selector.xml ####
Possible keys are: type name longdesc example category signature sample return title desc
$VAR1 = {
          'type' => 'selector',
          'name' => 'empty',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'This is the inverse of ',
                                                '. '
                                              ],
                                 'code' => ':parent'
                               },
                               'One important thing to note with :empty (and :parent) is that child elements include text nodes.',
                               {
                                 'content' => [
                                                'The W3C recommends that the ',
                                                ' element have at least one child node, even if that child is merely text (see http://www.w3.org/TR/html401/struct/text.html#edef-P). Some other elements, on the other hand, are empty (i.e. have no children) by definition: <input>, <img>, <br>, and <hr>, for example.'
                                              ],
                                 'code' => '<p>'
                               }
                             ]
                      },
          'example' => {
                       'css' => '
  td {
    text-align: center;
  }
',
                       'desc' => 'Finds all elements that are empty - they don\'t have child elements or text.',
                       'html' => '
<table border="1">
  <tr><td>TD #0</td><td></td></tr>
  <tr><td>TD #2</td><td></td></tr>
  <tr><td></td><td>TD#5</td></tr>
</table>
',
                       'code' => '
$( "td:empty" )
  .text( "Was empty!" )
  .css( "background", "rgb(255,220,200)" );
'
                     },
          'category' => [
                        {
                          'slug' => 'selectors/content-filter-selector'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0'
                       },
          'sample' => ':empty',
          'return' => '',
          'title' => ':empty Selector',
          'desc' => 'Select all elements that have no children (including text nodes).'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/empty.xml ####
Possible keys are: longdesc example type name category signature title return desc
$VAR1 = {
          'longdesc' => {
                        'p' => [
                               'This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:',
                               'We can target any element for removal:',
                               {
                                 'code' => 'Hello',
                                 'content' => [
                                                'This will result in a DOM structure with the ',
                                                ' text deleted:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'If we had any number of nested elements inside ',
                                                ', they would be removed, too.'
                                              ],
                                 'code' => '<div class="hello">'
                               },
                               'To avoid memory leaks, jQuery removes other constructs such as data and event handlers from the child elements before removing the elements themselves.',
                               {
                                 'content' => [
                                                'If you want to remove elements without destroying their data or event handlers (so they can be re-added later), use ',
                                                ' instead.'
                                              ],
                                 'a' => {
                                        'href' => '/detach/',
                                        'code' => '.detach()'
                                      }
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <div class="hello">Hello</div>
  <div class="goodbye">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".hello" ).empty();
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="hello"></div>
  <div class="goodbye">Goodbye</div>
</div>
    '
                                 }
                               ]
                      },
          'example' => {
                       'code' => '
$( "button" ).click(function() {
  $( "p" ).empty();
});
',
                       'css' => '
  p {
    background: yellow;
  }
',
                       'html' => '
<p>
  Hello, <span>Person</span> <em>and person</em>.
</p>

<button>Call empty() on above paragraph</button>
',
                       'desc' => 'Removes all child nodes (including text nodes) from all paragraphs'
                     },
          'type' => 'method',
          'name' => 'empty',
          'category' => [
                        {
                          'slug' => 'manipulation/dom-removal'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0'
                       },
          'title' => '.empty()',
          'return' => 'jQuery',
          'desc' => 'Remove all child nodes of the set of matched elements from the DOM.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/enabled-selector.xml ####
Possible keys are: category example longdesc name type signature title sample return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => {
                       'code' => '
$( "input:enabled" ).val( "this is it" );
',
                       'desc' => 'Find all input elements that are enabled.',
                       'html' => '
<form>
  <input name="email" disabled="disabled">
  <input name="id">
</form>
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( "*" ) is implied. In other words, the bare ',
                                                ' is equivalent to ',
                                                ', so ',
                                                ' or similar should be used instead. '
                                              ],
                                 'code' => [
                                           '$( ":enabled" )',
                                           '$( "*:enabled" )',
                                           '$( "input:enabled" )'
                                         ]
                               },
                               {
                                 'em' => 'attribute',
                                 'code' => [
                                           ':enabled',
                                           ':not([disabled])',
                                           ':enabled',
                                           ':not([disabled])'
                                         ],
                                 'content' => [
                                                'Although their resulting selections are usually the same, ',
                                                ' selector is subtly different from ',
                                                '; ',
                                                ' selects elements that have their boolean disabled property strictly equal to false, while ',
                                                ' selects elements that do not have a disabled ',
                                                ' set (regardless of its value).'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' selector should only be used for selecting HTML elements that support the ',
                                                ' attribute (',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', and ',
                                                ').'
                                              ],
                                 'code' => [
                                           ':enabled',
                                           'disabled',
                                           '<button>',
                                           '<input>',
                                           '<optgroup>',
                                           '<option>',
                                           '<select>',
                                           '<textarea>'
                                         ]
                               }
                             ]
                      },
          'name' => 'enabled',
          'type' => 'selector',
          'signature' => {
                         'added' => '1.0'
                       },
          'title' => ':enabled Selector',
          'sample' => ':enabled',
          'return' => '',
          'desc' => 'Selects all elements that are enabled.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/end.xml ####
Possible keys are: return title desc category type name longdesc example signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.end()',
          'desc' => 'End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.',
          'category' => [
                        {
                          'slug' => 'traversing/miscellaneous-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'method',
          'name' => 'end',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul class="first">
  <li class="foo">list item 1</li>
  <li>list item 2</li>
  <li class="bar">list item 3</li>
</ul>
<ul class="second">
  <li class="foo">list item 1</li>
  <li>list item 2</li>
  <li class="bar">list item 3</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "ul.first" )
  .find( ".foo" )
    .css( "background-color", "red" )
  .end()
  .find( ".bar" )
    .css( "background-color", "green" );
    '
                                 },
                                 {
                                   'code' => '
$( "ul.first" )
  .find( ".foo" )
    .css( "background-color", "red" )
  .end()
  .find( ".bar" )
    .css( "background-color", "green" )
  .end();
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'a' => {
                                        'content' => 'DOM traversal',
                                        'href' => '/category/traversing/'
                                      },
                                 'content' => [
                                                'Most of jQuery\'s ',
                                                ' methods operate on a jQuery object instance and produce a new one, matching a different set of DOM elements. When this happens, it is as if the new set of elements is pushed onto a stack that is maintained inside the object. Each successive filtering method pushes a new element set onto the stack. If we need an older element set, we can use ',
                                                ' to pop the sets back off of the stack.'
                                              ],
                                 'code' => 'end()'
                               },
                               'Suppose we have a couple short lists on a page:',
                               {
                                 'content' => [
                                                'The ',
                                                ' method is useful primarily when exploiting jQuery\'s chaining properties. When not using chaining, we can usually just call up a previous object by variable name, so we don\'t need to manipulate the stack. With ',
                                                ', though, we can string all the method calls together:'
                                              ],
                                 'code' => [
                                           'end()',
                                           'end()'
                                         ]
                               },
                               {
                                 'code' => [
                                           'foo',
                                           'end()',
                                           'find()',
                                           'find()',
                                           '<ul class="first">',
                                           '<li class="foo">'
                                         ],
                                 'content' => [
                                                'This chain searches for items with the class ',
                                                ' within the first list only and turns their backgrounds red. Then ',
                                                ' returns the object to its state before the call to ',
                                                ', so the second ',
                                                ' looks for \'.bar\' inside ',
                                                ', not just inside that list\'s ',
                                                ', and turns the matching elements\' backgrounds green. The net result is that items 1 and 3 of the first list have a colored background, and none of the items from the second list do.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'A long jQuery chain can be visualized as a structured code block, with filtering methods providing the openings of nested blocks and ',
                                                ' methods closing them:'
                                              ],
                                 'code' => 'end()'
                               },
                               {
                                 'content' => [
                                                'The last ',
                                                ' is unnecessary, as we are discarding the jQuery object immediately thereafter. However, when the code is written in this form, the ',
                                                " provides visual symmetry and a sense of completion \x{2014}making the program, at least to the eyes of some developers, more readable, at the cost of a slight hit to performance as it is an additional function call."
                                              ],
                                 'code' => [
                                           'end()',
                                           'end()'
                                         ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
jQuery.fn.showTags = function( n ) {
  var tags = this.map(function() {
    return this.tagName;
  })
  .get()
  .join( ", " );
  $( "b:eq( " + n + " )" ).text( tags );
  return this;
};

$( "p" )
  .showTags( 0 )
  .find( "span" )
    .showTags( 1 )
    .css( "background", "yellow" )
  .end()
  .showTags( 2 )
  .css( "font-style", "italic" );
',
                         'desc' => 'Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.',
                         'html' => '
<p>
  Hi there <span>how</span> are you <span>doing</span>?
</p>

<p>
  This <span>span</span> is one of
  several <span>spans</span> in this
  <span>sentence</span>.
</p>

<div>
  Tags in jQuery object initially: <b></b>
</div>

<div>
  Tags in jQuery object after find: <b></b>
</div>

<div>
  Tags in jQuery object after end: <b></b>
</div>
',
                         'css' => '
  p, div {
    margin: 1px;
    padding: 1px;
    font-weight: bold;
    font-size: 16px;
  }
  div {
    color: blue;
  }
  b {
    color: red;
  }
'
                       },
                       {
                         'code' => '
$( "p" )
  .find( "span" )
  .end()
  .css( "border", "2px red solid" );
',
                         'html' => '
<p><span>Hello</span>, how are you?</p>
',
                         'desc' => 'Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.',
                         'css' => '
  p {
    margin: 10px;
    padding: 10px;
  }
'
                       }
                     ],
          'signature' => {
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/eq-selector.xml ####
Possible keys are: signature category name type longdesc example desc note return title
$VAR1 = {
          'signature' => [
                         {
                           'sample' => ':eq(index)',
                           'added' => '1.0',
                           'argument' => {
                                         'desc' => 'Zero-based index of the element to match.',
                                         'type' => 'Number',
                                         'name' => 'index'
                                       }
                         },
                         {
                           'argument' => {
                                         'desc' => 'Zero-based index of the element to match, counting backwards from the last element. ',
                                         'name' => 'indexFromEnd',
                                         'type' => 'Integer'
                                       },
                           'added' => '1.8',
                           'sample' => ':eq(-index)'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.8'
                        }
                      ],
          'name' => 'eq',
          'type' => 'selector',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           ':eq()',
                                           ':lt()',
                                           ':gt()',
                                           ':even',
                                           ':odd',
                                           '.myclass',
                                           '0',
                                           '3'
                                         ],
                                 'content' => [
                                                'The index-related selectors (',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ') filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (',
                                                ') and four elements are returned, these elements are given indices ',
                                                ' through ',
                                                ' for the purposes of these selectors.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '$( ".myclass:eq(1)" )',
                                           ':nth-child(n)'
                                         ],
                                 'content' => [
                                                'Note that since JavaScript arrays use ',
                                                ', these selectors reflect that fact. This is why ',
                                                ' selects the second element in the document with the class myclass, rather than the first. In contrast, ',
                                                ' uses ',
                                                ' to conform to the CSS specification.'
                                              ],
                                 'em' => [
                                         '0-based indexing',
                                         '1-based indexing'
                                       ]
                               },
                               {
                                 'content' => [
                                                'Prior to jQuery 1.8, the ',
                                                ' selector did ',
                                                ' accept a negative value for ',
                                                ' (though the ',
                                                ' method did).'
                                              ],
                                 'code' => [
                                           ':eq(index)',
                                           'index'
                                         ],
                                 'em' => 'not',
                                 'a' => {
                                        'code' => '.eq(index)',
                                        'href' => '/eq/'
                                      }
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "td:eq( 2 )" ).css( "color", "red" );
',
                         'desc' => 'Find the third td.',
                         'html' => '
<table border="1">
  <tr><td>TD #0</td><td>TD #1</td><td>TD #2</td></tr>
  <tr><td>TD #3</td><td>TD #4</td><td>TD #5</td></tr>
  <tr><td>TD #6</td><td>TD #7</td><td>TD #8</td></tr>
</table>
'
                       },
                       {
                         'code' => '
// Applies yellow background color to a single <li>
$( "ul.nav li:eq(1)" ).css( "backgroundColor", "#ff0" );

// Applies italics to text of the second <li> within each <ul class="nav">
$( "ul.nav" ).each(function( index ) {
  $( this ).find( "li:eq(1)" ).css( "fontStyle", "italic" );
});

// Applies red text color to descendants of <ul class="nav">
// for each <li> that is the second child of its parent
$( "ul.nav li:nth-child(2)" ).css( "color", "red" );
',
                         'height' => '160',
                         'desc' => {
                                   'content' => [
                                                  'Apply three different styles to list items to demonstrate that ',
                                                  ' is designed to select a single element while ',
                                                  ' or ',
                                                  ' within a looping construct such as ',
                                                  ' can select multiple elements.'
                                                ],
                                   'code' => [
                                             ':eq()',
                                             ':nth-child()',
                                             ':eq()',
                                             '.each()'
                                           ]
                                 },
                         'html' => '
<ul class="nav">
  <li>List 1, item 1</li>
  <li>List 1, item 2</li>
  <li>List 1, item 3</li>
</ul>
<ul class="nav">
  <li>List 2, item 1</li>
  <li>List 2, item 2</li>
  <li>List 2, item 3</li>
</ul>
'
                       },
                       {
                         'code' => '
$( "li:eq(-2)" ).addClass( "foo" )
',
                         'css' => '
  .foo {
    color: blue;
    background-color: yellow;
  }
',
                         'desc' => 'Add a class to List 2, item 2 by targeting the second to last <li> ',
                         'html' => '
<ul class="nav">
  <li>List 1, item 1</li>
  <li>List 1, item 2</li>
  <li>List 1, item 3</li>
</ul>
<ul class="nav">
  <li>List 2, item 1</li>
  <li>List 2, item 2</li>
  <li>List 2, item 3</li>
</ul>
'
                       }
                     ],
          'desc' => {
                    'code' => 'n',
                    'content' => [
                                   'Select the element at index ',
                                   ' within the matched set.'
                                 ]
                  },
          'note' => {
                    'id' => 'jquery-selector-extension-alt',
                    'type' => 'additional',
                    'data-alt' => '$("your-pure-css-selector").eq(index)',
                    'data-selector' => ':eq()'
                  },
          'return' => '',
          'title' => ':eq() Selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/eq.xml ####
Possible keys are: return title desc category type name longdesc example signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.eq()',
          'desc' => 'Reduce the set of matched elements to the one at the specified index.',
          'category' => [
                        {
                          'slug' => 'traversing/filtering'
                        },
                        {
                          'slug' => 'version/1.1.2'
                        }
                      ],
          'type' => 'method',
          'name' => 'eq',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li>list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).eq( 2 ).css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).eq( -2 ).css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).eq( 5 ).css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method constructs a new jQuery object from one element within that set. The supplied index identifies the position of this element in the set. '
                                              ],
                                 'code' => '.eq()'
                               },
                               'Consider a page with a simple list on it:',
                               'We can apply this method to the set of list items:',
                               'The result of this call is a red background for item 3. Note that the supplied index is zero-based, and refers to the position of the element within the jQuery object, not within the DOM tree.',
                               'Providing a negative number indicates a position starting from the end of the set, rather than the beginning. For example:',
                               'This time list item 4 is turned red, since it is two from the end of the set.',
                               {
                                 'content' => [
                                                'If an element cannot be found at the specified zero-based index, the method constructs a new jQuery object with an empty set and a ',
                                                ' property of 0. '
                                              ],
                                 'code' => 'length'
                               },
                               {
                                 'content' => [
                                                'Here, none of the list items is turned red, since ',
                                                ' indicates the sixth of five list items.'
                                              ],
                                 'code' => '.eq( 5 )'
                               }
                             ]
                      },
          'example' => {
                       'css' => '
  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
    border: 2px solid blue;
  }
  .blue {
    background: blue;
  }
',
                       'desc' => 'Turn the div with index 2 blue by adding an appropriate class.',
                       'html' => '
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
',
                       'code' => '
$( "body" ).find( "div" ).eq( 2 ).addClass( "blue" );
'
                     },
          'signature' => [
                         {
                           'added' => '1.1.2',
                           'argument' => {
                                         'type' => 'Integer',
                                         'name' => 'index',
                                         'desc' => 'An integer indicating the 0-based position of the element. '
                                       }
                         },
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'desc' => 'An integer indicating the position of the element, counting backwards from the last element in the set. ',
                                         'name' => 'indexFromEnd',
                                         'type' => 'Integer'
                                       }
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/error.xml ####
Possible keys are: category longdesc example type name deprecated signature title return desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/browser-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.8'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<img alt="Book" id="book">
    '
                                 },
                                 {
                                   'code' => '
$( "#book" )
  .error(function() {
    alert( "Handler for .error() called." )
  })
  .attr( "src", "missing.png" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => '.on( "error", handler )',
                                 'content' => [
                                                'This method is a shortcut for ',
                                                '.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '.error()',
                                           '.on( "error", handler )',
                                           'error'
                                         ],
                                 'content' => [
                                                ', the ',
                                                ' method is deprecated. Use ',
                                                ' to attach event handlers to the ',
                                                ' event instead.'
                                              ],
                                 'b' => 'As of jQuery 1.8'
                               },
                               {
                                 'code' => 'error',
                                 'content' => [
                                                'The ',
                                                ' event is sent to elements, such as images, that are referenced by a document and loaded by the browser. It is called if the element was not loaded correctly.'
                                              ]
                               },
                               'For example, consider a page with a simple image element:',
                               'The event handler can be bound to the image:',
                               'If the image cannot be loaded (for example, because it is not present at the supplied URL), the alert is displayed:',
                               {
                                 'samp' => 'Handler for .error() called.'
                               },
                               {
                                 'code' => [
                                           'error',
                                           'window',
                                           'window',
                                           'error',
                                           'error',
                                           'window.onerror'
                                         ],
                                 'content' => [
                                                'Note: A jQuery ',
                                                ' event handler should not be attached to the ',
                                                ' object. The browser fires the ',
                                                '\'s ',
                                                ' event when a script error occurs. However, the window ',
                                                ' event receives different arguments and has different return value requirements than conventional event handlers. Use ',
                                                ' instead.'
                                              ]
                               }
                             ],
                        'div' => {
                                 'p' => {
                                        'em' => 'must',
                                        'code' => [
                                                  'error',
                                                  'src',
                                                  'error',
                                                  'error',
                                                  'file:'
                                                ],
                                        'content' => [
                                                       'The event handler ',
                                                       ' be attached before the browser fires the ',
                                                       ' event, which is why the example sets the ',
                                                       ' attribute after attaching the handler. Also, the ',
                                                       ' event may not be correctly fired when the page is served locally; ',
                                                       ' relies on HTTP status codes and will generally not be triggered if the URL uses the ',
                                                       ' protocol.'
                                                     ]
                                      },
                                 'class' => 'warning'
                               }
                      },
          'example' => {
                       'desc' => {
                                 'content' => [
                                                'To replace all the missing images with another, you can update the ',
                                                ' attribute inside the callback passed to ',
                                                '. Be sure that the replacement image exists; otherwise the ',
                                                ' event will be triggered indefinitely.'
                                              ],
                                 'code' => [
                                           'src',
                                           '.error()',
                                           'error'
                                         ]
                               },
                       'code' => '
// If missing.png is missing, it is replaced by replacement.png
$( "img" )
  .error(function() {
    $( this ).attr( "src", "replacement.png" );
  })
  .attr( "src", "missing.png" );
'
                     },
          'type' => 'method',
          'name' => 'error',
          'deprecated' => '1.8',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'desc' => 'A function to execute when the event is triggered.',
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     }
                                       }
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'handler' => {
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    },
                                         'eventData' => {
                                                        'type' => 'Anything',
                                                        'optional' => 'true',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      }
                                       }
                         }
                       ],
          'title' => '.error()',
          'return' => 'jQuery',
          'desc' => 'Bind an event handler to the "error" JavaScript event.',
          'note' => {
                    'id' => 'detach-shorthand',
                    'type' => 'additional',
                    'data-event' => 'error'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/even-selector.xml ####
Possible keys are: signature type name longdesc example category desc note sample return title
$VAR1 = {
          'signature' => {
                         'added' => '1.0'
                       },
          'type' => 'selector',
          'name' => 'even',
          'longdesc' => {
                        'p' => {
                               'em' => '0-based indexing',
                               'content' => [
                                              'In particular, note that the ',
                                              ' means that, counter-intuitively, ',
                                              ' selects the first element, third element, and so on within the matched set.'
                                            ],
                               'code' => ':even'
                             }
                      },
          'example' => {
                       'code' => '
$( "tr:even" ).css( "background-color", "#bbf" );
',
                       'css' => '
  table {
    background: #eee;
  }
',
                       'desc' => 'Finds even table rows, matching the first, third and so on (index 0, 2, 4 etc.).',
                       'html' => '
<table border="1">
  <tr><td>Row with Index #0</td></tr>
  <tr><td>Row with Index #1</td></tr>
  <tr><td>Row with Index #2</td></tr>
  <tr><td>Row with Index #3</td></tr>
</table>
'
                     },
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'desc' => {
                    'content' => [
                                   'Selects even elements, zero-indexed.  See also ',
                                   '.'
                                 ],
                    'a' => {
                           'content' => 'odd',
                           'href' => '/Selectors/odd/'
                         }
                  },
          'note' => {
                    'jquery-selector-extension' => {
                                                   'type' => 'additional',
                                                   'data-selector' => ':even'
                                                 },
                    'document-order' => {
                                        'type' => 'additional'
                                      }
                  },
          'sample' => ':even',
          'return' => '',
          'title' => ':even Selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.currentTarget.xml ####
Possible keys are: signature category name type longdesc example desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.3'
                       },
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ],
          'name' => 'event.currentTarget',
          'type' => 'property',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => 'this',
                                 'content' => [
                                                'This property will typically be equal to the ',
                                                ' of the function.'
                                              ]
                               },
                               {
                                 'em' => {
                                         'code' => [
                                                   'this',
                                                   'event.currentTarget'
                                                 ],
                                         'content' => [
                                                        'If you are using ',
                                                        ' or another form of scope manipulation, ',
                                                        ' will be equal to whatever context you have provided, not '
                                                      ],
                                         'a' => {
                                                'content' => 'jQuery.proxy',
                                                'href' => '/jQuery.proxy/'
                                              }
                                       }
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$( "p" ).click(function( event ) {
  alert( event.currentTarget === this ); // true
});
',
                       'desc' => 'Alert that currentTarget matches the `this` keyword.'
                     },
          'desc' => ' The current DOM element within the event bubbling phase.  ',
          'return' => 'Element',
          'title' => 'event.currentTarget'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.data.xml ####
Possible keys are: name type longdesc example category signature return title desc
$VAR1 = {
          'name' => 'event.data',
          'type' => 'property',
          'longdesc' => {},
          'example' => {
                       'desc' => {
                                 'code' => [
                                           'for',
                                           'i',
                                           '.on()'
                                         ],
                                 'content' => [
                                                'Within a ',
                                                ' loop, pass the value of ',
                                                ' to the ',
                                                ' method so that the current iteration\'s value is preserved. '
                                              ]
                               },
                       'html' => '
<button> 0 </button>
<button> 1 </button>
<button> 2 </button>
<button> 3 </button>
<button> 4 </button>

<div id="log"></div>
',
                       'code' => '
var logDiv = $( "#log" );

for ( var i = 0; i < 5; i++ ) {
  $( "button" ).eq( i ).on( "click", { value: i }, function( event ) {
    var msgs = [
      "button = " + $( this ).index(),
      "event.data.value = " + event.data.value,
      "i = " + i
    ];
    logDiv.append( msgs.join( ", " ) + "<br>" );
  });
}
'
                     },
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.1'
                        }
                      ],
          'signature' => {
                         'added' => '1.1'
                       },
          'return' => 'Object',
          'title' => 'event.data',
          'desc' => 'An optional object of data passed to an event method when the current executing handler is bound.  '
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.delegateTarget.xml ####
Possible keys are: desc return title signature name type longdesc example category
$VAR1 = {
          'desc' => 'The element where the currently-called jQuery event handler was attached.',
          'return' => 'Element',
          'title' => 'event.delegateTarget',
          'signature' => {
                         'added' => '1.7'
                       },
          'name' => 'event.delegateTarget',
          'type' => 'property',
          'longdesc' => {
                        'p' => [
                               {
                                 'a' => [
                                        {
                                          'code' => '.delegate()',
                                          'href' => '/delegate/'
                                        },
                                        {
                                          'code' => '.on()',
                                          'href' => '/on/'
                                        }
                                      ],
                                 'content' => [
                                                'This property is most often useful in delegated events attached by ',
                                                ' or ',
                                                ', where the event handler is attached at an ancestor of the element being processed. It can be used, for example, to identify and remove event handlers at the delegation point.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'event.delegateTarget',
                                           'event.currentTarget'
                                         ],
                                 'content' => [
                                                'For non-delegated event handlers attached directly to an element, ',
                                                ' will always be equal to ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$( ".box" ).on( "click", "button", function( event ) {
  $( event.delegateTarget ).css( "background-color", "red" );
});
',
                       'desc' => 'When a button in any box class is clicked, change the box\'s background color to red.'
                     },
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'events'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ]
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.isDefaultPrevented.xml ####
Possible keys are: signature longdesc example type name category desc title return
$VAR1 = {
          'signature' => {
                         'added' => '1.3'
                       },
          'longdesc' => {},
          'example' => {
                       'desc' => 'Checks whether event.preventDefault() was called.',
                       'code' => '
$( "a" ).click(function( event ) {
  alert( event.isDefaultPrevented() ); // false
  event.preventDefault();
  alert( event.isDefaultPrevented() ); // true
});
'
                     },
          'type' => 'method',
          'name' => 'event.isDefaultPrevented',
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ],
          'desc' => {
                    'content' => [
                                   'Returns whether ',
                                   ' was ever called on this event object. '
                                 ],
                    'a' => {
                           'href' => '/event.preventDefault/',
                           'content' => 'event.preventDefault()'
                         }
                  },
          'title' => 'event.isDefaultPrevented()',
          'return' => 'Boolean'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.isImmediatePropagationStopped.xml ####
Possible keys are: desc return title signature category name type longdesc example
$VAR1 = {
          'desc' => '  Returns whether event.stopImmediatePropagation() was ever called on this event object. ',
          'return' => 'Boolean',
          'title' => 'event.isImmediatePropagationStopped()',
          'signature' => {
                         'added' => '1.3'
                       },
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ],
          'name' => 'event.isImmediatePropagationStopped',
          'type' => 'method',
          'longdesc' => {
                        'p' => {
                               'a' => {
                                      'content' => 'DOM level 3',
                                      'href' => 'http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped'
                                    },
                               'content' => [
                                              'This property was introduced in ',
                                              '.'
                                            ]
                             }
                      },
          'example' => {
                       'code' => '
function immediatePropStopped( event ) {
  var msg = "";
  if ( event.isImmediatePropagationStopped() ) {
    msg = "called";
  } else {
    msg = "not called";
  }
  $( "#stop-log" ).append( "<div>" + msg + "</div>" );
}

$( "button" ).click(function( event ) {
  immediatePropStopped( event );
  event.stopImmediatePropagation();
  immediatePropStopped( event );
});
',
                       'desc' => 'Checks whether event.stopImmediatePropagation() was called.',
                       'html' => '
<button>click me</button>
<div id="stop-log"></div>
  '
                     }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.isPropagationStopped.xml ####
Possible keys are: category example longdesc name type signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ],
          'example' => {
                       'html' => '
<button>click me</button>
<div id="stop-log"></div>
  ',
                       'desc' => 'Checks whether event.stopPropagation() was called',
                       'code' => '
function propStopped( event ) {
  var msg = "";
  if ( event.isPropagationStopped() ) {
    msg = "called";
  } else {
    msg = "not called";
  }
  $( "#stop-log" ).append( "<div>" + msg + "</div>" );
}

$( "button" ).click(function(event) {
  propStopped( event );
  event.stopPropagation();
  propStopped( event );
});
'
                     },
          'longdesc' => {
                        'p' => {
                               'a' => {
                                      'content' => 'W3C DOM Level 3 specification',
                                      'href' => 'http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped'
                                    },
                               'content' => [
                                              'This event method is described in the ',
                                              '.'
                                            ]
                             }
                      },
          'name' => 'event.isPropagationStopped',
          'type' => 'method',
          'signature' => {
                         'added' => '1.3'
                       },
          'title' => 'event.isPropagationStopped()',
          'return' => 'Boolean',
          'desc' => {
                    'content' => [
                                   '  Returns whether ',
                                   ' was ever called on this event object. '
                                 ],
                    'a' => {
                           'href' => '/event.stopPropagation/',
                           'content' => 'event.stopPropagation()'
                         }
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.metaKey.xml ####
Possible keys are: desc return title signature type name longdesc example category
$VAR1 = {
          'desc' => 'Indicates whether the META key was pressed when the event fired.',
          'return' => 'Boolean',
          'title' => 'event.metaKey',
          'signature' => {
                         'added' => '1.0.4'
                       },
          'type' => 'property',
          'name' => 'event.metaKey',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Returns a boolean value (',
                                                ' or ',
                                                ') that indicates whether or not the ',
                                                ' key was pressed at the time the event fired.
    This key might map to an alternative key name on some platforms.'
                                              ],
                                 'code' => [
                                           'true',
                                           'false'
                                         ],
                                 'kbd' => 'META'
                               },
                               {
                                 'content' => [
                                                'On Macintosh keyboards, the ',
                                                ' key maps to the ',
                                                '.'
                                              ],
                                 'kbd' => 'META',
                                 'a' => {
                                        'content' => "Command key (\x{2318})",
                                        'href' => 'http://en.wikipedia.org/wiki/Command_key'
                                      }
                               },
                               {
                                 'a' => {
                                        'href' => 'http://en.wikipedia.org/wiki/Windows_key',
                                        'content' => 'Windows key'
                                      },
                                 'content' => [
                                                'On Windows keyboards, the ',
                                                ' key maps to the ',
                                                '.'
                                              ],
                                 'kbd' => 'META'
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$( "#checkMetaKey" ).click(function( event ) {
  $( "#display" ).text( event.metaKey );
});
',
                       'html' => '
<button value="Test" name="Test" id="checkMetaKey">Click me!</button>
<div id="display"></div>
',
                       'desc' => 'Determine whether the META key was pressed when the event fired.',
                       'css' => '
  body {
    background-color: #eef;
  }
  div {
    padding: 20px;
  }
'
                     },
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.0.4'
                        }
                      ]
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.namespace.xml ####
Possible keys are: signature category type name longdesc example desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.4.3'
                       },
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'type' => 'property',
          'name' => 'event.namespace',
          'longdesc' => {
                        'p' => 'This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.'
                      },
          'example' => {
                       'code' => '
$( "p" ).on( "test.something", function( event ) {
  alert( event.namespace );
});
$( "button" ).click(function( event ) {
  $( "p" ).trigger( "test.something" );
});
',
                       'html' => '
<button>display event.namespace</button>
<p></p>
',
                       'desc' => 'Determine the event namespace used.'
                     },
          'desc' => 'The namespace specified when the event was triggered.',
          'return' => 'String',
          'title' => 'event.namespace'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.pageX.xml ####
Possible keys are: return title desc name type example longdesc category signature
$VAR1 = {
          'return' => 'Number',
          'title' => 'event.pageX',
          'desc' => 'The mouse position relative to the left edge of the document.',
          'name' => 'event.pageX',
          'type' => 'property',
          'example' => {
                       'code' => '
$( document ).on( "mousemove", function( event ) {
  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
});
',
                       'html' => '
<div id="log"></div>
',
                       'desc' => 'Show the mouse position relative to the left and top edges of the document (within this iframe).',
                       'css' => '
  body {
    background-color: #eef;
  }
  div {
    padding: 20px;
  }
'
                     },
          'longdesc' => {},
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.0.4'
                        }
                      ],
          'signature' => {
                         'added' => '1.0.4'
                       }
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.pageY.xml ####
Possible keys are: longdesc example type name category signature title return desc
$VAR1 = {
          'longdesc' => {},
          'example' => {
                       'code' => '
$( document ).on( "mousemove", function( event ) {
  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
});
',
                       'html' => '
<div id="log"></div>
',
                       'desc' => 'Show the mouse position relative to the left and top edges of the document (within this iframe).',
                       'css' => '
  body {
    background-color: #eef;
  }
  div {
    padding: 20px;
  }
'
                     },
          'type' => 'property',
          'name' => 'event.pageY',
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.0.4'
                        }
                      ],
          'signature' => {
                         'added' => '1.0.4'
                       },
          'title' => 'event.pageY',
          'return' => 'Number',
          'desc' => 'The mouse position relative to the top edge of the document.'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.preventDefault.xml ####
Possible keys are: title return desc longdesc example name type category signature
$VAR1 = {
          'title' => 'event.preventDefault()',
          'return' => 'undefined',
          'desc' => 'If this method is called, the default action of the event will not be triggered.',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'For example, clicked anchors will not take the browser to a new URL. We can use ',
                                              ' to determine if this method has been called by an event handler that was triggered by this event.'
                                            ],
                               'a' => {
                                      'code' => 'event.isDefaultPrevented()',
                                      'href' => '/event.isDefaultPrevented/'
                                    }
                             }
                      },
          'example' => {
                       'code' => '
$( "a" ).click(function( event ) {
  event.preventDefault();
  $( "<div>" )
    .append( "default " + event.type + " prevented" )
    .appendTo( "#log" );
});
',
                       'html' => '
<a href="http://jquery.com">default click action is prevented</a>
<div id="log"></div>
',
                       'desc' => 'Cancel the default action (navigation) of the click.'
                     },
          'name' => 'event.preventDefault',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.relatedTarget.xml ####
Possible keys are: return title desc category name type longdesc example signature
$VAR1 = {
          'return' => 'Element',
          'title' => 'event.relatedTarget',
          'desc' => 'The other DOM element involved in the event, if any.',
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.1.4'
                        }
                      ],
          'name' => 'event.relatedTarget',
          'type' => 'property',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'For ',
                                              ', indicates the element being entered; for ',
                                              ', indicates the element being exited. '
                                            ],
                               'code' => [
                                         'mouseout',
                                         'mouseover'
                                       ]
                             }
                      },
          'example' => {
                       'desc' => 'On mouseout of anchors, alert the element type being entered.',
                       'code' => '
$( "a" ).mouseout(function( event ) {
  alert( event.relatedTarget.nodeName ); // "DIV"
});
'
                     },
          'signature' => {
                         'added' => '1.1.4'
                       }
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.result.xml ####
Possible keys are: category type name longdesc example signature return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ],
          'type' => 'property',
          'name' => 'event.result',
          'longdesc' => {
                        'p' => 'This property can be useful for getting previous return values of custom events. '
                      },
          'example' => {
                       'desc' => 'Display previous handler\'s return value',
                       'html' => '
<button>display event.result</button>
<p></p>
',
                       'code' => '
$( "button" ).click(function( event ) {
  return "hey";
});
$( "button" ).click(function( event ) {
  $( "p" ).html( event.result );
});
'
                     },
          'signature' => {
                         'added' => '1.3'
                       },
          'return' => 'Object',
          'title' => 'event.result',
          'desc' => {
                    'code' => 'undefined',
                    'content' => [
                                   'The last value returned by an event handler that was triggered by this event, unless the value was ',
                                   '.'
                                 ]
                  }
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.stopImmediatePropagation.xml ####
Possible keys are: note desc return title signature category name type longdesc example
$VAR1 = {
          'note' => {
                    'type' => 'additional',
                    'id' => 'propagation-for-live-or-delegate'
                  },
          'desc' => 'Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.',
          'return' => '',
          'title' => 'event.stopImmediatePropagation()',
          'signature' => {
                         'added' => '1.3'
                       },
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ],
          'name' => 'event.stopImmediatePropagation',
          'type' => 'method',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           'event.stopPropagation()',
                                           {
                                             'a' => {
                                                    'href' => '/event.stopPropagation/',
                                                    'content' => 'event.stopPropagation()'
                                                  }
                                           }
                                         ],
                                 'content' => [
                                                'In addition to keeping any additional handlers on an element from being executed, this method also stops the bubbling by implicitly calling ',
                                                '. To simply prevent the event from bubbling to ancestor elements but allow other event handlers to execute on the same element, we can use ',
                                                ' instead.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Use ',
                                                ' to know whether this method was ever called (on that event object).'
                                              ],
                                 'code' => {
                                           'a' => {
                                                  'href' => '/event.isImmediatePropagationStopped/',
                                                  'content' => 'event.isImmediatePropagationStopped()'
                                                }
                                         }
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$( "p" ).click(function( event ) {
  event.stopImmediatePropagation();
});
$( "p" ).click(function( event ) {
  // This function won\'t be executed
  $( this ).css( "background-color", "#f00" );
});
$( "div" ).click(function( event ) {
  // This function will be executed
  $( this ).css( "background-color", "#f00" );
});
',
                       'css' => '
  p {
    height: 30px;
    width: 150px;
    background-color: #ccf;
  }
  div {
    height: 30px;
    width: 150px;
    background-color: #cfc;
  }
',
                       'html' => '
<p>paragraph</p>
<div>division</div>
',
                       'desc' => 'Prevents other event handlers from being called.'
                     }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.stopPropagation.xml ####
Possible keys are: return title desc note type name longdesc example category signature
$VAR1 = {
          'return' => '',
          'title' => 'event.stopPropagation()',
          'desc' => 'Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'propagation-for-live-or-delegate'
                  },
          'type' => 'method',
          'name' => 'event.stopPropagation',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => {
                                           'a' => {
                                                  'content' => 'event.isPropagationStopped()',
                                                  'href' => '/event.isPropagationStopped/'
                                                }
                                         },
                                 'content' => [
                                                'We can use ',
                                                ' to determine if this method was ever called (on that event object). '
                                              ]
                               },
                               {
                                 'a' => {
                                        'content' => 'trigger()',
                                        'href' => '/trigger/'
                                      },
                                 'content' => [
                                                'This method works for custom events triggered with ',
                                                ' as well.'
                                              ]
                               },
                               {
                                 'em' => 'on the same element',
                                 'content' => [
                                                'Note that this will not prevent other handlers ',
                                                ' from running. '
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$( "p" ).click(function( event ) {
  event.stopPropagation();
  // Do something
});
',
                       'desc' => 'Kill the bubbling on the click event.'
                     },
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.target.xml ####
Possible keys are: signature name type longdesc example category desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.0'
                       },
          'name' => 'event.target',
          'type' => 'property',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The ',
                                              ' property can be the element that registered for the event or a descendant of it.  It is often useful to compare ',
                                              ' to ',
                                              ' in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.'
                                            ],
                               'code' => [
                                         'target',
                                         'event.target',
                                         'this'
                                       ]
                             }
                      },
          'example' => [
                       {
                         'code' => '
$( "body" ).click(function( event ) {
  $( "#log" ).html( "clicked: " + event.target.nodeName );
});
',
                         'desc' => 'Display the tag\'s name on click',
                         'html' => '
<div id="log"></div>
<div>
  <p>
    <strong><span>click</span></strong>
  </p>
</div>
',
                         'css' => '
  span, strong, p {
    padding: 8px;
    display: block;
    border: 1px solid #999;
  }
'
                       },
                       {
                         'desc' => 'Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.',
                         'html' => '
<ul>
  <li>item 1
    <ul>
      <li>sub item 1-a</li>
      <li>sub item 1-b</li>
    </ul>
  </li>
  <li>item 2
    <ul>
      <li>sub item 2-a</li>
      <li>sub item 2-b</li>
    </ul>
  </li>
</ul>
',
                         'code' => '
function handler( event ) {
  var target = $( event.target );
  if ( target.is( "li" ) ) {
    target.children().toggle();
  }
}
$( "ul" ).click( handler ).find( "ul" ).hide();
'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'desc' => ' The DOM element that initiated the event.  ',
          'return' => 'Element',
          'title' => 'event.target'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.timeStamp.xml ####
Possible keys are: category longdesc example name type signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.2.6'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           'event.timeStamp',
                                           '(new Date).getTime()'
                                         ],
                                 'content' => [
                                                'This property can be useful for profiling event performance by getting the ',
                                                ' value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use ',
                                                ' instead.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'content' => 'bug open since 2004',
                                        'href' => 'https://bugzilla.mozilla.org/show_bug.cgi?id=238041'
                                      },
                                 'content' => [
                                                'Note: Due to a ',
                                                ', this value is not populated correctly in Firefox and it is not possible to know the time the event was created in that browser.'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'desc' => 'Display the time since the click handler last executed.',
                       'html' => '
<div>Click.</div>
',
                       'css' => '
  div {
    height: 100px;
    width: 300px;
    margin: 10px;
    background-color: #ffd;
    overflow: auto;
  }
',
                       'code' => '
var last, diff;
$( "div" ).click(function( event ) {
  if ( last ) {
    diff = event.timeStamp - last;
    $( "div" ).append( "time since last event: " + diff + "<br>" );
  } else {
    $( "div" ).append( "Click again.<br>" );
  }
  last = event.timeStamp;
});
'
                     },
          'name' => 'event.timeStamp',
          'type' => 'property',
          'signature' => {
                         'added' => '1.2.6'
                       },
          'title' => 'event.timeStamp',
          'return' => 'Number',
          'desc' => 'The difference in milliseconds between the time the browser created the event and January 1, 1970.'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.type.xml ####
Possible keys are: desc title return signature category example longdesc type name
$VAR1 = {
          'desc' => 'Describes the nature of the event.',
          'title' => 'event.type',
          'return' => 'String',
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => {
                       'code' => '
$( "a" ).click(function( event ) {
  alert( event.type ); // "click"
});
',
                       'desc' => 'On all anchor clicks, alert the event type.'
                     },
          'longdesc' => {},
          'type' => 'property',
          'name' => 'event.type'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/event.which.xml ####
Possible keys are: signature example longdesc name type category desc title return
$VAR1 = {
          'signature' => {
                         'added' => '1.1.3'
                       },
          'example' => [
                       {
                         'code' => '
$( "#whichkey" ).on( "keydown", function( event ) {
  $( "#log" ).html( event.type + ": " +  event.which );
});
',
                         'desc' => 'Log which key was depressed.',
                         'html' => '
<input id="whichkey" value="type something">
<div id="log"></div>
'
                       },
                       {
                         'html' => '
<input id="whichkey" value="click here">
<div id="log"></div>
',
                         'desc' => 'Log which mouse button was depressed.',
                         'code' => '
$( "#whichkey" ).on( "mousedown", function( event ) {
  $( "#log" ).html( event.type + ": " +  event.which );
});
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' property normalizes ',
                                                ' and ',
                                                '. It is recommended to watch ',
                                                ' for keyboard key input. For more detail, read about ',
                                                '. '
                                              ],
                                 'code' => [
                                           'event.which',
                                           'event.keyCode',
                                           'event.charCode',
                                           'event.which'
                                         ],
                                 'a' => {
                                        'content' => 'event.charCode on the MDN',
                                        'href' => 'https://developer.mozilla.org/en/DOM/event.charCode#Notes'
                                      }
                               },
                               {
                                 'content' => [
                                                ' also normalizes button presses (',
                                                ' and ',
                                                'events), reporting ',
                                                ' for left button, ',
                                                ' for middle, and ',
                                                ' for right. Use ',
                                                ' instead of ',
                                                '.  '
                                              ],
                                 'code' => [
                                           'event.which',
                                           'mousedown',
                                           'mouseup',
                                           '1',
                                           '2',
                                           '3',
                                           'event.which',
                                           'event.button'
                                         ]
                               }
                             ]
                      },
          'name' => 'event.which',
          'type' => 'property',
          'category' => [
                        {
                          'slug' => 'events/event-object'
                        },
                        {
                          'slug' => 'version/1.1.3'
                        }
                      ],
          'desc' => 'For key or mouse events, this property indicates the specific key or button that was pressed.',
          'title' => 'event.which',
          'return' => 'Number'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/fadeIn.xml ####
Possible keys are: desc note return title signature name type longdesc example category
$VAR1 = {
          'desc' => 'Display the matched elements by fading them to opaque.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery.fx.off',
                    'data-title' => '.fadeIn()'
                  },
          'return' => 'jQuery',
          'title' => '.fadeIn()',
          'signature' => [
                         {
                           'xi:include' => [
                                           {
                                             'href' => '../includes/duration-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/complete-argument.xml'
                                           }
                                         ],
                           'added' => '1.0'
                         },
                         {
                           'xi:include' => {
                                           'href' => '../includes/options-argument.xml',
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                         },
                           'added' => '1.0'
                         },
                         {
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/easing-argument.xml'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ],
                           'added' => '1.4.3'
                         }
                       ],
          'name' => 'fadeIn',
          'type' => 'method',
          'longdesc' => {
                        'h4' => {
                                'callback-function' => {
                                                       'content' => 'Callback Function'
                                                     },
                                'easing' => {
                                            'content' => 'Easing'
                                          }
                              },
                        'figure' => {
                                    'figcaption' => {
                                                    'content' => [
                                                                   'Figure 1 - Illustration of the ',
                                                                   ' effect'
                                                                 ],
                                                    'code' => 'fadeIn()'
                                                  },
                                    'img' => [
                                             {
                                               'src' => '/resources/0042_06_33.png',
                                               'class' => 'column three',
                                               'alt' => ''
                                             },
                                             {
                                               'src' => '/resources/0042_06_34.png',
                                               'class' => 'column three',
                                               'alt' => ''
                                             },
                                             {
                                               'alt' => '',
                                               'src' => '/resources/0042_06_35.png',
                                               'class' => 'column three'
                                             },
                                             {
                                               'alt' => '',
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_36.png'
                                             }
                                           ]
                                  },
                        'pre' => {
                                 'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123">

// With the element initially hidden, we can show it slowly:
$( "#clickme" ).click(function() {
  $( "#book" ).fadeIn( "slow", function() {
    // Animation complete
  });
});
    '
                               },
                        'p' => [
                               {
                                 'code' => [
                                           '.fadeIn()',
                                           {
                                             'a' => {
                                                    'content' => '.fadeTo()',
                                                    'href' => '/fadeTo/'
                                                  }
                                           }
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method animates the opacity of the matched elements. It is similar to the ',
                                                ' method but that method does not unhide the element and can specify the final opacity level.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively. If any other string is supplied, or if the ',
                                                ' parameter is omitted, the default duration of  ',
                                                ' milliseconds is used.'
                                              ],
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600',
                                           'duration',
                                           '400'
                                         ]
                               },
                               'We can animate any element, such as a simple image:',
                               {
                                 'strong' => 'As of jQuery 1.4.3',
                                 'content' => [
                                                ', an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ],
                                 'a' => {
                                        'href' => 'http://jqueryui.com',
                                        'content' => 'jQuery UI suite'
                                      }
                               },
                               {
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole. '
                                              ],
                                 'code' => 'this'
                               },
                               {
                                 'content' => [
                                                ', the ',
                                                ' method can be used in conjunction with the ',
                                                ' method to execute a single callback for the animation as a whole when ',
                                                ' matching elements have completed their animations ( See the ',
                                                ' ).  '
                                              ],
                                 'strong' => 'As of jQuery 1.6',
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '.promise()',
                                                    'href' => '/promise/'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'content' => 'deferred.done()',
                                                    'href' => '/deferred.done/'
                                                  }
                                           }
                                         ],
                                 'em' => 'all',
                                 'a' => {
                                        'href' => '/promise/#example-1',
                                        'content' => 'example for .promise()'
                                      }
                               }
                             ]
                      },
          'example' => [
                       {
                         'desc' => 'Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.',
                         'html' => '
<span>Click here...</span>
<div id="one"></div>
<div id="two"></div>
<div id="three"></div>
',
                         'css' => '
  span {
    color: red;
    cursor: pointer;
  }
  div {
    margin: 3px;
    width: 80px;
    display: none;
    height: 80px;
    float: left;
  }
  #one {
    background: #f00;
  }
  #two {
    background: #0f0;
  }
  #three {
    background: #00f;
  }
',
                         'code' => '
$( document.body ).click(function() {
  $( "div:hidden:first" ).fadeIn( "slow" );
});
'
                       },
                       {
                         'code' => '
$( "a" ).click(function() {
  $( "div" ).fadeIn( 3000, function() {
    $( "span" ).fadeIn( 100 );
  });
  return false;
});
',
                         'css' => '
  p {
    position: relative;
    width: 400px;
    height: 90px;
  }
  div {
    position: absolute;
    width: 400px;
    height: 65px;
    font-size: 36px;
    text-align: center;
    color: yellow;
    background: red;
    padding-top: 25px;
    top: 0;
    left: 0;
    display: none;
  }
  span {
    display: none;
  }
',
                         'desc' => 'Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.',
                         'html' => '
<p>
  Let it be known that the party of the first part
  and the party of the second part are henceforth
  and hereto directed to assess the allegations
  for factual correctness... (<a href="#">click!</a>)
  <div><span>CENSORED!</span></div>
</p>
'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'effects/fading'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/fadeOut.xml ####
Possible keys are: signature category example longdesc type name note desc title return
$VAR1 = {
          'signature' => [
                         {
                           'added' => '1.0',
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ]
                         },
                         {
                           'added' => '1.0',
                           'xi:include' => {
                                           'href' => '../includes/options-argument.xml',
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                         }
                         },
                         {
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'href' => '../includes/easing-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ],
                           'added' => '1.4.3'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'effects/fading'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'example' => [
                       {
                         'code' => '
$( "p" ).click(function() {
  $( "p" ).fadeOut( "slow" );
});
',
                         'desc' => 'Animates all paragraphs to fade out, completing the animation within 600 milliseconds.',
                         'html' => '
<p>
  If you click on this paragraph
  you\'ll see it just fade away.
</p>
',
                         'css' => '
  p {
    font-size: 150%;
    cursor: pointer;
  }
'
                       },
                       {
                         'html' => '
<h3>Find the modifiers - <div></div></h3>
<p>
  If you <span>really</span> want to go outside
  <span>in the cold</span> then make sure to wear
  your <span>warm</span> jacket given to you by
  your <span>favorite</span> teacher.
</p>
',
                         'desc' => 'Fades out spans in one section that you click on.',
                         'css' => '
  span {
    cursor: pointer;
  }
  span.hilite {
    background: yellow;
  }
  div {
    display: inline;
    color: red;
  }
',
                         'code' => '
$( "span" ).click(function() {
  $( this ).fadeOut( 1000, function() {
    $( "div" ).text( "\'" + $( this ).text() + "\' has faded!" );
    $( this ).remove();
  });
});
$( "span" ).hover(function() {
  $( this ).addClass( "hilite" );
}, function() {
  $( this ).removeClass( "hilite" );
});
'
                       },
                       {
                         'desc' => 'Fades out two divs, one with a "linear" easing and one with the default, "swing," easing.',
                         'html' => '
<button id="btn1">fade out</button>
<button id="btn2">show</button>

<div id="log"></div>

<div id="box1" class="box">linear</div>
<div id="box2" class="box">swing</div>
',
                         'css' => '
  .box,
  button {
    float: left;
    margin: 5px 10px 5px 0;
  }
  .box {
    height: 80px;
    width: 80px;
    background: #090;
  }
  #log {
    clear: left;
  }
',
                         'code' => '
$( "#btn1" ).click(function() {
  function complete() {
    $( "<div>" ).text( this.id ).appendTo( "#log" );
  }
  $( "#box1" ).fadeOut( 1600, "linear", complete );
  $( "#box2" ).fadeOut( 1600, complete );
});

$( "#btn2" ).click(function() {
  $( "div" ).show();
  $( "#log" ).empty();
});
'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123">
    '
                                 },
                                 {
                                   'code' => '
$( "#clickme" ).click(function() {
  $( "#book" ).fadeOut( "slow", function() {
    // Animation complete.
  });
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.fadeOut()',
                                           'display',
                                           'none'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method animates the opacity of the matched elements. Once the opacity reaches 0, the ',
                                                ' style property is set to ',
                                                ', so the element no longer affects the layout of the page.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively. If any other string is supplied, or if the ',
                                                ' parameter is omitted, the default duration of  ',
                                                ' milliseconds is used.'
                                              ],
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600',
                                           'duration',
                                           '400'
                                         ]
                               },
                               'We can animate any element, such as a simple image:',
                               'With the element initially shown, we can hide it slowly:',
                               {
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ],
                                 'strong' => 'As of jQuery 1.4.3',
                                 'content' => [
                                                ', an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'a' => {
                                        'content' => 'jQuery UI suite',
                                        'href' => 'http://jqueryui.com'
                                      }
                               },
                               {
                                 'code' => 'this',
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.'
                                              ]
                               },
                               {
                                 'strong' => 'As of jQuery 1.6',
                                 'content' => [
                                                ', the ',
                                                ' method can be used in conjunction with the ',
                                                ' method to execute a single callback for the animation as a whole when ',
                                                ' matching elements have completed their animations ( See the ',
                                                ' ).  '
                                              ],
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '.promise()',
                                                    'href' => '/promise/'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'href' => '/deferred.done/',
                                                    'content' => 'deferred.done()'
                                                  }
                                           }
                                         ],
                                 'em' => 'all',
                                 'a' => {
                                        'content' => 'example for .promise()',
                                        'href' => '/promise/#example-1'
                                      }
                               }
                             ],
                        'h4' => {
                                'callback-function' => {
                                                       'content' => 'Callback Function'
                                                     },
                                'easing' => {
                                            'content' => 'Easing'
                                          }
                              },
                        'figure' => {
                                    'figcaption' => {
                                                    'code' => 'fadeOut()',
                                                    'content' => [
                                                                   'Figure 1 - Illustration of the ',
                                                                   ' effect'
                                                                 ]
                                                  },
                                    'img' => [
                                             {
                                               'src' => '/resources/0042_06_37.png',
                                               'class' => 'column three',
                                               'alt' => ''
                                             },
                                             {
                                               'alt' => '',
                                               'src' => '/resources/0042_06_38.png',
                                               'class' => 'column three'
                                             },
                                             {
                                               'alt' => '',
                                               'src' => '/resources/0042_06_39.png',
                                               'class' => 'column three'
                                             },
                                             {
                                               'alt' => '',
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_40.png'
                                             }
                                           ]
                                  },
                        'div' => {
                                 'p' => {
                                        'a' => {
                                               'content' => ' :hidden Selector',
                                               'href' => '/hidden-selector/'
                                             },
                                        'code' => '.fadeOut()',
                                        'strong' => 'Note: ',
                                        'content' => [
                                                       'To avoid unnecessary DOM manipulation, ',
                                                       ' will not hide an element that is already considered hidden. For information on which elements jQuery considers hidden, see ',
                                                       '.'
                                                     ]
                                      },
                                 'class' => 'warning'
                               }
                      },
          'type' => 'method',
          'name' => 'fadeOut',
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery.fx.off',
                    'data-title' => '.fadeOut()'
                  },
          'desc' => 'Hide the matched elements by fading them to transparent.',
          'title' => '.fadeOut()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/fadeTo.xml ####
Possible keys are: return title note desc category type name longdesc example signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.fadeTo()',
          'note' => {
                    'data-title' => '.fadeTo()',
                    'type' => 'additional',
                    'id' => 'jquery.fx.off'
                  },
          'desc' => 'Adjust the opacity of the matched elements.',
          'category' => [
                        {
                          'slug' => 'effects/fading'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'type' => 'method',
          'name' => 'fadeTo',
          'longdesc' => {
                        'figure' => {
                                    'figcaption' => {
                                                    'content' => [
                                                                   'Figure 1 - Illustration of the ',
                                                                   ' effect'
                                                                 ],
                                                    'code' => 'fadeTo()'
                                                  },
                                    'img' => [
                                             {
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_41.png',
                                               'alt' => ''
                                             },
                                             {
                                               'src' => '/resources/0042_06_42.png',
                                               'class' => 'column three',
                                               'alt' => ''
                                             },
                                             {
                                               'alt' => '',
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_43.png'
                                             },
                                             {
                                               'alt' => '',
                                               'src' => '/resources/0042_06_44.png',
                                               'class' => 'column three'
                                             }
                                           ]
                                  },
                        'pre' => {
                                 'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123">
// With the element initially shown, we can dim it slowly:
$( "#clickme" ).click(function() {
  $( "#book" ).fadeTo( "slow" , 0.5, function() {
    // Animation complete.
  });
});
    '
                               },
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method animates the opacity of the matched elements. It is similar to the ',
                                                ' method but that method unhides the element and always fades to 100% opacity.'
                                              ],
                                 'code' => [
                                           '.fadeTo()',
                                           {
                                             'a' => {
                                                    'content' => '.fadeIn()',
                                                    'href' => '/fadeIn/'
                                                  }
                                           }
                                         ]
                               },
                               {
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600',
                                           '400',
                                           '.fadeTo()',
                                           'duration'
                                         ],
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively. If any other string is supplied, the default duration of  ',
                                                ' milliseconds is used. Unlike the other effect methods, ',
                                                ' requires that ',
                                                ' be explicitly specified.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.'
                                              ],
                                 'code' => 'this'
                               },
                               'We can animate any element, such as a simple image:',
                               {
                                 'code' => [
                                           'duration',
                                           '0',
                                           'opacity',
                                           '.fadeTo( 0, opacity )',
                                           '.css( "opacity", opacity )'
                                         ],
                                 'content' => [
                                                'With ',
                                                ' set to ',
                                                ', this method just changes the ',
                                                ' CSS property, so ',
                                                ' is the same as ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "p:first" ).click(function() {
  $( this ).fadeTo( "slow", 0.33 );
});
',
                         'desc' => 'Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.',
                         'html' => '
<p>
Click this paragraph to see it fade.
</p>

<p>
Compare to this one that won\'t fade.
</p>
'
                       },
                       {
                         'css' => '
  p {
    width: 80px;
    margin: 0;
    padding: 5px;
  }
  div {
    width: 40px;
    height: 40px;
    position: absolute;
  }
  #one {
    top: 0;
    left: 0;
    background: #f00;
  }
  #two {
    top: 20px;
    left: 20px;
    background: #0f0;
  }
  #three {
    top: 40px;
    left:40px;
    background:#00f;
  }
',
                         'desc' => 'Fade div to a random opacity on each click, completing the animation within 200 milliseconds.',
                         'html' => '
<p>And this is the library that John built...</p>

<div id="one"></div>
<div id="two"></div>
<div id="three"></div>
',
                         'code' => '
$( "div" ).click(function() {
  $( this ).fadeTo( "fast", Math.random() );
});
'
                       },
                       {
                         'css' => '
  div, p {
    width: 80px;
    height: 40px;
    top: 0;
    margin: 0;
    position: absolute;
    padding-top: 8px;
  }
  p {
    background: #fcc;
    text-align: center;
  }
  div {
    background: blue;
  }
',
                         'html' => '
<p>Wrong</p>
<div></div>
<p>Wrong</p>
<div></div>
<p>Right!</p>
<div></div>
',
                         'desc' => 'Find the right answer! The fade will take 250 milliseconds and change various styles when it completes.',
                         'code' => '
var getPos = function( n ) {
  return (Math.floor( n ) * 90) + "px";
};
$( "p" ).each(function( n ) {
  var r = Math.floor( Math.random() * 3 );
  var tmp = $( this ).text();
  $( this ).text( $( "p:eq(" + r + ")" ).text() );
  $( "p:eq(" + r + ")" ).text( tmp );
  $( this ).css( "left", getPos( n ) );
});
$( "div" )
  .each(function( n ) {
    $( this ).css( "left", getPos( n ) );
  })
  .css( "cursor", "pointer" )
  .click( function() {
    $( this ).fadeTo( 250, 0.25, function() {
      $( this )
        .css( "cursor", "" )
        .prev()
          .css({
            "font-weight": "bolder",
            "font-style": "italic"
          });
    });
  });
'
                       }
                     ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'duration' => {
                                                       'desc' => 'A string or number determining how long the animation will run.',
                                                       'type' => {
                                                                 'Number' => {},
                                                                 'String' => {}
                                                               }
                                                     },
                                         'opacity' => {
                                                      'type' => 'Number',
                                                      'desc' => 'A number between 0 and 1 denoting the target opacity.'
                                                    },
                                         'complete' => {
                                                       'optional' => 'true',
                                                       'type' => 'Function',
                                                       'desc' => 'A function to call once the animation is complete.'
                                                     }
                                       }
                         },
                         {
                           'argument' => {
                                         'duration' => {
                                                       'type' => {
                                                                 'String' => {},
                                                                 'Number' => {}
                                                               },
                                                       'desc' => 'A string or number determining how long the animation will run.'
                                                     },
                                         'opacity' => {
                                                      'type' => 'Number',
                                                      'desc' => 'A number between 0 and 1 denoting the target opacity.'
                                                    },
                                         'easing' => {
                                                     'desc' => 'A string indicating which easing function to use for the transition.',
                                                     'type' => 'String',
                                                     'optional' => 'true'
                                                   },
                                         'complete' => {
                                                       'optional' => 'true',
                                                       'type' => 'Function',
                                                       'desc' => 'A function to call once the animation is complete.'
                                                     }
                                       },
                           'added' => '1.4.3'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/fadeToggle.xml ####
Possible keys are: name type example longdesc category signature return title desc note
$VAR1 = {
          'name' => 'fadeToggle',
          'type' => 'method',
          'example' => {
                       'desc' => 'Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a "finished" message upon completion. ',
                       'html' => '
<button>fadeToggle p1</button>
<button>fadeToggle p2</button>
<p>This paragraph has a slow, linear fade.</p>
<p>This paragraph has a fast animation.</p>
<div id="log"></div>
',
                       'code' => '
$( "button:first" ).click(function() {
  $( "p:first" ).fadeToggle( "slow", "linear" );
});
$( "button:last" ).click(function() {
  $( "p:last" ).fadeToggle( "fast", function() {
    $( "#log" ).append( "<div>finished</div>" );
  });
});
'
                     },
          'longdesc' => {
                        'h4' => {
                                'easing' => {
                                            'content' => 'Easing'
                                          },
                                'callback-function' => {
                                                       'content' => 'Callback Function'
                                                     }
                              },
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method animates the opacity of the matched elements. When called on a visible element, the element\'s ',
                                                ' style property is set to ',
                                                ' once the opacity reaches 0, so the element no longer affects the layout of the page.'
                                              ],
                                 'code' => [
                                           '.fadeToggle()',
                                           'display',
                                           'none'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively.'
                                              ],
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The string representing an easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ],
                                 'a' => {
                                        'content' => 'jQuery UI suite',
                                        'href' => 'http://jqueryui.com'
                                      }
                               },
                               {
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.'
                                              ],
                                 'code' => 'this'
                               },
                               {
                                 'content' => [
                                                ', the ',
                                                ' method can be used in conjunction with the ',
                                                ' method to execute a single callback for the animation as a whole when ',
                                                ' matching elements have completed their animations ( See the ',
                                                ' ).  '
                                              ],
                                 'strong' => 'As of jQuery 1.6',
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '.promise()',
                                                    'href' => '/promise/'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'content' => 'deferred.done()',
                                                    'href' => '/deferred.done/'
                                                  }
                                           }
                                         ],
                                 'em' => 'all',
                                 'a' => {
                                        'content' => 'example for .promise()',
                                        'href' => '/promise/#example-1'
                                      }
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'effects'
                        },
                        {
                          'slug' => 'effects/fading'
                        },
                        {
                          'slug' => 'version/1.4.4'
                        }
                      ],
          'signature' => [
                         {
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'href' => '../includes/easing-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/complete-argument.xml'
                                           }
                                         ],
                           'added' => '1.4.4'
                         },
                         {
                           'added' => '1.4.4',
                           'xi:include' => {
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                           'href' => '../includes/options-argument.xml'
                                         }
                         }
                       ],
          'return' => 'jQuery',
          'title' => '.fadeToggle()',
          'desc' => 'Display or hide the matched elements by animating their opacity.',
          'note' => {
                    'data-title' => '.fadeToggle()',
                    'type' => 'additional',
                    'id' => 'jquery.fx.off'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/file-selector.xml ####
Possible keys are: note desc return sample title signature name type example longdesc category
$VAR1 = {
          'note' => {
                    'data-alt' => '[type="file"]',
                    'data-selector' => ':file',
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension-alt'
                  },
          'desc' => 'Selects all elements of type file.',
          'return' => '',
          'sample' => ':file',
          'title' => ':file Selector',
          'signature' => {
                         'added' => '1.0'
                       },
          'name' => 'file',
          'type' => 'selector',
          'example' => {
                       'css' => '
  textarea {
    height: 45px;
  }
',
                       'html' => '
<form>
  <input type="button" value="Input Button">
  <input type="checkbox">
  <input type="file">
  <input type="hidden">
  <input type="image">
  <input type="password">
  <input type="radio">
  <input type="reset">
  <input type="submit">
  <input type="text">
  <select><option>Option</option></select>
  <textarea></textarea>
  <button>Button</button>
</form>
<div></div>
',
                       'desc' => 'Finds all file inputs.',
                       'code' => '
var input = $( "input:file" ).css({
  background: "yellow",
  border: "3px red solid"
});
$( "div" )
  .text( "For this type jQuery found " + input.length + "." )
  .css( "color", "red" );
$( "form" ).submit(function( event ) {
  event.preventDefault();
});
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              ' is equivalent to ',
                                              '. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare ',
                                              ' is equivalent to ',
                                              ', so ',
                                              ' should be used instead. '
                                            ],
                               'code' => [
                                         ':file',
                                         '[type="file"]',
                                         '$( ":file" )',
                                         '$("*:file" )',
                                         '$( "input:file" )'
                                       ]
                             }
                      },
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/filter.xml ####
Possible keys are: name type longdesc example category signature return title desc
$VAR1 = {
          'name' => 'filter',
          'type' => 'method',
          'longdesc' => {
                        'note' => {
                                  'type' => 'additional',
                                  'id' => 'svg-support'
                                },
                        'h4' => {
                                'id' => 'using-filter-function',
                                'content' => 'Using a Filter Function'
                              },
                        'p' => [
                               {
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; all elements matching the selector will be included in the result.'
                                              ],
                                 'code' => '.filter()'
                               },
                               'Consider a page with a simple list on it:',
                               'We can apply this method to the set of list items:',
                               {
                                 'content' => [
                                                'The result of this call is a red background for items 1, 3, and 5, as they match the selector (recall that ',
                                                ' and ',
                                                ' use 0-based indexing).'
                                              ],
                                 'code' => [
                                           ':even',
                                           ':odd'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The second form of this method allows us to filter elements against a function rather than a selector. For each element, if the function returns ',
                                                ' (or a "truthy" value), the element will be included in the filtered set; otherwise, it will be excluded. Suppose we have a somewhat more involved HTML snippet:'
                                              ],
                                 'code' => 'true'
                               },
                               'We can select the list items, then filter them based on their contents:',
                               {
                                 'code' => [
                                           '<strong>',
                                           'this'
                                         ],
                                 'content' => [
                                                'This code will alter the first list item only, as it contains exactly one ',
                                                ' tag. Within the filter function, ',
                                                ' refers to each DOM element in turn. The parameter passed to the function tells us the index of that DOM element within the set matched by the jQuery object.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'We can also take advantage of the ',
                                                ' passed through the function, which indicates the 0-based position of the element within the unfiltered set of matched elements:'
                                              ],
                                 'code' => 'index'
                               },
                               {
                                 'code' => [
                                           '%',
                                           'index',
                                           '2'
                                         ],
                                 'content' => [
                                                'This alteration to the code will cause the third and sixth list items to be highlighted, as it uses the modulus operator (',
                                                ') to select every item with an ',
                                                ' value that, when divided by 3, has a remainder of ',
                                                '.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li>list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
  <li>list item 6</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).filter( ":even" ).css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
<ul>
  <li><strong>list</strong> item 1 - one strong tag</li>
  <li><strong>list</strong> item <strong>2</strong> -
    two <span>strong tags</span></li>
  <li>list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
  <li>list item 6</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" )
  .filter(function( index ) {
    return $( "strong", this ).length === 1;
  })
    .css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
$( "li" )
  .filter(function( index ) {
    return index % 3 === 2;
  })
    .css( "background-color", "red" );
    '
                                 }
                               ]
                      },
          'example' => [
                       {
                         'css' => '
  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 2px white solid;
  }
',
                         'desc' => 'Change the color of all divs; then add a border to those with a "middle" class.',
                         'html' => '
<div></div>
<div class="middle"></div>
<div class="middle"></div>
<div class="middle"></div>
<div class="middle"></div>
<div></div>
',
                         'code' => '
$( "div" )
  .css( "background", "#c8ebcc" )
  .filter( ".middle" )
    .css( "border-color", "red" );
'
                       },
                       {
                         'css' => '
  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 3px white solid;
  }
',
                         'html' => '
<div id="first"></div>
<div id="second"></div>
<div id="third"></div>
<div id="fourth"></div>
<div id="fifth"></div>
<div id="sixth"></div>
',
                         'desc' => 'Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of "fourth."',
                         'code' => '
$( "div" )
  .css( "background", "#b4b0da" )
  .filter(function( index ) {
    return index === 1 || $( this ).attr( "id" ) === "fourth";
  })
    .css( "border", "3px double red" );
'
                       },
                       {
                         'desc' => 'Select all divs and filter the selection with a DOM element, keeping only the one with an id of "unique".',
                         'code' => '
$( "div" ).filter( document.getElementById( "unique" ) );
'
                       },
                       {
                         'code' => '
$( "div" ).filter( $( "#unique" ) );
',
                         'desc' => 'Select all divs and filter the selection with a jQuery object, keeping only the one with an id of "unique".'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'traversing/filtering'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'name' => 'selector',
                                         'type' => 'Selector',
                                         'desc' => 'A string containing a selector expression to match the current set of elements against.'
                                       }
                         },
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'argument' => {
                                                       'index' => {
                                                                  'type' => 'Integer'
                                                                },
                                                       'element' => {
                                                                    'type' => 'Element'
                                                                  }
                                                     },
                                         'name' => 'function',
                                         'return' => {
                                                     'type' => 'Boolean'
                                                   },
                                         'type' => 'Function',
                                         'desc' => {
                                                   'code' => 'this',
                                                   'content' => [
                                                                  'A function used as a test for each element in the set. ',
                                                                  ' is the current DOM element.'
                                                                ]
                                                 }
                                       }
                         },
                         {
                           'argument' => {
                                         'name' => 'elements',
                                         'type' => 'Element',
                                         'desc' => 'One or more DOM elements to match the current set of elements against.'
                                       },
                           'added' => '1.4'
                         },
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'desc' => 'An existing jQuery object to match the current set of elements against.',
                                         'type' => 'jQuery',
                                         'name' => 'selection'
                                       }
                         }
                       ],
          'return' => 'jQuery',
          'title' => '.filter()',
          'desc' => 'Reduce the set of matched elements to those that match the selector or pass the function\'s test. '
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/find.xml ####
Possible keys are: desc return title signature type name example longdesc category
$VAR1 = {
          'desc' => 'Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.',
          'return' => 'jQuery',
          'title' => '.find()',
          'signature' => [
                         {
                           'argument' => {
                                         'desc' => 'A string containing a selector expression to match elements against.',
                                         'type' => 'Selector',
                                         'name' => 'selector'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'argument' => {
                                         'desc' => 'An element or a jQuery object to match elements against.',
                                         'type' => {
                                                   'jQuery' => {},
                                                   'Element' => {}
                                                 },
                                         'name' => 'element'
                                       },
                           'added' => '1.6'
                         }
                       ],
          'type' => 'method',
          'name' => 'find',
          'example' => [
                       {
                         'code' => '
$( "p" ).find( "span" ).css( "color", "red" );
',
                         'desc' => {
                                   'code' => '$( "p span" )',
                                   'content' => 'Starts with all paragraphs and searches for descendant span elements, same as '
                                 },
                         'html' => '
<p><span>Hello</span>, how are you?</p>
<p>Me? I\'m <span>good</span>.</p>
'
                       },
                       {
                         'code' => '
var spans = $( "span" );
$( "p" ).find( spans ).css( "color", "red" );
',
                         'css' => '
  span {
    color: blue;
  }
',
                         'html' => '
<p><span>Hello</span>, how are you?</p>
<p>Me? I\'m <span>good</span>.</p>
<div>Did you <span>eat</span> yet?</div>
',
                         'desc' => 'A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.'
                       },
                       {
                         'html' => '
<p>
  When the day is short
  find that which matters to you
  or stop believing
</p>
',
                         'desc' => {
                                   'strong' => 't',
                                   'content' => [
                                                  'Add spans around each word then add a hover and italicize words with the letter ',
                                                  '.'
                                                ]
                                 },
                         'css' => '
  p {
    font-size: 20px;
    width: 200px;
    color: blue;
    font-weight: bold;
    margin: 0 10px;
  }
  .hilite {
    background: yellow;
  }
',
                         'code' => '
var newText = $( "p" ).text().split( " " ).join( "</span> <span>" );
newText = "<span>" + newText + "</span>";

$( "p" )
  .html( newText )
  .find( "span" )
    .hover(function() {
      $( this ).addClass( "hilite" );
    }, function() {
      $( this ).removeClass( "hilite" );
    })
  .end()
  .find( ":contains(\'t\')" )
    .css({
      "font-style": "italic",
      "font-weight": "bolder"
    });
'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul class="level-1">
  <li class="item-i">I</li>
  <li class="item-ii">II
    <ul class="level-2">
      <li class="item-a">A</li>
      <li class="item-b">B
        <ul class="level-3">
          <li class="item-1">1</li>
          <li class="item-2">2</li>
          <li class="item-3">3</li>
        </ul>
      </li>
      <li class="item-c">C</li>
    </ul>
  </li>
  <li class="item-iii">III</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.item-ii" ).find( "li" ).css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
var allListElements = $( "li" );
    '
                                 },
                                 {
                                   'code' => '
$( "li.item-ii" ).find( allListElements );
    '
                                 },
                                 {
                                   'code' => '
var item1 = $( "li.item-1" )[ 0 ];
$( "li.item-ii" ).find( item1 ).css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements. The ',
                                                ' and ',
                                                ' methods are similar, except that the latter only travels a single level down the DOM tree.'
                                              ],
                                 'code' => [
                                           '.find()',
                                           '.find()',
                                           '.children()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The first signature for the ',
                                                'method accepts a selector expression of the same type that we can pass to the ',
                                                ' function. The elements will be filtered by testing whether they match this selector.'
                                              ],
                                 'code' => [
                                           '.find()',
                                           '$()'
                                         ]
                               },
                               'Consider a page with a basic nested list on it:',
                               'If we begin at item II, we can find list items within it:',
                               'The result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.',
                               {
                                 'a' => {
                                        'href' => '/jquery/#selector-context',
                                        'content' => 'Selector context'
                                      },
                                 'content' => [
                                                ' is implemented with the ',
                                                ' therefore, ',
                                                ' is equivalent to ',
                                                '.'
                                              ],
                                 'code' => [
                                           '.find()',
                                           'method;',
                                           '$( "li.item-ii" ).find( "li" )',
                                           '$( "li", "li.item-ii" )'
                                         ]
                               },
                               {
                                 'strong' => 'As of jQuery 1.6',
                                 'content' => ', we can also filter the selection with a given jQuery collection or element. With the same nested list as above, if we start with:'
                               },
                               'And then pass this jQuery object to find:',
                               'This will return a jQuery collection which contains only the list elements that are descendants of item II.',
                               'Similarly, an element may also be passed to find:',
                               'The result of this call would be a red background on item 1.'
                             ],
                        'div' => {
                                 'class' => 'warning',
                                 'p' => {
                                        'content' => [
                                                       'Unlike most of the tree traversal methods, the selector expression is required in a call to ',
                                                       '. If we need to retrieve all of the descendant elements, we can pass in the universal selector ',
                                                       ' to accomplish this.'
                                                     ],
                                        'code' => [
                                                  '.find()',
                                                  '\'*\''
                                                ]
                                      }
                               },
                        'note' => {
                                  'id' => 'svg-support',
                                  'type' => 'additional'
                                }
                      },
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/finish.xml ####
Possible keys are: category example longdesc type name signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'effects/custom-effects'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ],
          'example' => {
                       'css' => '
  .box {
    position: absolute;
    top: 10px;
    left: 10px;
    width: 15px;
    height: 15px;
    background: black;
  }
  #path {
    height: 244px;
    font-size: 70%;
    border-left: 2px dashed red;
    border-bottom: 2px dashed green;
    border-right: 2px dashed blue;
  }
  button {
    width: 12em;
    display: block;
    text-align: left;
    margin: 0 auto;
  }
',
                       'desc' => 'Click the Go button once to start the animation, and then click the other buttons to see how they affect the current and queued animations.',
                       'html' => '
<div class="box"></div>
<div id="path">
  <button id="go">Go</button>
  <br>
  <button id="bstt" class="b">.stop( true,true )</button>
  <button id="bcf" class="b">.clearQueue().finish()</button>
  <br>
  <button id="bstf" class="b">.stop( true, false )</button>
  <button id="bcs" class="b">.clearQueue().stop()</button>
  <br>
  <button id="bsff" class="b">.stop( false, false )</button>
  <button id="bs" class="b">.stop()</button>
  <br>
  <button id="bsft" class="b">.stop( false, true )</button>
  <br>
  <button id="bf" class="b">.finish()</button>
</div>
',
                       'code' => '
var horiz = $( "#path" ).width() - 20,
  vert = $( "#path" ).height() - 20;

var btns = {
  bstt: function() {
    $( "div.box" ).stop( true, true );
  },
  bs: function() {
    $( "div.box" ).stop();
  },
  bsft: function() {
    $( "div.box" ).stop( false, true );
  },
  bf: function() {
    $( "div.box" ).finish();
  },
  bcf: function() {
    $( "div.box" ).clearQueue().finish();
  },
  bsff: function() {
    $( "div.box" ).stop( false, false );
  },
  bstf: function() {
    $( "div.box" ).stop( true, false );
  },
  bcs: function() {
    $( "div.box" ).clearQueue().stop();
  }
};

$( "button.b" ).on( "click", function() {
  btns[ this.id ]();
});

$( "#go" ).on( "click", function() {
  $( ".box" )
    .clearQueue()
    .stop()
    .css({
      left: 10,
      top: 10
    })
    .animate({
      top: vert
    }, 3000 )
    .animate({
      left: horiz
    }, 3000 )
    .animate({
      top: 10
    }, 3000 );
});
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'When ',
                                                ' is called on an element, the currently-running animation and all queued animations (if any) immediately stop and their CSS properties set to their target values. All queued animations are removed.'
                                              ],
                                 'code' => '.finish()'
                               },
                               'If the first argument is provided, only the animations in the queue represented by that string will be stopped.',
                               {
                                 'em' => 'queued',
                                 'code' => [
                                           '.finish()',
                                           '.stop(true, true)',
                                           '.finish()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method is similar to ',
                                                ' in that it clears the queue and the current animation jumps to its end value. It differs, however, in that ',
                                                ' also causes the CSS property of all ',
                                                ' animations to jump to their end values, as well.'
                                              ]
                               }
                             ],
                        'div' => {
                                 'p' => {
                                        'code' => [
                                                  '$.fx.off',
                                                  'true'
                                                ],
                                        'content' => [
                                                       'Animations may be stopped globally by setting the property ',
                                                       ' to ',
                                                       '. When this is done, all animation methods will immediately set elements to their final state when called, rather than displaying an effect.'
                                                     ]
                                      },
                                 'class' => 'warning'
                               }
                      },
          'type' => 'method',
          'name' => 'finish',
          'signature' => {
                         'argument' => {
                                       'desc' => 'The name of the queue in which to stop animations.',
                                       'default' => '\'fx\'',
                                       'optional' => 'true',
                                       'name' => 'queue',
                                       'type' => 'String'
                                     },
                         'added' => '1.9'
                       },
          'title' => '.finish()',
          'return' => 'jQuery',
          'desc' => 'Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/first-child-selector.xml ####
Possible keys are: signature type name longdesc example category desc sample return title
$VAR1 = {
          'signature' => {
                         'added' => '1.1.4'
                       },
          'type' => 'selector',
          'name' => 'first-child',
          'longdesc' => {
                        'p' => {
                               'a' => {
                                      'content' => ':first',
                                      'href' => '/first-selector/'
                                    },
                               'code' => [
                                         ':first-child',
                                         ':nth-child(1)'
                                       ],
                               'content' => [
                                              'While ',
                                              ' matches only a single element, the ',
                                              ' selector can match more than one: one for each parent. This is equivalent to ',
                                              '.'
                                            ]
                             }
                      },
          'example' => {
                       'code' => '
$( "div span:first-child" )
  .css( "text-decoration", "underline" )
  .hover(function() {
    $( this ).addClass( "sogreen" );
  }, function() {
    $( this ).removeClass( "sogreen" );
  });
',
                       'css' => '
  span {
    color: #008;
  }
  span.sogreen {
    color: green;
    font-weight: bolder;
  }
',
                       'desc' => 'Finds the first span in each matched div to underline and add a hover state.',
                       'html' => '
<div>
  <span>John,</span>
  <span>Karl,</span>
  <span>Brandon</span>
</div>
<div>
  <span>Glen,</span>
  <span>Tane,</span>
  <span>Ralph</span>
</div>
'
                     },
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.1.4'
                        }
                      ],
          'desc' => 'Selects all elements that are the first child of their parent.',
          'sample' => ':first-child',
          'return' => '',
          'title' => ':first-child Selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/first-of-type-selector.xml ####
Possible keys are: signature name type longdesc example category desc sample return title
$VAR1 = {
          'signature' => {
                         'added' => '1.9'
                       },
          'name' => 'first-of-type',
          'type' => 'selector',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The ',
                                              ' selector matches elements that have no other element with both the same parent and the same element name coming before it in the document tree.'
                                            ],
                               'code' => ':first-of-type'
                             }
                      },
          'example' => {
                       'code' => '
$( "span:first-of-type" ).addClass( "fot" );
',
                       'html' => "
<div>
  <span>Corey,</span>
  <span>Yehuda,</span>
  <span>Adam,</span>
  <span>Todd</span>
</div>
<div>
  <b>Nobody,</b>
  <span>J\x{f6}rn,</span>
  <span>Scott,</span>
  <span>Timo</span>
</div>
",
                       'desc' => 'Find the first span in each matched div and add a class to it.',
                       'css' => '
  span.fot {
    color: red;
    font-size: 120%;
    font-style: italic;
  }
'
                     },
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ],
          'desc' => 'Selects all elements that are the first among siblings of the same element name.',
          'sample' => ':first-of-type',
          'return' => '',
          'title' => ':first-of-type Selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/first-selector.xml ####
Possible keys are: desc note title sample return signature category example longdesc type name
$VAR1 = {
          'desc' => 'Selects the first matched DOM element.',
          'note' => {
                    'jquery-selector-extension' => {
                                                   'data-selector' => ':first',
                                                   'type' => 'additional'
                                                 },
                    'document-order' => {
                                        'type' => 'additional'
                                      }
                  },
          'title' => ':first Selector',
          'sample' => ':first',
          'return' => '',
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => {
                       'html' => '
<table>
  <tr><td>Row 1</td></tr>
  <tr><td>Row 2</td></tr>
  <tr><td>Row 3</td></tr>
</table>
',
                       'desc' => 'Finds the first table row.',
                       'css' => '
  td {
    color: blue;
    font-weight: bold;
  }
',
                       'code' => '
$( "tr:first" ).css( "font-style", "italic" );
'
                     },
          'longdesc' => {
                        'p' => {
                               'a' => {
                                      'content' => ':first-child',
                                      'href' => '/first-child-selector/'
                                    },
                               'content' => [
                                              'The ',
                                              ' pseudo-class is equivalent to ',
                                              '. It could also be written as ',
                                              '. While this matches only a single element, ',
                                              ' can match more than one: One for each parent.'
                                            ],
                               'code' => [
                                         ':first',
                                         ':eq( 0 )',
                                         ':lt( 1 )'
                                       ]
                             }
                      },
          'type' => 'selector',
          'name' => 'first'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/first.xml ####
Possible keys are: signature type name example longdesc category desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.4'
                       },
          'type' => 'method',
          'name' => 'first',
          'example' => {
                       'code' => '
$( "p span" ).first().addClass( "highlight" );
',
                       'desc' => 'Highlight the first span in a paragraph.',
                       'html' => '
<p>
  <span>Look:</span>
  <span>This is some text in a paragraph.</span>
  <span>This is a note about it.</span>
</p>
',
                       'css' => '
  .highlight{
    background-color: yellow
  }
'
                     },
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li>list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).first().css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method constructs a new jQuery object from the first element in that set.'
                                              ],
                                 'code' => '.first()'
                               },
                               'Consider a page with a simple list on it:',
                               'We can apply this method to the set of list items:',
                               'The result of this call is a red background for the first item.'
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'traversing/filtering'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'desc' => 'Reduce the set of matched elements to the first in the set.',
          'return' => 'jQuery',
          'title' => '.first()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/focus-selector.xml ####
Possible keys are: desc title sample return signature example longdesc type name category
$VAR1 = {
          'desc' => 'Selects element if it is currently focused.',
          'title' => ':focus Selector',
          'sample' => ':focus',
          'return' => '',
          'signature' => {
                         'added' => '1.6'
                       },
          'example' => {
                       'code' => '
$( "#content" ).delegate( "*", "focus blur", function() {
  var elem = $( this );
  setTimeout(function() {
    elem.toggleClass( "focused", elem.is( ":focus" ) );
  }, 0 );
});
',
                       'desc' => 'Adds the focused class to whatever element has focus',
                       'html' => '
<div id="content">
  <input tabIndex="1">
  <input tabIndex="2">
  <select tabIndex="3">
    <option>select menu</option>
  </select>
  <div tabIndex="4">
    a div
  </div>
</div>
',
                       'css' => '
  .focused {
    background: #abcdef;
  }
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'As with other pseudo-class selectors (those that begin with a ":"), it is recommended to precede ',
                                              ' with a tag name or some other selector; otherwise, the universal selector ( "*" ) is implied. In other words, the bare ',
                                              ' is equivalent to ',
                                              '.  If you are looking for the currently focused element, ',
                                              ' will retrieve it without having to search the whole DOM tree.'
                                            ],
                               'code' => [
                                         ':focus',
                                         '$( ":focus" )',
                                         '$( "*:focus" )',
                                         '$( document.activeElement )'
                                       ]
                             }
                      },
          'type' => 'selector',
          'name' => 'focus',
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/focus.xml ####
Possible keys are: desc note title return signature example longdesc type name category
$VAR1 = {
          'desc' => 'Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'data-event' => 'focus',
                    'type' => 'additional',
                    'id' => 'detach-shorthand'
                  },
          'title' => '.focus()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'argument' => {
                                         'name' => 'handler',
                                         'type' => 'Function',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'optional' => 'true',
                                                        'type' => 'Anything'
                                                      },
                                         'handler' => {
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'type' => 'Function',
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'example' => [
                       {
                         'css' => '
  span {
    display: none;
  }
',
                         'desc' => 'Fire focus.',
                         'html' => '
<p><input type="text"> <span>focus fire</span></p>
<p><input type="password"> <span>focus fire</span></p>
',
                         'code' => '
$( "input" ).focus(function() {
  $( this ).next( "span" ).css( "display", "inline" ).fadeOut( 1000 );
});
'
                       },
                       {
                         'desc' => 'To stop people from writing in text input boxes, try:',
                         'code' => '
$( "input[type=text]" ).focus(function() {
  $( this ).blur();
});
'
                       },
                       {
                         'desc' => 'To focus on a login input box with id \'login\' on page startup, try:',
                         'code' => '
$( document ).ready(function() {
  $( "#login" ).focus();
});
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               'For example, consider the HTML:',
                               'The event handler can be bound to the first input field:',
                               'Now clicking on the first field, or tabbing to it from another field, displays the alert:',
                               {
                                 'samp' => 'Handler for .focus() called.'
                               },
                               'We can trigger the event when another element is clicked:',
                               {
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also alert the message.'
                                              ],
                                 'samp' => 'Trigger the handler'
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the ',
                                                ' event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping ',
                                                ' to the ',
                                                ' event in its event delegation methods, ',
                                                ' and ',
                                                '.'
                                              ],
                                 'code' => [
                                           'focus',
                                           'focus',
                                           'focus',
                                           'focusin'
                                         ],
                                 'a' => [
                                        {
                                          'code' => '.live()',
                                          'href' => '/live/'
                                        },
                                        {
                                          'href' => '/delegate/',
                                          'code' => '.delegate()'
                                        }
                                      ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<form>
  <input id="target" type="text" value="Field 1">
  <input type="text" value="Field 2">
</form>
<div id="other">
  Trigger the handler
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).focus(function() {
  alert( "Handler for .focus() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).focus();
});
    '
                                 }
                               ],
                        'div' => {
                                 'class' => 'warning',
                                 'p' => {
                                        'content' => [
                                                       'Attempting to set focus to a hidden element causes an error in Internet Explorer. Take care to only use ',
                                                       ' on elements that are visible. To run an element\'s focus event handlers without setting focus to the element, use ',
                                                       ' instead of ',
                                                       '.'
                                                     ],
                                        'code' => [
                                                  '.focus()',
                                                  '.triggerHandler( "focus" )',
                                                  '.focus()'
                                                ]
                                      }
                               },
                        'ul' => {
                                'li' => [
                                        {
                                          'code' => [
                                                    '.on( "focus", handler )',
                                                    '.trigger( "focus" )'
                                                  ],
                                          'content' => [
                                                         'This method is a shortcut for ',
                                                         ' in the first and second variations, and ',
                                                         ' in the third.'
                                                       ]
                                        },
                                        {
                                          'content' => [
                                                         'The ',
                                                         ' event is sent to an element when it gains focus. This event is implicitly applicable to a limited set of elements, such as  form elements (',
                                                         ', ',
                                                         ', etc.) and links (',
                                                         '). In recent browser versions, the event can be extended to include all element types by explicitly setting the element\'s ',
                                                         ' property. An element can gain focus via keyboard commands, such as the Tab key, or by mouse clicks on the element.'
                                                       ],
                                          'code' => [
                                                    'focus',
                                                    '<input>',
                                                    '<select>',
                                                    '<a href>',
                                                    'tabindex'
                                                  ]
                                        },
                                        'Elements with focus are usually highlighted in some way by the browser, for example with a dotted line surrounding the element. The focus is used to determine which element is the first to receive keyboard-related events.'
                                      ]
                              }
                      },
          'type' => 'method',
          'name' => 'focus',
          'category' => [
                        {
                          'slug' => 'events/form-events'
                        },
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/focusin.xml ####
Possible keys are: note desc return title signature category type name longdesc example
$VAR1 = {
          'note' => {
                    'id' => 'detach-shorthand',
                    'type' => 'additional',
                    'data-event' => 'focusin'
                  },
          'desc' => 'Bind an event handler to the "focusin" event.',
          'return' => 'jQuery',
          'title' => '.focusin()',
          'signature' => [
                         {
                           'argument' => {
                                         'desc' => 'A function to execute each time the event is triggered.',
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     },
                                         'name' => 'handler',
                                         'type' => 'Function'
                                       },
                           'added' => '1.4'
                         },
                         {
                           'argument' => {
                                         'eventData' => {
                                                        'optional' => 'true',
                                                        'type' => 'Anything',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      },
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  }
                                                    }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'events/form-events'
                        },
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'version/1.4'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'type' => 'method',
          'name' => 'focusin',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ],
                                 'code' => [
                                           '.on( "focusin", handler )',
                                           '.trigger( "focusin" )'
                                         ]
                               },
                               {
                                 'a' => {
                                        'content' => 'focus',
                                        'href' => '/focus/'
                                      },
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when it, or any element inside of it, gains focus. This is distinct from the ',
                                                ' event in that it supports detecting the focus event on parent elements (in other words, it supports event bubbling).'
                                              ],
                                 'code' => 'focusin'
                               },
                               {
                                 'a' => {
                                        'href' => '/focusout/',
                                        'content' => 'focusout'
                                      },
                                 'content' => [
                                                'This event will likely be used together with the ',
                                                ' event.'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'css' => '
  span {
    display: none;
  }
',
                       'desc' => 'Watch for a focus to occur within the paragraphs on the page.',
                       'html' => '
<p><input type="text"> <span>focusin fire</span></p>
<p><input type="password"> <span>focusin fire</span></p>
',
                       'code' => '
$( "p" ).focusin(function() {
  $( this ).find( "span" ).css( "display", "inline" ).fadeOut( 1000 );
});
'
                     }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/focusout.xml ####
Possible keys are: signature category type name example longdesc desc note return title
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'name' => 'handler',
                                         'type' => 'Function',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       },
                           'added' => '1.4'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      },
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  }
                                                    }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'events/form-events'
                        },
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'version/1.4'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'type' => 'method',
          'name' => 'focusout',
          'example' => {
                       'code' => '
var focus = 0,
  blur = 0;
$( "p" )
  .focusout(function() {
    focus++;
    $( "#focus-count" ).text( "focusout fired: " + focus + "x" );
  })
  .blur(function() {
    blur++;
    $( "#blur-count" ).text( "blur fired: " + blur + "x" );
  });
',
                       'css' => '
  .inputs {
    float: left;
    margin-right: 1em;
  }
  .inputs p {
    margin-top: 0;
  }
',
                       'html' => '
<div class="inputs">
  <p>
    <input type="text"><br>
    <input type="text">
  </p>
  <p>
    <input type="password">
  </p>
</div>
<div id="focus-count">focusout fire</div>
<div id="blur-count">blur fire</div>
',
                       'desc' => {
                                 'content' => [
                                                'Watch for a loss of focus to occur inside paragraphs and note the difference between the ',
                                                ' count and the ',
                                                ' count. (The ',
                                                ' count does not change because those events do not bubble.)'
                                              ],
                                 'code' => [
                                           'focusout',
                                           'blur',
                                           'blur'
                                         ]
                               }
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "focusout", handler )',
                                           '.trigger( "focusout" )'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' when passed arguments, and ',
                                                ' when no arguments are passed.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when it, or any element inside of it, loses focus. This is distinct from the ',
                                                ' event in that it supports detecting the loss of focus on descendant elements (in other words, it supports event bubbling).'
                                              ],
                                 'code' => 'focusout',
                                 'a' => {
                                        'href' => '/blur/',
                                        'content' => 'blur'
                                      }
                               },
                               {
                                 'content' => [
                                                'This event will likely be used together with the ',
                                                ' event.'
                                              ],
                                 'a' => {
                                        'content' => 'focusin',
                                        'href' => '/focusin/'
                                      }
                               }
                             ]
                      },
          'desc' => 'Bind an event handler to the "focusout" JavaScript event.',
          'note' => {
                    'id' => 'detach-shorthand',
                    'type' => 'additional',
                    'data-event' => 'focusout'
                  },
          'return' => 'jQuery',
          'title' => '.focusout()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/get.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'get' => {
                              'desc' => 'Retrieve the elements matched by the jQuery object.',
                              'return' => 'Array',
                              'title' => '.get()',
                              'signature' => {
                                             'added' => '1.0'
                                           },
                              'category' => [
                                            {
                                              'slug' => 'miscellaneous/dom-element-methods'
                                            },
                                            {
                                              'slug' => 'version/1.0'
                                            }
                                          ],
                              'type' => 'method',
                              'example' => {
                                           'css' => '
  span {
    color: red;
  }
',
                                           'html' => '
Reversed - <span></span>

<div>One</div>
<div>Two</div>
<div>Three</div>
',
                                           'desc' => 'Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.',
                                           'code' => '
function display( divs ) {
  var a = [];
  for ( var i = 0; i < divs.length; i++ ) {
    a.push( divs[ i ].innerHTML );
  }
  $( "span" ).text( a.join(" ") );
}
display( $( "div" ).get().reverse() );
'
                                         },
                              'longdesc' => {
                                            'pre' => [
                                                     {
                                                       'code' => '
<ul>
  <li id="foo">foo</li>
  <li id="bar">bar</li>
</ul>
      '
                                                     },
                                                     {
                                                       'code' => '
console.log( $( "li" ).get() );
      '
                                                     }
                                                   ],
                                            'p' => [
                                                   'Consider a simple unordered list:',
                                                   {
                                                     'code' => '.get()',
                                                     'content' => [
                                                                    'Without a parameter, ',
                                                                    ' returns an array of all of the elements:'
                                                                  ]
                                                   },
                                                   'All of the matched DOM nodes are returned by this call, contained in a standard array:',
                                                   {
                                                     'span' => {
                                                               'class' => 'result',
                                                               'content' => '[<li id="foo">, <li id="bar">]'
                                                             }
                                                   }
                                                 ]
                                          }
                            }
                   },
          'desc' => 'Retrieve the DOM elements matched by the jQuery object.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/gt-selector.xml ####
Possible keys are: longdesc example name type category signature title return note desc
$VAR1 = {
          'longdesc' => {
                        'p' => [
                               {
                                 'strong' => 'index-related selectors'
                               },
                               {
                                 'code' => '.myclass',
                                 'content' => [
                                                'The index-related selector expressions (including this "greater than" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (',
                                                ') and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Note that since JavaScript arrays use ',
                                                ', these selectors reflect that fact. This is why ',
                                                ' selects elements after the second element in the document with the class ',
                                                ', rather than after the first. In contrast, ',
                                                ' uses ',
                                                ' to conform to the CSS specification.'
                                              ],
                                 'code' => [
                                           '$( ".myclass:gt(1)" )',
                                           'myclass',
                                           ':nth-child(n)'
                                         ],
                                 'em' => [
                                         '0-based indexing',
                                         '1-based indexing'
                                       ]
                               },
                               {
                                 'code' => [
                                           ':gt(index)',
                                           'index'
                                         ],
                                 'content' => [
                                                'Prior to jQuery 1.8, the ',
                                                ' selector did ',
                                                ' accept a negative value for '
                                              ],
                                 'em' => 'not'
                               }
                             ]
                      },
          'example' => {
                       'desc' => 'Give TD #5 and higher a yellow background and TD #8 a red text color.',
                       'html' => '
<table border="1">
  <tr><td>TD #0</td><td>TD #1</td><td>TD #2</td></tr>
  <tr><td>TD #3</td><td>TD #4</td><td>TD #5</td></tr>
  <tr><td>TD #6</td><td>TD #7</td><td>TD #8</td></tr>
</table>
',
                       'code' => '
$( "td:gt(4)" ).css( "backgroundColor", "yellow" );
$( "td:gt(-2)" ).css( "color", "red" );
'
                     },
          'name' => 'gt',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'type' => 'Number',
                                         'name' => 'index',
                                         'desc' => 'Zero-based index.'
                                       },
                           'sample' => ':gt(index)'
                         },
                         {
                           'sample' => ':gt(-index)',
                           'argument' => {
                                         'type' => 'Integer',
                                         'name' => 'indexFromEnd',
                                         'desc' => 'Zero-based index, counting backwards from the last element. '
                                       },
                           'added' => '1.8'
                         }
                       ],
          'title' => ':gt() Selector',
          'return' => '',
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension-alt',
                    'data-selector' => ':gt()',
                    'data-alt' => '$("your-pure-css-selector").slice(index)'
                  },
          'desc' => {
                    'content' => [
                                   'Select all elements at an index greater than ',
                                   ' within the matched set.'
                                 ],
                    'code' => 'index'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/has-attribute-selector.xml ####
Possible keys are: sample return title desc category name type example longdesc signature
$VAR1 = {
          'sample' => '[attribute]',
          'return' => '',
          'title' => 'Has Attribute Selector [name]',
          'desc' => 'Selects elements that have the specified attribute, with any value. ',
          'category' => [
                        {
                          'slug' => 'selectors/attribute-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'attributeHas',
          'type' => 'selector',
          'example' => {
                       'code' => '
// Using .one() so the handler is executed at most once
// per element per event type
$( "div[id]" ).one( "click", function() {
  var idString = $( this ).text() + " = " + $( this ).attr( "id" );
  $( this ).text( idString );
});
',
                       'desc' => 'Bind a single click to divs with an id that adds the id to the div\'s text.',
                       'html' => '
<div>no id</div>
<div id="hey">with id</div>
<div id="there">has an id</div>
<div>nope</div>
'
                     },
          'longdesc' => {},
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'name' => 'attribute',
                                       'type' => 'String',
                                       'desc' => 'An attribute name.'
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/has-selector.xml ####
Possible keys are: title sample return note desc category longdesc example name type signature
$VAR1 = {
          'title' => ':has() Selector',
          'sample' => ':has(selector)',
          'return' => '',
          'note' => {
                    'id' => 'jquery-selector-extension-alt',
                    'type' => 'additional',
                    'data-selector' => ':has()',
                    'data-alt' => '$( "your-pure-css-selector" ).has( selector/DOMElement )'
                  },
          'desc' => 'Selects elements which contain at least one element that matches the specified selector.',
          'category' => [
                        {
                          'slug' => 'selectors/content-filter-selector'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.1.4'
                        }
                      ],
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The expression ',
                                              ' matches a ',
                                              ' if a ',
                                              ' exists anywhere among its descendants, not just as a direct child.'
                                            ],
                               'code' => [
                                         '$( "div:has(p)" )',
                                         '<div>',
                                         '<p>'
                                       ]
                             }
                      },
          'example' => {
                       'code' => '
$( "div:has(p)" ).addClass( "test" );
',
                       'desc' => 'Adds the class "test" to all divs that have a paragraph inside of them.',
                       'html' => '
<div><p>Hello in a paragraph</p></div>
<div>Hello again! (with no paragraph)</div>
',
                       'css' => '
  .test {
    border: 3px inset red;
  }
'
                     },
          'name' => 'has',
          'type' => 'selector',
          'signature' => {
                         'added' => '1.1.4',
                         'argument' => {
                                       'type' => 'Selector',
                                       'name' => 'selector',
                                       'desc' => 'Any selector.'
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/has.xml ####
Possible keys are: name type example longdesc category signature return title desc
$VAR1 = {
          'name' => 'has',
          'type' => 'method',
          'example' => {
                       'code' => '
$( "ul" ).append( "<li>" +
  ( $( "ul" ).has( "li" ).length ? "Yes" : "No" ) +
  "</li>" );
$( "ul" ).has( "li" ).addClass( "full" );
',
                       'html' => '
<ul><li>Does the UL contain an LI?</li></ul>
',
                       'desc' => 'Check if an element is inside another.',
                       'css' => '
  .full {
    border: 1px solid red;
  }
'
                     },
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
 <ul>
  <li>list item 1</li>
  <li>list item 2
    <ul>
      <li>list item 2-a</li>
      <li>list item 2-b</li>
    </ul>
  </li>
  <li>list item 3</li>
  <li>list item 4</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).has( "ul" ).css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => '.has()',
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against the descendants of the matching elements; the element will be included in the result if any of its descendant elements matches the selector.'
                                              ]
                               },
                               'Consider a page with a nested list as follows:',
                               'We can apply this method to the set of list items as follows:',
                               {
                                 'code' => [
                                           '<li>',
                                           '<ul>'
                                         ],
                                 'content' => [
                                                'The result of this call is a red background for item 2, as it is the only ',
                                                ' that has a ',
                                                ' among its descendants.'
                                              ]
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'traversing/filtering'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'signature' => [
                         {
                           'argument' => {
                                         'name' => 'selector',
                                         'type' => 'String',
                                         'desc' => 'A string containing a selector expression to match elements against.'
                                       },
                           'added' => '1.4'
                         },
                         {
                           'argument' => {
                                         'desc' => 'A DOM element to match elements against.',
                                         'type' => 'Element',
                                         'name' => 'contained'
                                       },
                           'added' => '1.4'
                         }
                       ],
          'return' => 'jQuery',
          'title' => '.has()',
          'desc' => 'Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/hasClass.xml ####
Possible keys are: name type example longdesc category signature return title desc
$VAR1 = {
          'name' => 'hasClass',
          'type' => 'method',
          'example' => {
                       'html' => '
<p>This paragraph is black and is the first paragraph.</p>
<p class="selected">This paragraph is red and is the second paragraph.</p>
<div id="result1">First paragraph has selected class: </div>
<div id="result2">Second paragraph has selected class: </div>
<div id="result3">At least one paragraph has selected class: </div>
',
                       'desc' => 'Looks for the paragraph that contains \'selected\' as a class.',
                       'css' => '
  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: red;
  }
',
                       'code' => '
$( "#result1" ).append( $( "p:first" ).hasClass( "selected" ).toString() );
$( "#result2" ).append( $( "p:last" ).hasClass( "selected" ).toString() );
$( "#result3" ).append( $( "p" ).hasClass( "selected" ).toString() ) ;
'
                     },
          'longdesc' => {
                        'p' => [
                               'Elements may have more than one class assigned to them. In HTML, this is represented by separating the class names with a space:',
                               {
                                 'code' => [
                                           '.hasClass()',
                                           'true',
                                           'true'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method will return ',
                                                ' if the class is assigned to an element, even if other classes also are. For example, given the HTML above, the following will return ',
                                                ':'
                                              ]
                               },
                               'As would:',
                               {
                                 'content' => [
                                                'While this would return ',
                                                ':'
                                              ],
                                 'code' => 'false'
                               },
                               'As of jQuery 1.12/2.2, this method supports XML documents, including SVG.'
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div id="mydiv" class="foo bar"></div>
    '
                                 },
                                 {
                                   'code' => '
$( "#mydiv" ).hasClass( "foo" )
    '
                                 },
                                 {
                                   'code' => '
$( "#mydiv" ).hasClass( "bar" )
    '
                                 },
                                 {
                                   'code' => '
$( "#mydiv" ).hasClass( "quux" )
    '
                                 }
                               ]
                      },
          'category' => [
                        {
                          'slug' => 'attributes'
                        },
                        {
                          'slug' => 'manipulation/class-attribute'
                        },
                        {
                          'slug' => 'css'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'name' => 'className',
                                       'type' => 'String',
                                       'desc' => 'The class name to search for.'
                                     },
                         'added' => '1.2'
                       },
          'return' => 'Boolean',
          'title' => '.hasClass()',
          'desc' => 'Determine whether any of the matched elements are assigned the given class.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/header-selector.xml ####
Possible keys are: longdesc example name type category signature title sample return note desc
$VAR1 = {
          'longdesc' => {},
          'example' => {
                       'code' => '
$( ":header" ).css({ background: "#ccc", color: "blue" });
',
                       'html' => '
<h1>Header 1</h1>
<p>Contents 1</p>
<h2>Header 2</h2>
<p>Contents 2</p>
',
                       'desc' => 'Adds a background and text color to all the headers on the page.'
                     },
          'name' => 'header',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'signature' => {
                         'added' => '1.2'
                       },
          'title' => ':header Selector',
          'sample' => ':header',
          'return' => '',
          'note' => {
                    'data-selector' => ':header',
                    'id' => 'jquery-selector-extension',
                    'type' => 'additional'
                  },
          'desc' => 'Selects all elements that are headers, like h1, h2, h3 and so on.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/height.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the current computed height for the first element in the set of matched elements or set the height of every matched element.',
          'entry' => {
                     'height' => {
                                 'example' => {
                                              'html' => '
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
',
                                              'desc' => 'To set the height of each div on click to 30px plus a color change.',
                                              'css' => '
  div {
    width: 50px;
    height: 70px;
    float: left;
    margin: 5px;
    background: rgb(255,140,0);
    cursor: pointer;
  }
',
                                              'code' => '
$( "div" ).one( "click", function() {
  $( this ).height( 30 ).css({
    cursor: "auto",
    backgroundColor: "green"
  });
});
'
                                            },
                                 'longdesc' => {
                                               'p' => [
                                                      {
                                                        'code' => [
                                                                  '.height(value)',
                                                                  '100px',
                                                                  '50%',
                                                                  'auto'
                                                                ],
                                                        'content' => [
                                                                       'When calling ',
                                                                       ', the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, a valid CSS measurement must be provided for the height (such as ',
                                                                       ', ',
                                                                       ', or ',
                                                                       '). Note that in modern browsers, the CSS height property does not include padding, border, or margin.'
                                                                     ]
                                                      },
                                                      'If no explicit unit was specified (like \'em\' or \'%\') then "px" is concatenated to the value.',
                                                      {
                                                        'content' => [
                                                                       'Note that ',
                                                                       ' sets the content height of the box regardless of the value of the CSS ',
                                                                       ' property.'
                                                                     ],
                                                        'code' => [
                                                                  '.height(value)',
                                                                  'box-sizing'
                                                                ]
                                                      }
                                                    ]
                                             },
                                 'type' => 'method',
                                 'category' => [
                                               {
                                                 'slug' => 'css'
                                               },
                                               {
                                                 'slug' => 'dimensions'
                                               },
                                               {
                                                 'slug' => 'manipulation/style-properties'
                                               },
                                               {
                                                 'slug' => 'version/1.0'
                                               },
                                               {
                                                 'slug' => 'version/1.4.1'
                                               }
                                             ],
                                 'signature' => [
                                                {
                                                  'added' => '1.0',
                                                  'argument' => {
                                                                'name' => 'value',
                                                                'type' => {
                                                                          'Number' => {},
                                                                          'String' => {}
                                                                        },
                                                                'desc' => 'An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).'
                                                              }
                                                },
                                                {
                                                  'argument' => {
                                                                'desc' => {
                                                                          'code' => 'this',
                                                                          'content' => [
                                                                                         'A function returning the height to set. Receives the index position of the element in the set and the old height as arguments. Within the function, ',
                                                                                         ' refers to the current element in the set.'
                                                                                       ]
                                                                        },
                                                                'argument' => {
                                                                              'index' => {
                                                                                         'type' => 'Integer'
                                                                                       },
                                                                              'height' => {
                                                                                          'type' => 'Integer'
                                                                                        }
                                                                            },
                                                                'type' => 'Function',
                                                                'return' => {
                                                                            'type' => {
                                                                                      'Number' => {},
                                                                                      'String' => {}
                                                                                    }
                                                                          },
                                                                'name' => 'function'
                                                              },
                                                  'added' => '1.4.1'
                                                }
                                              ],
                                 'return' => 'jQuery',
                                 'desc' => 'Set the CSS height of every matched element.'
                               }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/hidden-selector.xml ####
Possible keys are: signature example longdesc name type category note desc title return sample
$VAR1 = {
          'signature' => {
                         'added' => '1.0'
                       },
          'example' => {
                       'css' => '
  div {
    width: 70px;
    height: 40px;
    background: #e7f;
    margin: 5px;
    float: left;
  }
  span {
    display: block;
    clear: left;
    color: red;
  }
  .starthidden {
    display: none;
  }
',
                       'desc' => 'Shows all hidden divs and counts hidden inputs.',
                       'html' => '
<span></span>
<div></div>
<div style="display:none;">Hider!</div>
<div></div>

<div class="starthidden">Hider!</div>
<div></div>

<form>
  <input type="hidden">
  <input type="hidden">
  <input type="hidden">
</form>

<span></span>
',
                       'code' => '
// In some browsers :hidden includes head, title, script, etc...
var hiddenElements = $( "body" ).find( ":hidden" ).not( "script" );

$( "span:first" ).text( "Found " + hiddenElements.length + " hidden elements total." );
$( "div:hidden" ).show( 3000 );
$( "span:last" ).text( "Found " + $( "input:hidden" ).length + " hidden inputs." );
'
                     },
          'longdesc' => {
                        'ul' => {
                                'li' => [
                                        {
                                          'code' => [
                                                    'display',
                                                    'none'
                                                  ],
                                          'content' => [
                                                         'They have a CSS ',
                                                         ' value of ',
                                                         '.'
                                                       ]
                                        },
                                        {
                                          'code' => 'type="hidden"',
                                          'content' => [
                                                         'They are form elements with ',
                                                         '.'
                                                       ]
                                        },
                                        'Their width and height are explicitly set to 0.',
                                        'An ancestor element is hidden, so the element is not shown on the page.'
                                      ]
                              },
                        'p' => [
                               'Elements can be considered hidden for several reasons:',
                               {
                                 'content' => [
                                                'Elements with ',
                                                ' or ',
                                                ' are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation.'
                                              ],
                                 'code' => [
                                           'visibility: hidden',
                                           'opacity: 0'
                                         ]
                               },
                               'Elements that are not in a document are not considered to be visible; jQuery does not have a way to know if they will be visible when appended to a document since it depends on the applicable styles.',
                               {
                                 'content' => [
                                                'This selector is the opposite of the ',
                                                ' selector. So, every element selected by ',
                                                ' isn\'t selected by ',
                                                ' and vice versa.'
                                              ],
                                 'code' => [
                                           ':hidden',
                                           ':visible'
                                         ],
                                 'a' => {
                                        'code' => ':visible',
                                        'href' => '/visible-selector/'
                                      }
                               },
                               'During animations to show an element, the element is considered to be visible at the start of the animation.',
                               {
                                 'content' => [
                                                'How ',
                                                ' is determined was changed in jQuery 1.3.2. An element is assumed to be hidden if it or any of its parents consumes no space in the document. CSS visibility isn\'t taken into account (therefore ',
                                                '). The ',
                                                ' outline the changes in more detail.'
                                              ],
                                 'code' => [
                                           ':hidden',
                                           '$( elem ).css( "visibility", "hidden" ).is( ":hidden" ) == false'
                                         ],
                                 'a' => {
                                        'href' => 'http://blog.jquery.com/2009/02/20/jquery-1-3-2-released/',
                                        'content' => 'release notes'
                                      }
                               },
                               {
                                 'code' => [
                                           ':hidden',
                                           ':hidden',
                                           'br',
                                           ':hidden'
                                         ],
                                 'content' => [
                                                'jQuery 3 slightly modifies the meaning of ',
                                                ' (and therefore of ',
                                                '). Starting with this version, elements will be considered ',
                                                ' if they don\'t have any layout boxes. For example, ',
                                                ' elements and inline elements with no content will not be selected by the ',
                                                ' selector.'
                                              ],
                                 'a' => {
                                        'code' => ':visible',
                                        'href' => '/visible-selector/'
                                      }
                               }
                             ]
                      },
          'name' => 'hidden',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'selectors/visibility-filter-selectors'
                        }
                      ],
          'note' => {
                    'hidden-forces-layout' => {
                                              'type' => 'additional'
                                            },
                    'jquery-selector-extension' => {
                                                   'data-selector' => ':hidden',
                                                   'type' => 'additional'
                                                 }
                  },
          'desc' => 'Selects all elements that are hidden.',
          'title' => ':hidden Selector',
          'return' => '',
          'sample' => ':hidden'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/hide.xml ####
Possible keys are: desc note title return signature longdesc example name type category
$VAR1 = {
          'desc' => 'Hide the matched elements.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery.fx.off',
                    'data-title' => '.hide()'
                  },
          'title' => '.hide()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.0',
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ]
                         },
                         {
                           'xi:include' => {
                                           'href' => '../includes/options-argument.xml',
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                         },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'name' => 'duration',
                                         'type' => {
                                                   'String' => {},
                                                   'Number' => {}
                                                 },
                                         'desc' => 'A string or number determining how long the animation will run.',
                                         'default' => '400'
                                       },
                           'xi:include' => [
                                           {
                                             'href' => '../includes/easing-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ]
                         }
                       ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'With no parameters, the ',
                                                ' method is the simplest way to hide an element:'
                                              ],
                                 'code' => '.hide()'
                               },
                               {
                                 'content' => [
                                                'The matched elements will be hidden immediately, with no animation. This is roughly equivalent to calling ',
                                                ', except that the value of the ',
                                                ' property is saved in jQuery\'s data cache so that ',
                                                ' can later be restored to its initial value. If an element has a ',
                                                ' value of ',
                                                ' and is hidden then shown, it will once again be displayed ',
                                                '.'
                                              ],
                                 'code' => [
                                           '.css( "display", "none" )',
                                           'display',
                                           'display',
                                           'display',
                                           'inline',
                                           'inline'
                                         ]
                               },
                               {
                                 'code' => [
                                           '.hide()',
                                           '.hide()',
                                           'display',
                                           'none'
                                         ],
                                 'content' => [
                                                'When a duration, a plain object, or a "complete" function is provided, ',
                                                ' becomes an animation method. The ',
                                                ' method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0, the ',
                                                ' style property is set to ',
                                                ' to ensure that the element no longer affects the layout of the page.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively.'
                                              ],
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Note that ',
                                                ' is fired immediately and will override the animation queue if no duration or a duration of 0 is specified.'
                                              ],
                                 'code' => '.hide()'
                               },
                               {
                                 'a' => {
                                        'href' => 'http://jqueryui.com',
                                        'content' => 'jQuery UI suite'
                                      },
                                 'strong' => '1.4.3',
                                 'content' => [
                                                'As of jQuery ',
                                                ', an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ]
                               },
                               {
                                 'code' => 'this',
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.'
                                              ]
                               },
                               'We can animate any element, such as a simple image:'
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$( ".target" ).hide();
    '
                                 },
                                 {
                                   'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123">
    '
                                 },
                                 {
                                   'code' => '
// With the element initially shown, we can hide it slowly:
$( "#clickme" ).click(function() {
  $( "#book" ).hide( "slow", function() {
    alert( "Animation complete." );
  });
});
    '
                                 }
                               ],
                        'div' => {
                                 'p' => {
                                        'content' => ' This method may cause performance issues, especially when used on many elements. If you\'re encountering such issues, use performance testing tools to determine whether this method is causing them. Moreover, this method can cause problems with responsive layouts if the display value differs at different viewport sizes.',
                                        'strong' => 'Note:'
                                      },
                                 'class' => 'warning'
                               },
                        'figure' => {
                                    'figcaption' => {
                                                    'content' => [
                                                                   'Figure 1 - Illustration of the ',
                                                                   ' effect'
                                                                 ],
                                                    'code' => 'hide()'
                                                  },
                                    'img' => [
                                             {
                                               'alt' => '',
                                               'src' => '/resources/0042_06_05.png',
                                               'class' => 'column three'
                                             },
                                             {
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_06.png',
                                               'alt' => ''
                                             },
                                             {
                                               'alt' => '',
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_07.png'
                                             },
                                             {
                                               'src' => '/resources/0042_06_08.png',
                                               'class' => 'column three',
                                               'alt' => ''
                                             }
                                           ]
                                  }
                      },
          'example' => [
                       {
                         'code' => '
$( "p" ).hide();
$( "a" ).click(function( event ) {
  event.preventDefault();
  $( this ).hide();
});
',
                         'desc' => 'Hides all paragraphs then the link on click.',
                         'html' => '
<p>Hello</p>
<a href="#">Click to hide me too</a>
<p>Here is another paragraph</p>
'
                       },
                       {
                         'desc' => 'Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.',
                         'html' => '
<button>Hide \'em</button>
<p>Hiya</p>
<p>Such interesting text, eh?</p>
',
                         'css' => '
  p {
    background: #dad;
    font-weight: bold;
  }
',
                         'code' => '
$( "button" ).click(function() {
  $( "p" ).hide( "slow" );
});
'
                       },
                       {
                         'code' => '
$( "#hider" ).click(function() {
  $( "span:last-child" ).hide( "fast", function() {
    // Use arguments.callee so we don\'t need a named function
    $( this ).prev().hide( "fast", arguments.callee );
  });
});
$( "#shower" ).click(function() {
  $( "span" ).show( 2000 );
});
',
                         'html' => '
<button id="hider">Hide</button>
<button id="shower">Show</button>
<div>
  <span>Once</span> <span>upon</span> <span>a</span>
  <span>time</span> <span>there</span> <span>were</span>
  <span>three</span> <span>programmers...</span>
</div>
',
                         'desc' => 'Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.',
                         'css' => '
  span {
    background: #def3ca;
    padding: 3px;
    float: left;
  }
'
                       },
                       {
                         'code' => '
for ( var i = 0; i < 5; i++ ) {
  $( "<div>" ).appendTo( document.body );
}
$( "div" ).click(function() {
  $( this ).hide( 2000, function() {
    $( this ).remove();
  });
});
',
                         'css' => '
  div {
    background: #ece023;
    width: 30px;
    height: 40px;
    margin: 2px;
    float: left;
  }
',
                         'desc' => 'Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.',
                         'html' => '
<div></div>
'
                       }
                     ],
          'name' => 'hide',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'effects/basics'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/hover.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'hover' => {
                                'desc' => 'Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.',
                                'return' => 'jQuery',
                                'signature' => {
                                               'added' => '1.4',
                                               'argument' => {
                                                             'desc' => 'A function to execute when the mouse pointer enters or leaves the element.',
                                                             'argument' => {
                                                                           'type' => 'Event',
                                                                           'name' => 'eventObject'
                                                                         },
                                                             'type' => 'Function',
                                                             'name' => 'handlerInOut'
                                                           }
                                             },
                                'example' => {
                                             'code' => '
$( "li" )
  .filter( ":odd" )
    .hide()
  .end()
  .filter( ":even" )
    .hover(function() {
      $( this )
        .toggleClass( "active" )
        .next()
          .stop( true, true )
          .slideToggle();
    });
',
                                             'css' => '
  ul {
    margin-left: 20px;
    color: blue;
  }
  li {
    cursor: default;
  }
  li.active {
    background: black;
    color: white;
  }
  span {
    color:red;
  }
',
                                             'html' => '
<ul>
  <li>Milk</li>
  <li>White</li>
  <li>Carrots</li>
  <li>Orange</li>
  <li>Broccoli</li>
  <li>Green</li>
</ul>
',
                                             'desc' => 'Slide the next sibling LI up or down on hover, and toggle a class.'
                                           },
                                'longdesc' => {
                                              'pre' => {
                                                       'code' => '
$( selector ).on( "mouseenter mouseleave", handlerInOut );
      '
                                                     },
                                              'p' => [
                                                     {
                                                       'content' => [
                                                                      'The ',
                                                                      ' method, when passed a single function, will execute that handler for both ',
                                                                      ' and ',
                                                                      ' events. This allows the user to use jQuery\'s various toggle methods within the handler or to respond differently within the handler depending on the ',
                                                                      '.'
                                                                    ],
                                                       'code' => [
                                                                 '.hover()',
                                                                 'mouseenter',
                                                                 'mouseleave',
                                                                 'event.type'
                                                               ]
                                                     },
                                                     {
                                                       'content' => [
                                                                      'Calling ',
                                                                      ' is shorthand for:'
                                                                    ],
                                                       'code' => '$(selector).hover(handlerInOut)'
                                                     },
                                                     {
                                                       'content' => [
                                                                      'See the discussions for ',
                                                                      ' and ',
                                                                      ' for more details.'
                                                                    ],
                                                       'code' => [
                                                                 {
                                                                   'a' => {
                                                                          'content' => '.mouseenter()',
                                                                          'href' => '/mouseenter/'
                                                                        }
                                                                 },
                                                                 {
                                                                   'a' => {
                                                                          'href' => '/mouseleave/',
                                                                          'content' => '.mouseleave()'
                                                                        }
                                                                 }
                                                               ]
                                                     }
                                                   ]
                                            },
                                'type' => 'method',
                                'category' => [
                                              {
                                                'slug' => 'events/mouse-events'
                                              },
                                              {
                                                'slug' => 'version/1.0'
                                              }
                                            ]
                              }
                   },
          'desc' => 'Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/html.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'html' => {
                               'signature' => [
                                              {
                                                'argument' => {
                                                              'desc' => 'A string of HTML to set as the content of each matched element.',
                                                              'name' => 'htmlString',
                                                              'type' => 'htmlString'
                                                            },
                                                'added' => '1.0'
                                              },
                                              {
                                                'added' => '1.4',
                                                'argument' => {
                                                              'desc' => {
                                                                        'content' => [
                                                                                       'A function returning the HTML content to set. Receives the
          index position of the element in the set and the old HTML value as arguments.
          jQuery empties the element before calling the function;
          use the oldhtml argument to reference the previous content.
          Within the function, ',
                                                                                       ' refers to the current element in the set.'
                                                                                     ],
                                                                        'code' => 'this'
                                                                      },
                                                              'return' => {
                                                                          'type' => 'htmlString'
                                                                        },
                                                              'type' => 'Function',
                                                              'name' => 'function',
                                                              'argument' => {
                                                                            'oldhtml' => {
                                                                                         'type' => 'htmlString'
                                                                                       },
                                                                            'index' => {
                                                                                       'type' => 'Integer'
                                                                                     }
                                                                          }
                                                            }
                                              }
                                            ],
                               'type' => 'method',
                               'example' => [
                                            {
                                              'code' => '
$( "div" ).html( "<span class=\'red\'>Hello <b>Again</b></span>" );
',
                                              'desc' => 'Add some html to each div.',
                                              'html' => '
<span>Hello</span>
<div></div>
<div></div>
<div></div>
',
                                              'css' => '
  .red {
    color: red;
  }
'
                                            },
                                            {
                                              'css' => '
  div {
    color: blue;
    font-size: 18px;
  }
',
                                              'desc' => 'Add some html to each div then immediately do further manipulations to the inserted html.',
                                              'html' => '
<div></div>
<div></div>
<div></div>
',
                                              'code' => '
$( "div" ).html( "<b>Wow!</b> Such excitement..." );
$( "div b" )
  .append( document.createTextNode( "!!!" ) )
  .css( "color", "red" );
'
                                            }
                                          ],
                               'longdesc' => {
                                             'p' => [
                                                    {
                                                      'content' => [
                                                                     'The ',
                                                                     ' method is not available in XML documents. '
                                                                   ],
                                                      'code' => '.html()'
                                                    },
                                                    {
                                                      'content' => [
                                                                     'When ',
                                                                     ' is used to set an element\'s content,
      any content that was in that element is completely replaced by the new content.
      Additionally, jQuery removes other constructs such as data and event
      handlers from child elements before replacing those elements with the new content.'
                                                                   ],
                                                      'code' => '.html()'
                                                    },
                                                    'Consider the following HTML:',
                                                    {
                                                      'content' => [
                                                                     'The content of ',
                                                                     ' can be set like this:'
                                                                   ],
                                                      'code' => '<div class="demo-container">'
                                                    },
                                                    {
                                                      'code' => '<div class="demo-container">',
                                                      'content' => [
                                                                     'That line of code will replace everything inside ',
                                                                     ':'
                                                                   ]
                                                    },
                                                    {
                                                      'content' => [
                                                                     'As of jQuery 1.4, the ',
                                                                     ' method allows the HTML content to be set by passing in a function.'
                                                                   ],
                                                      'code' => '.html()'
                                                    },
                                                    {
                                                      'content' => [
                                                                     'Given a document with six paragraphs, this example will set the HTML of ',
                                                                     ' to ',
                                                                     '.'
                                                                   ],
                                                      'code' => [
                                                                '<div class="demo-container">',
                                                                '<p>All new content for <em>6 paragraphs!</em></p>'
                                                              ]
                                                    },
                                                    {
                                                      'a' => {
                                                             'href' => 'http://code.google.com/p/html5shiv/',
                                                             'content' => 'compatibility layer'
                                                           },
                                                      'code' => [
                                                                'innerHTML',
                                                                'href'
                                                              ],
                                                      'content' => [
                                                                     'This method uses the browser\'s ',
                                                                     ' property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all ',
                                                                     ' properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate ',
                                                                     '.'
                                                                   ]
                                                    },
                                                    {
                                                      'content' => [
                                                                     'To set the content of a ',
                                                                     ' element, which does not contain HTML, use the ',
                                                                     ' method and not ',
                                                                     '.'
                                                                   ],
                                                      'code' => [
                                                                '<script>',
                                                                '.html()'
                                                              ],
                                                      'a' => {
                                                             'href' => '/text/',
                                                             'code' => '.text()'
                                                           }
                                                    },
                                                    {
                                                      'strong' => 'Note:',
                                                      'content' => [
                                                                     ' In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use ',
                                                                     ' instead of ',
                                                                     ' so that the elements are removed from the document before the new string is assigned to the element.'
                                                                   ],
                                                      'code' => [
                                                                '.empty().html( string )',
                                                                '.html(string)'
                                                              ]
                                                    }
                                                  ],
                                             'pre' => [
                                                      {
                                                        'code' => '
<div class="demo-container">
  <div class="demo-box">Demonstration Box</div>
</div>
      '
                                                      },
                                                      {
                                                        'code' => '
$( "div.demo-container" )
  .html( "<p>All new content. <em>You bet!</em></p>" );
      '
                                                      },
                                                      {
                                                        'code' => '
<div class="demo-container">
  <p>All new content. <em>You bet!</em></p>
</div>
      '
                                                      },
                                                      {
                                                        'code' => '
$( "div.demo-container" ).html(function() {
  var emphasis = "<em>" + $( "p" ).length + " paragraphs!</em>";
  return "<p>All new content for " + emphasis + "</p>";
});
      '
                                                      }
                                                    ]
                                           },
                               'category' => [
                                             {
                                               'slug' => 'attributes'
                                             },
                                             {
                                               'slug' => 'manipulation/dom-insertion-inside'
                                             },
                                             {
                                               'slug' => 'version/1.0'
                                             },
                                             {
                                               'slug' => 'version/1.4'
                                             }
                                           ],
                               'desc' => 'Set the HTML contents of each element in the set of matched elements.',
                               'return' => 'jQuery'
                             }
                   },
          'desc' => 'Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/id-selector.xml ####
Possible keys are: longdesc example name type category signature title sample return desc
$VAR1 = {
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           'document.getElementById()',
                                           'h2#pageTitle'
                                         ],
                                 'content' => [
                                                'For id selectors, jQuery uses the JavaScript function ',
                                                ', which is extremely efficient. When another selector is attached to the id selector, such as ',
                                                ', jQuery performs an additional check before identifying the element as a match.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Calling ',
                                                ' (or ',
                                                ') with an id selector as its argument will return a jQuery object containing a collection of either zero or one DOM element.'
                                              ],
                                 'code' => [
                                           'jQuery()',
                                           '$()'
                                         ]
                               },
                               {
                                 'code' => 'id',
                                 'content' => [
                                                'Each ',
                                                ' value must be used only once within a document. If more than one element has been assigned the same ID, queries that use that ID will only select the first matched element in the DOM. This behavior should not be relied on, however; a document with more than one element using the same ID is invalid.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'If the id contains characters like periods or colons you have to ',
                                                '.'
                                              ],
                                 'a' => {
                                        'href' => 'http://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/',
                                        'content' => 'escape those characters with backslashes'
                                      }
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "#myDiv" ).css( "border", "3px solid red" );
',
                         'html' => '
<div id="notMe"><p>id="notMe"</p></div>
<div id="myDiv">id="myDiv"</div>
',
                         'desc' => 'Select the element with the id "myDiv" and give it a red border.',
                         'css' => '
  div {
    width: 90px;
    height: 90px;
    float: left;
    padding: 5px;
    margin: 5px;
    background-color: #eee;
  }
'
                       },
                       {
                         'code' => '
$( "#myID\\\\.entry\\\\[1\\\\]" ).css( "border", "3px solid red" );
',
                         'html' => '
<div id="myID.entry[0]">id="myID.entry[0]"</div>
<div id="myID.entry[1]">id="myID.entry[1]"</div>
<div id="myID.entry[2]">id="myID.entry[2]"</div>
',
                         'desc' => 'Select the element with the id "myID.entry[1]" and give it a red border. Note how certain characters must be escaped with backslashes.',
                         'css' => '
  div {
    width: 300px;
    float: left;
    padding: 2px;
    margin: 3px;
    background-color: #eee;
  }
'
                       }
                     ],
          'name' => 'id',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/basic-css-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'name' => 'id',
                                       'type' => 'String',
                                       'desc' => 'An ID to search for, specified via the id attribute of an element.'
                                     }
                       },
          'title' => 'ID Selector ("#id")',
          'sample' => '#id',
          'return' => '',
          'desc' => 'Selects a single element with the given id attribute. '
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/image-selector.xml ####
Possible keys are: category name type example longdesc signature sample return title desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'image',
          'type' => 'selector',
          'example' => {
                       'css' => '
  textarea {
    height: 45px;
  }
',
                       'desc' => 'Finds all image inputs.',
                       'html' => '
<form>
  <input type="button" value="Input Button">
  <input type="checkbox">
  <input type="file">
  <input type="hidden">
  <input type="image">
  <input type="password">
  <input type="radio">
  <input type="reset">
  <input type="submit">
  <input type="text">
  <select>
    <option>Option</option>
  </select>
  <textarea></textarea>
  <button>Button</button>
</form>
<div></div>
',
                       'code' => '
var input = $( "input:image" ).css({
  background:"yellow",
  border:"3px red solid"
});
$( "div" )
  .text( "For this type jQuery found " + input.length + "." )
  .css( "color", "red" );
$( "form" ).submit(function( event ) {
  event.preventDefault();
});
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => ' is equivalent to ',
                               'code' => [
                                         ':image',
                                         '[type="image"]'
                                       ]
                             }
                      },
          'signature' => {
                         'added' => '1.0'
                       },
          'sample' => ':image',
          'return' => '',
          'title' => ':image Selector',
          'desc' => 'Selects all elements of type image.',
          'note' => {
                    'data-alt' => '[type="image"]',
                    'data-selector' => ':image',
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension-alt'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/index.xml ####
Possible keys are: desc return title signature name type example longdesc category
$VAR1 = {
          'desc' => 'Search for a given element from among the matched elements.',
          'return' => 'Integer',
          'title' => '.index()',
          'signature' => [
                         {
                           'added' => '1.4'
                         },
                         {
                           'argument' => {
                                         'type' => 'Selector',
                                         'name' => 'selector',
                                         'desc' => 'A selector representing a jQuery collection in which to look for an element.'
                                       },
                           'added' => '1.4'
                         },
                         {
                           'argument' => {
                                         'type' => {
                                                   'jQuery' => {},
                                                   'Element' => {}
                                                 },
                                         'name' => 'element',
                                         'desc' => 'The DOM element or first element within the jQuery object to look for.'
                                       },
                           'added' => '1.0'
                         }
                       ],
          'name' => 'index',
          'type' => 'method',
          'example' => [
                       {
                         'html' => '
<span>Click a div!</span>
<div>First div</div>
<div>Second div</div>
<div>Third div</div>
',
                         'desc' => 'On click, returns the index (zero-based) of that div in the page.',
                         'css' => '
  div {
    background: yellow;
    margin: 5px;
  }
  span {
    color: red;
  }
',
                         'code' => '
$( "div" ).click(function() {
  // `this` is the DOM element that was clicked
  var index = $( "div" ).index( this );
  $( "span" ).text( "That was div index #" + index );
});
'
                       },
                       {
                         'css' => '
  div {
    font-weight: bold;
    color: #090;
  }
',
                         'html' => '
<ul>
  <li id="foo">foo</li>
  <li id="bar">bar</li>
  <li id="baz">baz</li>
</ul>
<div></div>
',
                         'desc' => 'Returns the index for the element with ID bar.',
                         'code' => '
var listItem = $( "#bar" );
$( "div" ).html( "Index: " + $( "li" ).index( listItem ) );
'
                       },
                       {
                         'code' => '
var listItems = $( "li:gt(0)" );
$( "div" ).html( "Index: " + $( "li" ).index( listItems ) );
',
                         'css' => '
  div {
    font-weight: bold;
    color: #090;
  }
',
                         'html' => '
<ul>
  <li id="foo">foo</li>
  <li id="bar">bar</li>
  <li id="baz">baz</li>
</ul>
<div></div>
',
                         'desc' => 'Returns the index for the first item in the jQuery collection.'
                       },
                       {
                         'code' => '
$( "div" ).html( "Index: " +  $( "#bar" ).index( "li" ) );
',
                         'desc' => 'Returns the index for the element with ID bar in relation to all <li> elements.',
                         'html' => '
<ul>
  <li id="foo">foo</li>
  <li id="bar">bar</li>
  <li id="baz">baz</li>
</ul>
<div></div>
',
                         'css' => '
  div {
    font-weight: bold;
    color: #090;
  }
'
                       },
                       {
                         'code' => '
var barIndex = $( "#bar" ).index();
$( "div" ).html( "Index: " +  barIndex );
',
                         'desc' => 'Returns the index for the element with ID bar in relation to its siblings.',
                         'html' => '
<ul>
  <li id="foo">foo</li>
  <li id="bar">bar</li>
  <li id="baz">baz</li>
</ul>
<div></div>
',
                         'css' => '
  div {
    font-weight: bold;
    color: #090;
  }
'
                       },
                       {
                         'desc' => 'Returns -1, as there is no element with ID foobar.',
                         'html' => '
<ul>
  <li id="foo">foo</li>
  <li id="bar">bar</li>
  <li id="baz">baz</li>
</ul>
<div></div>
',
                         'css' => '
  div {
    font-weight: bold;
    color: #090;
  }
',
                         'code' => '
var foobar = $( "li" ).index( $( "#foobar" ) );
$( "div" ).html( "Index: " + foobar );
'
                       }
                     ],
          'longdesc' => {
                        'h4' => [
                                'Return Values',
                                'Detail'
                              ],
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li id="foo">foo</li>
  <li id="bar">bar</li>
  <li id="baz">baz</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
var listItem = document.getElementById( "bar" );
alert( "Index: " + $( "li" ).index( listItem ) );
    '
                                 },
                                 {
                                   'code' => '
var listItem = $( "#bar" );
alert( "Index: " + $( "li" ).index( listItem ) );
    '
                                 },
                                 {
                                   'code' => '
var listItems = $( "li:gt(0)" );
alert( "Index: " + $( "li" ).index( listItems ) );
    '
                                 },
                                 {
                                   'code' => '
var listItem = $( "#bar" );
alert( "Index: " + listItem.index( "li" ) );
    '
                                 },
                                 {
                                   'code' => '
alert( "Index: " + $( "#bar" ).index() );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'If no argument is passed to the ',
                                                ' method, the return value is an integer indicating the position of the first element within the jQuery object relative to its sibling elements.'
                                              ],
                                 'code' => '.index()'
                               },
                               {
                                 'code' => [
                                           '.index()',
                                           '.index()'
                                         ],
                                 'content' => [
                                                'If ',
                                                ' is called on a collection of elements and a DOM element or jQuery object is passed in, ',
                                                ' returns an integer indicating the position of the passed element relative to the original collection.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '.index()',
                                           '.index()'
                                         ],
                                 'content' => [
                                                'If a selector string is passed as an argument, ',
                                                ' returns an integer indicating the position of the first element within the jQuery object relative to the elements matched by the selector. If the element is not found, ',
                                                ' will return -1.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The complementary operation to ',
                                                ', which accepts an index and returns a DOM node, ',
                                                ' can take a DOM node and returns an index. Suppose we have a simple unordered list on the page:'
                                              ],
                                 'code' => [
                                           '.get()',
                                           '.index()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'If we retrieve one of the three list items (for example, through a DOM function or as the context to an event handler), ',
                                                ' can search for this list item within the set of matched elements:'
                                              ],
                                 'code' => '.index()'
                               },
                               'We get back the zero-based position of the list item:',
                               {
                                 'samp' => 'Index: 1'
                               },
                               {
                                 'content' => [
                                                'Similarly, if we retrieve a jQuery object consisting of one of the three list items, ',
                                                ' will search for that list item:'
                                              ],
                                 'code' => '.index()'
                               },
                               'We get back the zero-based position of the list item:',
                               {
                                 'samp' => 'Index: 1'
                               },
                               {
                                 'code' => '.index()',
                                 'content' => [
                                                'Note that if the jQuery collection used as the ',
                                                ' method\'s argument contains more than one element, the first element within the matched set of elements will be used.'
                                              ]
                               },
                               'We get back the zero-based position of the first list item within the matched set:',
                               {
                                 'samp' => 'Index: 1'
                               },
                               {
                                 'code' => '.index()',
                                 'content' => [
                                                'If we use a string as the ',
                                                ' method\'s argument, it is interpreted as a jQuery selector string. The first element among the object\'s matched elements which also matches this selector is located.'
                                              ]
                               },
                               'We get back the zero-based position of the list item:',
                               {
                                 'samp' => 'Index: 1'
                               },
                               {
                                 'content' => [
                                                'If we omit the argument, ',
                                                ' will return the position of the first element within the set of matched elements in relation to its siblings:'
                                              ],
                                 'code' => '.index()'
                               },
                               'Again, we get back the zero-based position of the list item:',
                               {
                                 'samp' => 'Index: 1'
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'miscellaneous/dom-element-methods'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/innerHeight.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element.',
          'entry' => {
                     'innerHeight' => {
                                      'signature' => [
                                                     {
                                                       'added' => '1.8.0',
                                                       'argument' => {
                                                                     'desc' => 'A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).',
                                                                     'type' => {
                                                                               'String' => {},
                                                                               'Number' => {}
                                                                             },
                                                                     'name' => 'value'
                                                                   }
                                                     },
                                                     {
                                                       'argument' => {
                                                                     'argument' => {
                                                                                   'height' => {
                                                                                               'type' => 'Number'
                                                                                             },
                                                                                   'index' => {
                                                                                              'type' => 'Integer'
                                                                                            }
                                                                                 },
                                                                     'name' => 'function',
                                                                     'return' => {
                                                                                 'type' => {
                                                                                           'Number' => {},
                                                                                           'String' => {}
                                                                                         }
                                                                               },
                                                                     'type' => 'Function',
                                                                     'desc' => {
                                                                               'content' => [
                                                                                              'A function returning the inner height (including padding but not border) to set. Receives the index position of the element in the set and the old inner height as arguments. Within the function, ',
                                                                                              ' refers to the current element in the set.'
                                                                                            ],
                                                                               'code' => 'this'
                                                                             }
                                                                   },
                                                       'added' => '1.8.0'
                                                     }
                                                   ],
                                      'type' => 'method',
                                      'longdesc' => {
                                                    'p' => [
                                                           {
                                                             'content' => [
                                                                            'When calling ',
                                                                            ', the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the height (such as ',
                                                                            ', ',
                                                                            ', or ',
                                                                            '). Note that in modern browsers, the CSS height property does not include padding, border, or margin, unless the ',
                                                                            ' CSS property is used.'
                                                                          ],
                                                             'code' => [
                                                                       '.innerHeight("value")',
                                                                       '100px',
                                                                       '50%',
                                                                       'auto',
                                                                       'box-sizing'
                                                                     ]
                                                           },
                                                           'If no explicit unit is specified (like "em" or "%") then "px" is assumed.'
                                                         ]
                                                  },
                                      'example' => {
                                                   'html' => '
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
',
                                                   'desc' => 'Change the inner height of each div the first time it is clicked (and change its color).',
                                                   'css' => '
div {
  width: 60px;
  padding: 10px;
  height: 70px;
  float: left;
  margin: 5px;
  background: red;
  cursor: pointer;
}
.mod {
  background: blue;
  cursor: default;
}
',
                                                   'code' => '
var modHeight = 70;
$( "div" ).one( "click", function() {
  $( this ).innerHeight( modHeight ).addClass( "mod" );
  modHeight -= 8;
});
'
                                                 },
                                      'category' => [
                                                    {
                                                      'slug' => 'css'
                                                    },
                                                    {
                                                      'slug' => 'dimensions'
                                                    },
                                                    {
                                                      'slug' => 'manipulation/style-properties'
                                                    },
                                                    {
                                                      'slug' => 'version/1.8'
                                                    }
                                                  ],
                                      'desc' => 'Set the CSS inner height of each element in the set of matched elements.',
                                      'return' => 'jQuery'
                                    }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/innerWidth.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element.',
          'entry' => {
                     'innerWidth' => {
                                     'desc' => 'Set the CSS inner width of each element in the set of matched elements.',
                                     'return' => 'jQuery',
                                     'signature' => [
                                                    {
                                                      'argument' => {
                                                                    'name' => 'value',
                                                                    'type' => {
                                                                              'Number' => {},
                                                                              'String' => {}
                                                                            },
                                                                    'desc' => 'A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).'
                                                                  },
                                                      'added' => '1.8.0'
                                                    },
                                                    {
                                                      'argument' => {
                                                                    'argument' => {
                                                                                  'index' => {
                                                                                             'type' => 'Integer'
                                                                                           },
                                                                                  'width' => {
                                                                                             'type' => 'Number'
                                                                                           }
                                                                                },
                                                                    'return' => {
                                                                                'type' => {
                                                                                          'Number' => {},
                                                                                          'String' => {}
                                                                                        }
                                                                              },
                                                                    'type' => 'Function',
                                                                    'name' => 'function',
                                                                    'desc' => {
                                                                              'code' => 'this',
                                                                              'content' => [
                                                                                             'A function returning the inner width (including padding but not border) to set. Receives the index position of the element in the set and the old inner width as arguments. Within the function, ',
                                                                                             ' refers to the current element in the set.'
                                                                                           ]
                                                                            }
                                                                  },
                                                      'added' => '1.8.0'
                                                    }
                                                  ],
                                     'category' => [
                                                   {
                                                     'slug' => 'css'
                                                   },
                                                   {
                                                     'slug' => 'dimensions'
                                                   },
                                                   {
                                                     'slug' => 'manipulation/style-properties'
                                                   },
                                                   {
                                                     'slug' => 'version/1.8'
                                                   }
                                                 ],
                                     'type' => 'method',
                                     'longdesc' => {
                                                   'p' => [
                                                          {
                                                            'content' => [
                                                                           'When calling ',
                                                                           ', the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the width (such as ',
                                                                           ', ',
                                                                           ', or ',
                                                                           '). Note that in modern browsers, the CSS width property does not include padding, border, or margin, unless the ',
                                                                           ' CSS property is used.'
                                                                         ],
                                                            'code' => [
                                                                      '.innerWidth("value")',
                                                                      '100px',
                                                                      '50%',
                                                                      'auto',
                                                                      'box-sizing'
                                                                    ]
                                                          },
                                                          'If no explicit unit is specified (like "em" or "%") then "px" is assumed.'
                                                        ]
                                                 },
                                     'example' => {
                                                  'code' => '
var modWidth = 60;
$( "div" ).one( "click", function() {
$( this ).innerWidth( modWidth ).addClass( "mod" );
modWidth -= 8;
});
',
                                                  'desc' => 'Change the inner width of each div the first time it is clicked (and change its color).',
                                                  'html' => '
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
',
                                                  'css' => '
div {
width: 60px;
padding: 10px;
height: 50px;
float: left;
margin: 5px;
background: red;
cursor: pointer;
}
.mod {
background: blue;
cursor: default;
}
'
                                                }
                                   }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/input-selector.xml ####
Possible keys are: category longdesc example type name signature title sample return note desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The ',
                                              ' selector basically selects all form controls.'
                                            ],
                               'code' => ':input'
                             }
                      },
          'example' => {
                       'code' => '
var allInputs = $( ":input" );
var formChildren = $( "form > *" );
$( "#messages" ).text( "Found " + allInputs.length + " inputs and the form has " +
  formChildren.length + " children." );

$( "form" ).submit(function( event ) {
  event.preventDefault();
});
',
                       'desc' => 'Finds all input elements.',
                       'html' => '
<form>
  <input type="button" value="Input Button">
  <input type="checkbox">
  <input type="file">
  <input type="hidden">
  <input type="image">
  <input type="password">
  <input type="radio">
  <input type="reset">
  <input type="submit">
  <input type="text">
  <select>
    <option>Option</option>
  </select>
  <textarea></textarea>
  <button>Button</button>
</form>
<div id="messages"></div>
',
                       'css' => '
  textarea {
    height: 25px;
  }
  '
                     },
          'type' => 'selector',
          'name' => 'input',
          'signature' => {
                         'added' => '1.0'
                       },
          'title' => ':input Selector',
          'sample' => ':input',
          'return' => '',
          'note' => {
                    'data-selector' => ':input',
                    'id' => 'jquery-selector-extension',
                    'type' => 'additional'
                  },
          'desc' => 'Selects all input, textarea, select and button elements.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/insertAfter.xml ####
Possible keys are: title return note desc category example longdesc name type signature
$VAR1 = {
          'title' => '.insertAfter()',
          'return' => 'jQuery',
          'note' => {
                    'svg-support' => {
                                     'type' => 'additional'
                                   },
                    'html-code-execution' => {
                                             'type' => 'additional'
                                           }
                  },
          'desc' => 'Insert every element in the set of matched elements after the target.',
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-outside'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => {
                       'code' => '
$( "p" ).insertAfter( "#foo" );
',
                       'css' => '
  #foo {
    background: yellow;
  }
',
                       'html' => '
<p> is what I said... </p>
<div id="foo">FOO!</div>
',
                       'desc' => 'Insert all paragraphs after an element with id of "foo". Same as $( "#foo" ).after( "p" )'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '.after()',
                                                    'href' => '/after/'
                                                  }
                                           },
                                           '.insertAfter()',
                                           '.after()',
                                           '.insertAfter()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                ' methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With ',
                                                ', the selector expression preceding the method is the container after which the content is inserted. With ',
                                                ', on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.'
                                              ]
                               },
                               'Consider the following HTML:',
                               'We can create content and insert it after several elements at once:',
                               {
                                 'content' => [
                                                'Each inner ',
                                                ' element gets this new content:'
                                              ],
                                 'code' => '<div>'
                               },
                               'We can also select an element on the page and insert it after another:',
                               'If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved after the target (not cloned) and a new set consisting of the inserted element is returned:',
                               'If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first, and that new set (the original element plus clones) is returned.',
                               {
                                 'code' => '.end()',
                                 'content' => [
                                                ' the append-to-single-element case did not create a new set, but instead returned the original set which made it difficult to use the ',
                                                ' method reliably when being used with an unknown number of elements.'
                                              ],
                                 'strong' => 'Before jQuery 1.9,'
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <h2>Greetings</h2>
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "<p>Test</p>" ).insertAfter( ".inner" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <h2>Greetings</h2>
  <div class="inner">Hello</div>
  <p>Test</p>
  <div class="inner">Goodbye</div>
  <p>Test</p>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "h2" ).insertAfter( $( ".container" ) );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
<h2>Greetings</h2>
    '
                                 }
                               ]
                      },
          'name' => 'insertAfter',
          'type' => 'method',
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'desc' => 'A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.',
                                       'type' => {
                                                 'htmlString' => {},
                                                 'Array' => {},
                                                 'jQuery' => {},
                                                 'Selector' => {},
                                                 'Element' => {}
                                               },
                                       'name' => 'target'
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/insertBefore.xml ####
Possible keys are: category type name example longdesc signature return title desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-outside'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'method',
          'name' => 'insertBefore',
          'example' => {
                       'desc' => 'Insert all paragraphs before an element with id of "foo". Same as $( "#foo" ).before( "p" )',
                       'html' => '
<div id="foo">FOO!</div>
<p>I would like to say: </p>
',
                       'css' => '
  #foo {
    background: yellow;
  }
',
                       'code' => '
$( "p" ).insertBefore( "#foo" );
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/before/',
                                                    'content' => '.before()'
                                                  }
                                           },
                                           '.insertBefore()',
                                           '.before()',
                                           '.insertBefore()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                ' methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With ',
                                                ', the selector expression preceding the method is the container before which the content is inserted. With ',
                                                ', on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.'
                                              ]
                               },
                               'Consider the following HTML:',
                               'We can create content and insert it before several elements at once:',
                               {
                                 'code' => '<div>',
                                 'content' => [
                                                'Each inner ',
                                                ' element gets this new content:'
                                              ]
                               },
                               'We can also select an element on the page and insert it before another:',
                               'If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved before the target (not cloned) and a new set consisting of the inserted element is returned:',
                               'If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first, and that new set (the original element plus clones) is returned.',
                               {
                                 'code' => '.end()',
                                 'content' => [
                                                ' the append-to-single-element case did not create a new set, but instead returned the original set which made it difficult to use the ',
                                                ' method reliably when being used with an unknown number of elements.'
                                              ],
                                 'strong' => 'Before jQuery 1.9,'
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <h2>Greetings</h2>
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "<p>Test</p>" ).insertBefore( ".inner" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <h2>Greetings</h2>
  <p>Test</p>
  <div class="inner">Hello</div>
  <p>Test</p>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "h2" ).insertBefore( $( ".container" ) );
    '
                                 },
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 }
                               ]
                      },
          'signature' => {
                         'argument' => {
                                       'desc' => 'A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.',
                                       'type' => {
                                                 'Array' => {},
                                                 'htmlString' => {},
                                                 'jQuery' => {},
                                                 'Selector' => {},
                                                 'Element' => {}
                                               },
                                       'name' => 'target'
                                     },
                         'added' => '1.0'
                       },
          'return' => 'jQuery',
          'title' => '.insertBefore()',
          'desc' => 'Insert every element in the set of matched elements before the target.',
          'note' => {
                    'html-code-execution' => {
                                             'type' => 'additional'
                                           },
                    'svg-support' => {
                                     'type' => 'additional'
                                   }
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/is.xml ####
Possible keys are: return title desc category type name longdesc example signature
$VAR1 = {
          'return' => 'Boolean',
          'title' => '.is()',
          'desc' => {
                    'code' => 'true',
                    'content' => [
                                   'Check the current matched set of elements against a selector, element, or jQuery object and return ',
                                   ' if at least one of these elements matches the given arguments.'
                                 ]
                  },
          'category' => [
                        {
                          'slug' => 'traversing/filtering'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.6'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'type' => 'method',
          'name' => 'is',
          'longdesc' => {
                        'h4' => 'Using a Function',
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list <strong>item 1</strong></li>
  <li><span>list item 2</span></li>
  <li>list item 3</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "ul" ).click(function( event ) {
  var target = $( event.target );
  if ( target.is( "li" ) ) {
    target.css( "background-color", "red" );
  }
});
    '
                                 },
                                 {
                                   'code' => '
<ul>
  <li><strong>list</strong> item 1 - one strong tag</li>
  <li><strong>list</strong> item <strong>2</strong> -
    two <span>strong tags</span></li>
  <li>list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).click(function() {
  var li = $( this ),
    isWithTwo = li.is(function() {
      return $( "strong", this ).length === 2;
    });
  if ( isWithTwo ) {
    li.css( "background-color", "green" );
  } else {
    li.css( "background-color", "red" );
  }
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => '.is()',
                                 'content' => [
                                                'Unlike other filtering methods, ',
                                                ' does not create a new jQuery object. Instead, it allows you to test the contents of a jQuery object without modification. This is often useful inside callbacks, such as event handlers.'
                                              ]
                               },
                               'Suppose you have a list, with two of its items containing a child element:',
                               'You can attach a click handler to the <ul> element, and then limit the code to be triggered only when a list item itself, not one of its children, is clicked:',
                               {
                                 'code' => [
                                           '<strong>',
                                           '<span>'
                                         ],
                                 'content' => [
                                                'Now, when the user clicks on the word "list" in the first item or anywhere in the third item, the clicked list item will be given a red background. However, when the user clicks on item 1 in the first item or anywhere in the second item, nothing will occur, because in those cases the target of the event would be ',
                                                ' or ',
                                                ', respectively.'
                                              ]
                               },
                               {
                                 'em' => 'not',
                                 'content' => [
                                                'Prior to jQuery 1.7, in selector strings with positional selectors such as ',
                                                ', ',
                                                ', or ',
                                                ', the positional filtering is done against the jQuery object passed to ',
                                                ', ',
                                                ' against the containing document. So for the HTML shown above, an expression such as ',
                                                ' returns ',
                                                ', but ',
                                                ' returns ',
                                                '. In addition, a bug in Sizzle prevented many positional selectors from working properly. These two factors made positional selectors almost unusable in filters.'
                                              ],
                                 'code' => [
                                           ':first',
                                           ':gt()',
                                           ':even',
                                           '.is()',
                                           '$( "li:first" ).is( "li:last" )',
                                           'true',
                                           '$( "li:first-child" ).is( "li:last-child" )',
                                           'false'
                                         ]
                               },
                               {
                                 'code' => [
                                           '$( "li:first" ).is( "li:last" )',
                                           'false'
                                         ],
                                 'content' => [
                                                'Starting with jQuery 1.7, selector strings with positional selectors apply the selector against the document, and then determine whether the first element of the current jQuery set matches any of the resulting elements. So for the HTML shown above, an expression such as ',
                                                ' returns ',
                                                '. Note that since positional selectors are jQuery additions and not W3C standard, we recommend using the W3C selectors whenever feasible.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'true',
                                           '.is()',
                                           'true'
                                         ],
                                 'content' => [
                                                'The second form of this method evaluates expressions related to elements based on a function rather than a selector. For each element, if the function returns ',
                                                ', ',
                                                ' returns ',
                                                ' as well. For example, given a somewhat more involved HTML snippet:'
                                              ]
                               },
                               {
                                 'code' => [
                                           '<li>',
                                           '<strong>',
                                           '<li>'
                                         ],
                                 'content' => [
                                                'You can attach a click handler to every ',
                                                ' that evaluates the number of ',
                                                ' elements within the clicked ',
                                                ' at that time like so:'
                                              ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "div" ).one( "click", function() {
  if ( $( this ).is( ":first-child" ) ) {
    $( "p" ).text( "It\'s the first div." );
  } else if ( $( this ).is( ".blue,.red" ) ) {
    $( "p" ).text( "It\'s a blue or red div." );
  } else if ( $( this ).is( ":contains(\'Peter\')" ) ) {
    $( "p" ).text( "It\'s Peter!" );
  } else {
    $( "p" ).html( "It\'s nothing <em>special</em>." );
  }
  $( "p" ).hide().slideDown( "slow" );
  $( this ).css({
    "border-style": "inset",
    cursor: "default"
  });
});
',
                         'html' => '
<div></div>
<div class="blue"></div>
<div></div>
<div class="red"></div>
<div><br/><span>Peter</span></div>
<div class="blue"></div>
<p>&nbsp;</p>
',
                         'desc' => 'Shows a few ways is() can be used inside an event handler.',
                         'css' => '
  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 4px outset;
    background: green;
    text-align: center;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    background: blue;
  }
  .red {
    background: red;
  }
  span {
    color: white;
    font-size: 16px;
  }
  p {
    color: red;
    font-weight: bolder;
    background: yellow;
    margin: 3px;
    clear: left;
    display: none;
  }
'
                       },
                       {
                         'css' => '
  div {
    color: red;
  }
',
                         'html' => '
<form>
  <input type="checkbox">
</form>
<div></div>
',
                         'desc' => 'Returns true, because the parent of the input is a form element.',
                         'code' => '
var isFormParent = $( "input[type=\'checkbox\']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );
'
                       },
                       {
                         'css' => '
  div {
    color: red;
  }
',
                         'html' => '
<form>
  <p><input type="checkbox"></p>
</form>
<div></div>
',
                         'desc' => 'Returns false, because the parent of the input is a p element.',
                         'code' => '
var isFormParent = $( "input[type=\'checkbox\']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );
'
                       },
                       {
                         'code' => '
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  var li = $( this );
  if ( li.is( alt ) ) {
    li.slideUp();
  } else {
    li.css( "background", "red" );
  }
});
',
                         'css' => '
  li {
    cursor: pointer;
  }
',
                         'desc' => 'Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.',
                         'html' => '
<ul id="browsers">
  <li>Chrome</li>
  <li>Safari</li>
  <li>Firefox</li>
  <li>Opera</li>
</ul>
'
                       },
                       {
                         'css' => '
  li {
    cursor: pointer;
  }
',
                         'html' => '
<ul id="browsers">
  <li>Chrome</li>
  <li>Safari</li>
  <li>Firefox</li>
  <li>Opera</li>
</ul>
',
                         'desc' => 'An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.',
                         'code' => '
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  if ( alt.is( this ) ) {
    $( this ).slideUp();
  } else {
    $( this ).css( "background", "red" );
  }
});
'
                       }
                     ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'desc' => 'A string containing a selector expression to match elements against.',
                                         'name' => 'selector',
                                         'type' => 'Selector'
                                       }
                         },
                         {
                           'added' => '1.6',
                           'argument' => {
                                         'argument' => {
                                                       'index' => {
                                                                  'type' => 'Integer'
                                                                },
                                                       'element' => {
                                                                    'type' => 'Element'
                                                                  }
                                                     },
                                         'type' => 'Function',
                                         'return' => {
                                                     'type' => 'Boolean'
                                                   },
                                         'name' => 'function',
                                         'desc' => {
                                                   'content' => [
                                                                  'A function used as a test for every element in the set. It accepts two arguments, ',
                                                                  ', which is the element\'s index in the jQuery collection, and ',
                                                                  ', which is the DOM element. Within the function, ',
                                                                  ' refers to the current DOM element.'
                                                                ],
                                                   'code' => [
                                                             'index',
                                                             'element',
                                                             'this'
                                                           ]
                                                 }
                                       }
                         },
                         {
                           'added' => '1.6',
                           'argument' => {
                                         'name' => 'selection',
                                         'type' => 'jQuery',
                                         'desc' => 'An existing jQuery object to match the current set of elements against.'
                                       }
                         },
                         {
                           'argument' => {
                                         'type' => 'Element',
                                         'name' => 'elements',
                                         'desc' => 'One or more elements to match the current set of elements against.'
                                       },
                           'added' => '1.6'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jquery-2.xml ####
Possible keys are: desc title return signature category example longdesc type name
$VAR1 = {
          'desc' => 'A string containing the jQuery version number.',
          'title' => '.jquery',
          'return' => 'String',
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'internals'
                        },
                        {
                          'slug' => 'properties/jquery-object-instance-properties'
                        }
                      ],
          'example' => [
                       {
                         'desc' => 'Determine if an object is a jQuery object',
                         'code' => '
var a = { what: "A regular JS object" },
  b = $( "body" );

if ( a.jquery ) { // Falsy, since it\'s undefined
  alert( "a is a jQuery object!" );
}

if ( b.jquery ) { // Truthy, since it\'s a string
    alert( "b is a jQuery object!" );
}
'
                       },
                       {
                         'desc' => 'Get the current version of jQuery running on the page',
                         'code' => '
alert( "You are running jQuery version: " + $.fn.jquery );
'
                       }
                     ],
          'longdesc' => {
                        'p' => {
                               'code' => [
                                         '.jquery',
                                         '$.fn',
                                         'jQuery'
                                       ],
                               'content' => [
                                              'The ',
                                              ' property is assigned to the jQuery prototype, commonly referred to by its alias ',
                                              '. It is a string containing the version number of ',
                                              ', such as "1.5.0" or "1.4.4".'
                                            ]
                             }
                      },
          'type' => 'property',
          'name' => 'jquery'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.ajax.xml ####
Possible keys are: desc note return title signature type name example longdesc category
$VAR1 = {
          'desc' => 'Perform an asynchronous HTTP (Ajax) request.',
          'note' => {
                    'same-origin-policy-exceptions' => {
                                                       'type' => 'additional'
                                                     },
                    'same-origin-policy' => {
                                            'type' => 'additional'
                                          }
                  },
          'return' => 'jqXHR',
          'title' => 'jQuery.ajax()',
          'signature' => [
                         {
                           'added' => '1.5',
                           'argument' => {
                                         'settings' => {
                                                       'desc' => {
                                                                 'content' => [
                                                                                'A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with ',
                                                                                '. See ',
                                                                                ' below for a complete list of all settings.'
                                                                              ],
                                                                 'a' => [
                                                                        {
                                                                          'content' => '$.ajaxSetup()',
                                                                          'href' => '/jQuery.ajaxSetup/'
                                                                        },
                                                                        {
                                                                          'href' => '#jQuery-ajax-settings',
                                                                          'content' => 'jQuery.ajax( settings )'
                                                                        }
                                                                      ]
                                                               },
                                                       'optional' => 'true',
                                                       'type' => 'PlainObject'
                                                     },
                                         'url' => {
                                                  'desc' => 'A string containing the URL to which the request is sent.',
                                                  'type' => 'String'
                                                }
                                       }
                         },
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'desc' => {
                                                   'a' => {
                                                          'content' => '$.ajaxSetup()',
                                                          'href' => '/jQuery.ajaxSetup/'
                                                        },
                                                   'content' => [
                                                                  'A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with ',
                                                                  '.'
                                                                ]
                                                 },
                                         'property' => {
                                                       'xhrFields' => {
                                                                      'desc' => {
                                                                                'p' => [
                                                                                       {
                                                                                         'code' => [
                                                                                                   {
                                                                                                     'abbr' => {
                                                                                                               'title' => 'XMLHttpRequest',
                                                                                                               'content' => 'XHR'
                                                                                                             }
                                                                                                   },
                                                                                                   'withCredentials',
                                                                                                   'true'
                                                                                                 ],
                                                                                         'content' => [
                                                                                                        'An object of fieldName-fieldValue pairs to set on the native ',
                                                                                                        ' object. For example, you can use it to set ',
                                                                                                        ' to ',
                                                                                                        ' for cross-domain requests if needed.'
                                                                                                      ]
                                                                                       },
                                                                                       {
                                                                                         'strong' => 'In jQuery 1.5',
                                                                                         'content' => [
                                                                                                        ', the ',
                                                                                                        ' property was not propagated to the native ',
                                                                                                        ' and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.'
                                                                                                      ],
                                                                                         'code' => [
                                                                                                   'withCredentials',
                                                                                                   'XHR'
                                                                                                 ]
                                                                                       }
                                                                                     ],
                                                                                'pre' => {
                                                                                         'code' => '
$.ajax({
   url: a_cross_domain_url,
   xhrFields: {
      withCredentials: true
   }
});
          '
                                                                                       }
                                                                              },
                                                                      'type' => 'PlainObject',
                                                                      'added' => '1.5.1'
                                                                    },
                                                       'statusCode' => {
                                                                       'added' => '1.5',
                                                                       'type' => 'PlainObject',
                                                                       'desc' => {
                                                                                 'p' => [
                                                                                        'An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:',
                                                                                        {
                                                                                          'content' => [
                                                                                                         'If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the ',
                                                                                                         ' callback.'
                                                                                                       ],
                                                                                          'code' => 'error'
                                                                                        }
                                                                                      ],
                                                                                 'pre' => {
                                                                                          'code' => '
$.ajax({
  statusCode: {
    404: function() {
      alert( "page not found" );
    }
  }
});
        '
                                                                                        }
                                                                               },
                                                                       'default' => '{}'
                                                                     },
                                                       'url' => {
                                                                'type' => 'String',
                                                                'default' => 'The current page',
                                                                'desc' => ' A string containing the URL to which the request is sent.'
                                                              },
                                                       'complete' => {
                                                                     'type' => 'Function',
                                                                     'argument' => {
                                                                                   'jqXHR' => {
                                                                                              'type' => 'jqXHR'
                                                                                            },
                                                                                   'textStatus' => {
                                                                                                   'type' => 'String'
                                                                                                 }
                                                                                 },
                                                                     'desc' => {
                                                                               'strong' => 'As of jQuery 1.5',
                                                                               'content' => [
                                                                                              'A function to be called when the request finishes (after ',
                                                                                              ' and ',
                                                                                              ' callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (',
                                                                                              ', ',
                                                                                              ', ',
                                                                                              ', ',
                                                                                              ', ',
                                                                                              ', ',
                                                                                              ', or ',
                                                                                              '). ',
                                                                                              ', the ',
                                                                                              ' setting can accept an array of functions. Each function will be called in turn. This is an ',
                                                                                              '.'
                                                                                            ],
                                                                               'code' => [
                                                                                         'success',
                                                                                         'error',
                                                                                         '"success"',
                                                                                         '"notmodified"',
                                                                                         '"nocontent"',
                                                                                         '"error"',
                                                                                         '"timeout"',
                                                                                         '"abort"',
                                                                                         '"parsererror"',
                                                                                         'complete'
                                                                                       ],
                                                                               'a' => {
                                                                                      'content' => 'Ajax Event',
                                                                                      'href' => '/Ajax_Events/'
                                                                                    }
                                                                             }
                                                                   },
                                                       'ifModified' => {
                                                                       'type' => 'Boolean',
                                                                       'default' => 'false',
                                                                       'desc' => {
                                                                                 'content' => [
                                                                                                'Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is ',
                                                                                                ', ignoring the header. In jQuery 1.4 this technique also checks the \'etag\' specified by the server to catch unmodified data.'
                                                                                              ],
                                                                                 'code' => 'false'
                                                                               }
                                                                     },
                                                       'headers' => {
                                                                    'added' => '1.5',
                                                                    'type' => 'PlainObject',
                                                                    'default' => '{}',
                                                                    'desc' => {
                                                                              'content' => [
                                                                                             'An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header ',
                                                                                             ' is always added, but its default ',
                                                                                             ' value can be changed here.  Values in the ',
                                                                                             ' setting can also be overwritten from within the ',
                                                                                             ' function.'
                                                                                           ],
                                                                              'code' => [
                                                                                        'X-Requested-With: XMLHttpRequest',
                                                                                        'XMLHttpRequest',
                                                                                        'headers',
                                                                                        'beforeSend'
                                                                                      ]
                                                                            }
                                                                  },
                                                       'isLocal' => {
                                                                    'desc' => {
                                                                              'content' => [
                                                                                             'Allow the current environment to be recognized as "local," (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: ',
                                                                                             ', ',
                                                                                             ', and ',
                                                                                             '. If the ',
                                                                                             ' setting needs modification, it is recommended to do so once in the ',
                                                                                             ' method.'
                                                                                           ],
                                                                              'code' => [
                                                                                        'file',
                                                                                        '*-extension',
                                                                                        'widget',
                                                                                        'isLocal',
                                                                                        '$.ajaxSetup()'
                                                                                      ]
                                                                            },
                                                                    'default' => 'depends on current location protocol',
                                                                    'added' => '1.5.1',
                                                                    'type' => 'Boolean'
                                                                  },
                                                       'beforeSend' => {
                                                                       'argument' => {
                                                                                     'jqXHR' => {
                                                                                                'type' => 'jqXHR'
                                                                                              },
                                                                                     'settings' => {
                                                                                                   'type' => 'PlainObject'
                                                                                                 }
                                                                                   },
                                                                       'type' => 'Function',
                                                                       'desc' => {
                                                                                 'a' => {
                                                                                        'content' => 'Ajax Event',
                                                                                        'href' => '/Ajax_Events/'
                                                                                      },
                                                                                 'code' => [
                                                                                           'false',
                                                                                           'beforeSend',
                                                                                           'beforeSend'
                                                                                         ],
                                                                                 'strong' => 'As of jQuery 1.5',
                                                                                 'content' => [
                                                                                                'A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an ',
                                                                                                '. Returning ',
                                                                                                ' in the ',
                                                                                                ' function will cancel the request. ',
                                                                                                ', the ',
                                                                                                ' option will be called regardless of the type of request.'
                                                                                              ]
                                                                               }
                                                                     },
                                                       'processData' => {
                                                                        'type' => 'Boolean',
                                                                        'default' => 'true',
                                                                        'desc' => {
                                                                                  'content' => [
                                                                                                 'By default, data passed in to the ',
                                                                                                 ' option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to ',
                                                                                                 '.'
                                                                                               ],
                                                                                  'code' => [
                                                                                            'data',
                                                                                            'false'
                                                                                          ]
                                                                                }
                                                                      },
                                                       'async' => {
                                                                  'type' => 'Boolean',
                                                                  'default' => 'true',
                                                                  'desc' => {
                                                                            'content' => [
                                                                                           'By default, all requests are sent asynchronously (i.e. this is set to ',
                                                                                           ' by default). If you need synchronous requests, set this option to ',
                                                                                           '. Cross-domain requests and ',
                                                                                           ' requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. ',
                                                                                           ', the use of ',
                                                                                           ' with jqXHR (',
                                                                                           ') is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as ',
                                                                                           '.'
                                                                                         ],
                                                                            'strong' => 'As of jQuery 1.8',
                                                                            'code' => [
                                                                                      'true',
                                                                                      'false',
                                                                                      'dataType: "jsonp"',
                                                                                      'async: false',
                                                                                      '$.Deferred',
                                                                                      'jqXHR.done()'
                                                                                    ]
                                                                          }
                                                                },
                                                       'mimeType' => {
                                                                     'desc' => {
                                                                               'abbr' => {
                                                                                         'title' => 'XMLHttpRequest',
                                                                                         'content' => 'XHR'
                                                                                       },
                                                                               'content' => [
                                                                                              'A mime type to override the ',
                                                                                              ' mime type.'
                                                                                            ]
                                                                             },
                                                                     'type' => 'String',
                                                                     'added' => '1.5.1'
                                                                   },
                                                       'data' => {
                                                                 'type' => {
                                                                           'PlainObject' => {},
                                                                           'Array' => {},
                                                                           'String' => {}
                                                                         },
                                                                 'desc' => {
                                                                           'code' => [
                                                                                     'processData',
                                                                                     'traditional'
                                                                                   ],
                                                                           'content' => [
                                                                                          'Data to be sent to the server. It is converted to a query string, if not already a string. It\'s appended to the url for GET-requests. See ',
                                                                                          ' option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the ',
                                                                                          ' setting (described below).'
                                                                                        ]
                                                                         }
                                                               },
                                                       'global' => {
                                                                   'desc' => {
                                                                             'content' => [
                                                                                            'Whether to trigger global Ajax event handlers for this request. The default is ',
                                                                                            '. Set to ',
                                                                                            ' to prevent the global handlers like ',
                                                                                            ' or ',
                                                                                            ' from being triggered. This can be used to control various ',
                                                                                            '.'
                                                                                          ],
                                                                             'code' => [
                                                                                       'true',
                                                                                       'false',
                                                                                       'ajaxStart',
                                                                                       'ajaxStop'
                                                                                     ],
                                                                             'a' => {
                                                                                    'href' => '/Ajax_Events/',
                                                                                    'content' => 'Ajax Events'
                                                                                  }
                                                                           },
                                                                   'default' => 'true',
                                                                   'type' => 'Boolean'
                                                                 },
                                                       'type' => {
                                                                 'type' => 'String',
                                                                 'default' => '\'GET\'',
                                                                 'desc' => {
                                                                           'content' => [
                                                                                          'An alias for ',
                                                                                          '. You should use ',
                                                                                          ' if you\'re using versions of jQuery prior to 1.9.0.'
                                                                                        ],
                                                                           'code' => [
                                                                                     'method',
                                                                                     'type'
                                                                                   ]
                                                                         }
                                                               },
                                                       'error' => {
                                                                  'argument' => {
                                                                                'textStatus' => {
                                                                                                'type' => 'String'
                                                                                              },
                                                                                'errorThrown' => {
                                                                                                 'type' => 'String'
                                                                                               },
                                                                                'jqXHR' => {
                                                                                           'type' => 'jqXHR'
                                                                                         }
                                                                              },
                                                                  'type' => 'Function',
                                                                  'desc' => {
                                                                            'em' => 'This handler is not called for cross-domain script and cross-domain JSONP requests.',
                                                                            'a' => {
                                                                                   'content' => 'Ajax Event',
                                                                                   'href' => '/Ajax_Events/'
                                                                                 },
                                                                            'code' => [
                                                                                      'null',
                                                                                      '"timeout"',
                                                                                      '"error"',
                                                                                      '"abort"',
                                                                                      '"parsererror"',
                                                                                      'errorThrown',
                                                                                      'error'
                                                                                    ],
                                                                            'strong' => [
                                                                                        'As of jQuery 1.5',
                                                                                        'Note:'
                                                                                      ],
                                                                            'content' => [
                                                                                           'A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides ',
                                                                                           ') are ',
                                                                                           ', ',
                                                                                           ', ',
                                                                                           ', and ',
                                                                                           '. When an HTTP error occurs, ',
                                                                                           ' receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error."  ',
                                                                                           ', the ',
                                                                                           ' setting can accept an array of functions. Each function will be called in turn.  ',
                                                                                           ' This is an ',
                                                                                           '.'
                                                                                         ]
                                                                          }
                                                                },
                                                       'password' => {
                                                                     'type' => 'String',
                                                                     'desc' => 'A password to be used with XMLHttpRequest in response to an HTTP access authentication request.'
                                                                   },
                                                       'timeout' => {
                                                                    'type' => 'Number',
                                                                    'desc' => {
                                                                              'a' => {
                                                                                     'content' => '$.ajaxSetup()',
                                                                                     'href' => '/jQuery.ajaxSetup/'
                                                                                   },
                                                                              'content' => [
                                                                                             'Set a timeout (in milliseconds) for the request. This will override any global timeout set with ',
                                                                                             '. The timeout period starts at the point the ',
                                                                                             ' call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. ',
                                                                                             ' the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. ',
                                                                                             ' script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.'
                                                                                           ],
                                                                              'strong' => [
                                                                                          'In jQuery 1.4.x and below,',
                                                                                          'In Firefox 3.0+ only,'
                                                                                        ],
                                                                              'code' => '$.ajax'
                                                                            }
                                                                  },
                                                       'accepts' => {
                                                                    'default' => 'depends on DataType',
                                                                    'desc' => {
                                                                              'code' => [
                                                                                        'dataType',
                                                                                        'Accept',
                                                                                        'mycustomtype',
                                                                                        'converters'
                                                                                      ],
                                                                              'pre' => {
                                                                                       'code' => '
$.ajax({
  accepts: {
    mycustomtype: \'application/x-some-custom-type\'
  },

  // Instructions for how to deserialize a `mycustomtype`
  converters: {
    \'text mycustomtype\': function(result) {
      // Do Stuff
      return newresult;
    }
  },

  // Expect a `mycustomtype` back from server
  dataType: \'mycustomtype\'
});
          '
                                                                                     },
                                                                              'strong' => 'Note:',
                                                                              'content' => [
                                                                                             'A set of key/value pairs that map a given ',
                                                                                             ' to its MIME type, which gets sent in the ',
                                                                                             ' request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type ',
                                                                                             ' to be sent with the request:
          ',
                                                                                             ' You will need to specify a complementary entry for this type in ',
                                                                                             ' for this to work properly.
        '
                                                                                           ]
                                                                            },
                                                                    'type' => 'PlainObject'
                                                                  },
                                                       'scriptCharset' => {
                                                                          'desc' => {
                                                                                    'code' => 'charset',
                                                                                    'content' => [
                                                                                                   'Only applies when the "script" transport is used (e.g., cross-domain requests with "jsonp" or "script" dataType and "GET" type). Sets the ',
                                                                                                   ' attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script.'
                                                                                                 ]
                                                                                  },
                                                                          'type' => 'String'
                                                                        },
                                                       'crossDomain' => {
                                                                        'added' => '1.5',
                                                                        'type' => 'Boolean',
                                                                        'default' => 'false for same-domain requests, true for cross-domain requests',
                                                                        'desc' => {
                                                                                  'code' => 'true',
                                                                                  'content' => [
                                                                                                 'If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to ',
                                                                                                 '. This allows, for example, server-side redirection to another domain.'
                                                                                               ]
                                                                                }
                                                                      },
                                                       'traditional' => {
                                                                        'desc' => {
                                                                                  'a' => {
                                                                                         'href' => '/jQuery.param/',
                                                                                         'content' => 'param serialization'
                                                                                       },
                                                                                  'code' => 'true',
                                                                                  'content' => [
                                                                                                 'Set this to ',
                                                                                                 ' if you wish to use the traditional style of ',
                                                                                                 '.'
                                                                                               ]
                                                                                },
                                                                        'type' => 'Boolean'
                                                                      },
                                                       'dataFilter' => {
                                                                       'argument' => {
                                                                                     'type' => {
                                                                                               'type' => 'String'
                                                                                             },
                                                                                     'data' => {
                                                                                               'type' => 'String'
                                                                                             }
                                                                                   },
                                                                       'type' => 'Function',
                                                                       'return' => {
                                                                                   'type' => 'Anything'
                                                                                 },
                                                                       'desc' => 'A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the \'dataType\' parameter.'
                                                                     },
                                                       'xhr' => {
                                                                'default' => 'ActiveXObject when available (IE), the XMLHttpRequest otherwise',
                                                                'desc' => 'Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.',
                                                                'type' => 'Function'
                                                              },
                                                       'username' => {
                                                                     'type' => 'String',
                                                                     'desc' => 'A username to be used with XMLHttpRequest in response to an HTTP access authentication request.'
                                                                   },
                                                       'dataType' => {
                                                                     'desc' => {
                                                                               'content' => 'The type of data that you\'re expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:
          ',
                                                                               'ul' => {
                                                                                       'li' => [
                                                                                               {
                                                                                                 'code' => '"xml"',
                                                                                                 'content' => ': Returns a XML document that can be processed via jQuery.'
                                                                                               },
                                                                                               {
                                                                                                 'content' => ': Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.',
                                                                                                 'code' => '"html"'
                                                                                               },
                                                                                               {
                                                                                                 'code' => [
                                                                                                           '"script"',
                                                                                                           '_=[TIMESTAMP]',
                                                                                                           'cache',
                                                                                                           'true'
                                                                                                         ],
                                                                                                 'content' => [
                                                                                                                ': Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, ',
                                                                                                                ', to the URL unless the ',
                                                                                                                ' option is set to ',
                                                                                                                '. ',
                                                                                                                ' This will turn POSTs into GETs for remote-domain requests.'
                                                                                                              ],
                                                                                                 'strong' => 'Note:'
                                                                                               },
                                                                                               {
                                                                                                 'a' => {
                                                                                                        'href' => 'http://json.org/',
                                                                                                        'content' => 'json.org'
                                                                                                      },
                                                                                                 'content' => [
                                                                                                                ': Evaluates the response as JSON and returns a JavaScript object. Cross-domain ',
                                                                                                                ' requests are converted to ',
                                                                                                                ' unless the request includes ',
                                                                                                                ' in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of ',
                                                                                                                ' or ',
                                                                                                                ' instead. (See ',
                                                                                                                ' for more information on proper JSON formatting.)'
                                                                                                              ],
                                                                                                 'code' => [
                                                                                                           '"json"',
                                                                                                           '"json"',
                                                                                                           '"jsonp"',
                                                                                                           'jsonp: false',
                                                                                                           'null',
                                                                                                           '{}'
                                                                                                         ]
                                                                                               },
                                                                                               {
                                                                                                 'a' => {
                                                                                                        'href' => 'http://bob.ippoli.to/archives/2005/12/05/remote-json-jsonp/',
                                                                                                        'content' => 'JSONP'
                                                                                                      },
                                                                                                 'code' => [
                                                                                                           '"jsonp"',
                                                                                                           '"?callback=?"',
                                                                                                           '"_=[TIMESTAMP]"',
                                                                                                           'cache',
                                                                                                           'true'
                                                                                                         ],
                                                                                                 'content' => [
                                                                                                                ': Loads in a JSON block using ',
                                                                                                                '. Adds an extra ',
                                                                                                                ' to the end of your URL to specify the callback. Disables caching by appending a query string parameter, ',
                                                                                                                ', to the URL unless the ',
                                                                                                                ' option is set to ',
                                                                                                                '.'
                                                                                                              ]
                                                                                               },
                                                                                               {
                                                                                                 'content' => ': A plain text string.',
                                                                                                 'code' => '"text"'
                                                                                               },
                                                                                               {
                                                                                                 'code' => [
                                                                                                           '"text xml"',
                                                                                                           '"jsonp text xml"',
                                                                                                           '"jsonp xml"'
                                                                                                         ],
                                                                                                 'strong' => 'As of jQuery 1.5',
                                                                                                 'content' => [
                                                                                                                'multiple, space-separated values: ',
                                                                                                                ', jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use ',
                                                                                                                ' for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: ',
                                                                                                                '. Similarly, a shorthand string such as ',
                                                                                                                ' will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.'
                                                                                                              ]
                                                                                               }
                                                                                             ]
                                                                                     }
                                                                             },
                                                                     'default' => 'Intelligent Guess (xml, json, script, or html)',
                                                                     'type' => 'String'
                                                                   },
                                                       'jsonpCallback' => {
                                                                          'type' => {
                                                                                    'Function' => {},
                                                                                    'String' => {}
                                                                                  },
                                                                          'desc' => {
                                                                                    'code' => 'jsonpCallback',
                                                                                    'strong' => 'As of jQuery 1.5',
                                                                                    'content' => [
                                                                                                   'Specify the callback function name for a JSONP request.  This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it\'ll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. ',
                                                                                                   ', you can also use a function for this setting, in which case the value of ',
                                                                                                   ' is set to the return value of that function.'
                                                                                                 ]
                                                                                  }
                                                                        },
                                                       'context' => {
                                                                    'type' => 'PlainObject',
                                                                    'desc' => {
                                                                              'pre' => {
                                                                                       'code' => '
$.ajax({
  url: "test.html",
  context: document.body
}).done(function() {
  $( this ).addClass( "done" );
});
          '
                                                                                     },
                                                                              'content' => [
                                                                                             'This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call (',
                                                                                             ' merged with the settings passed to ',
                                                                                             '). For example,  specifying a DOM element as the context will make that the context for the ',
                                                                                             ' callback of a request, like so:
          '
                                                                                           ],
                                                                              'code' => [
                                                                                        '$.ajaxSettings',
                                                                                        '$.ajax',
                                                                                        'complete'
                                                                                      ]
                                                                            }
                                                                  },
                                                       'contentType' => {
                                                                        'desc' => {
                                                                                  'code' => [
                                                                                            '$.ajax()',
                                                                                            'false',
                                                                                            'application/x-www-form-urlencoded',
                                                                                            'multipart/form-data',
                                                                                            'text/plain'
                                                                                          ],
                                                                                  'strong' => [
                                                                                              'Note:',
                                                                                              'Note:'
                                                                                            ],
                                                                                  'content' => [
                                                                                                 'When sending data to the server, use this content type. Default is "application/x-www-form-urlencoded; charset=UTF-8", which is fine for most cases.  If you explicitly pass in a content-type to ',
                                                                                                 ', then it is always sent to the server (even if no data is sent).  As of jQuery 1.6 you can pass ',
                                                                                                 ' to tell jQuery to not set any content type header.  ',
                                                                                                 ' The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. ',
                                                                                                 ' For cross-domain requests, setting the content type to anything other than ',
                                                                                                 ', ',
                                                                                                 ', or ',
                                                                                                 ' will trigger the browser to send a preflight OPTIONS request to the server.'
                                                                                               ]
                                                                                },
                                                                        'default' => '\'application/x-www-form-urlencoded; charset=UTF-8\'',
                                                                        'type' => {
                                                                                  'String' => {},
                                                                                  'Boolean' => {}
                                                                                }
                                                                      },
                                                       'success' => {
                                                                    'desc' => {
                                                                              'a' => {
                                                                                     'content' => 'Ajax Event',
                                                                                     'href' => '/Ajax_Events/'
                                                                                   },
                                                                              'em' => 'the success setting can accept an array of functions. Each function will be called in turn.',
                                                                              'strong' => 'As of jQuery 1.5',
                                                                              'content' => [
                                                                                             'A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the ',
                                                                                             ' parameter or the ',
                                                                                             ' callback function, if specified; a string describing the status; and the ',
                                                                                             ' (in jQuery 1.4.x, XMLHttpRequest) object. ',
                                                                                             ', ',
                                                                                             ' This is an ',
                                                                                             '.'
                                                                                           ],
                                                                              'code' => [
                                                                                        'dataType',
                                                                                        'dataFilter',
                                                                                        'jqXHR'
                                                                                      ]
                                                                            },
                                                                    'type' => 'Function',
                                                                    'argument' => {
                                                                                  'data' => {
                                                                                            'type' => 'Anything'
                                                                                          },
                                                                                  'jqXHR' => {
                                                                                             'type' => 'jqXHR'
                                                                                           },
                                                                                  'textStatus' => {
                                                                                                  'type' => 'String'
                                                                                                }
                                                                                }
                                                                  },
                                                       'method' => {
                                                                   'desc' => {
                                                                             'content' => [
                                                                                            'The HTTP method to use for the request (e.g. ',
                                                                                            ', ',
                                                                                            ', ',
                                                                                            ').'
                                                                                          ],
                                                                             'code' => [
                                                                                       '"POST"',
                                                                                       '"GET"',
                                                                                       '"PUT"'
                                                                                     ]
                                                                           },
                                                                   'default' => '\'GET\'',
                                                                   'added' => '1.9.0',
                                                                   'type' => 'String'
                                                                 },
                                                       'converters' => {
                                                                       'added' => '1.5',
                                                                       'type' => 'PlainObject',
                                                                       'desc' => 'An object containing dataType-to-dataType converters. Each converter\'s value is a function that returns the transformed value of the response.',
                                                                       'default' => '{"* text": window.String, "text html": true, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML}'
                                                                     },
                                                       'jsonp' => {
                                                                  'desc' => {
                                                                            'code' => [
                                                                                      '{jsonp:\'onJSONPLoad\'}',
                                                                                      '\'onJSONPLoad=?\'',
                                                                                      'jsonp',
                                                                                      'false',
                                                                                      'jsonpCallback',
                                                                                      '{ jsonp: false, jsonpCallback: "callbackName" }',
                                                                                      'jsonp',
                                                                                      'false'
                                                                                    ],
                                                                            'content' => [
                                                                                           'Override the callback function name in a JSONP request. This value will be used instead of \'callback\' in the \'callback=?\' part of the query string in the url. So ',
                                                                                           ' would result in ',
                                                                                           ' passed to the server. ',
                                                                                           ', setting the ',
                                                                                           ' option to ',
                                                                                           ' prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation. In this case, you should also explicitly set the ',
                                                                                           ' setting. For example, ',
                                                                                           '. If you don\'t trust the target of your Ajax requests, consider setting the ',
                                                                                           ' property to ',
                                                                                           ' for security reasons.'
                                                                                         ],
                                                                            'strong' => 'As of jQuery 1.5'
                                                                          },
                                                                  'type' => {
                                                                            'Boolean' => {},
                                                                            'String' => {}
                                                                          }
                                                                },
                                                       'cache' => {
                                                                  'type' => 'Boolean',
                                                                  'desc' => {
                                                                            'code' => [
                                                                                      'false',
                                                                                      'cache'
                                                                                    ],
                                                                            'strong' => 'Note:',
                                                                            'content' => [
                                                                                           'If set to ',
                                                                                           ', it will force requested pages not to be cached by the browser. ',
                                                                                           ' Setting ',
                                                                                           ' to false will only work correctly with HEAD and GET requests. It works by appending "_={timestamp}" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.'
                                                                                         ]
                                                                          },
                                                                  'default' => 'true, false for dataType \'script\' and \'jsonp\''
                                                                },
                                                       'contents' => {
                                                                     'type' => 'PlainObject',
                                                                     'added' => '1.5',
                                                                     'desc' => 'An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.'
                                                                   }
                                                     },
                                         'optional' => 'true',
                                         'name' => 'settings',
                                         'type' => 'PlainObject'
                                       }
                         }
                       ],
          'type' => 'method',
          'name' => 'jQuery.ajax',
          'example' => [
                       {
                         'code' => '
$.ajax({
  method: "POST",
  url: "some.php",
  data: { name: "John", location: "Boston" }
})
  .done(function( msg ) {
    alert( "Data Saved: " + msg );
  });
',
                         'desc' => 'Save some data to the server and notify the user once it\'s complete.'
                       },
                       {
                         'code' => '
$.ajax({
  url: "test.html",
  cache: false
})
  .done(function( html ) {
    $( "#results" ).append( html );
  });
',
                         'desc' => 'Retrieve the latest version of an HTML page.'
                       },
                       {
                         'desc' => {
                                   'content' => [
                                                  'Send an xml document as data to the server. By setting the processData
    option to ',
                                                  ', the automatic conversion of data to strings is prevented.'
                                                ],
                                   'code' => 'false'
                                 },
                         'code' => '
var xmlDocument = [create xml document];
var xmlRequest = $.ajax({
  url: "page.php",
  processData: false,
  data: xmlDocument
});

xmlRequest.done( handleResponse );
'
                       },
                       {
                         'code' => '
var menuId = $( "ul.nav" ).first().attr( "id" );
var request = $.ajax({
  url: "script.php",
  method: "POST",
  data: { id : menuId },
  dataType: "html"
});

request.done(function( msg ) {
  $( "#log" ).html( msg );
});

request.fail(function( jqXHR, textStatus ) {
  alert( "Request failed: " + textStatus );
});
',
                         'desc' => 'Send an id as data to the server, save some data to the server, and notify the user once it\'s complete. If the request fails, alert the user.'
                       },
                       {
                         'code' => '
$.ajax({
  method: "GET",
  url: "test.js",
  dataType: "script"
});
',
                         'desc' => 'Load and execute a JavaScript file.'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$.ajax();
    '
                                 },
                                 {
                                   'code' => '
$.ajax({
  url: "http://fiddle.jshell.net/favicon.png",
  beforeSend: function( xhr ) {
    xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
  }
})
  .done(function( data ) {
    if ( console && console.log ) {
      console.log( "Sample of data:", data.slice( 0, 100 ) );
    }
  });
    '
                                 },
                                 {
                                   'code' => '
// Assign handlers immediately after making the request,
// and remember the jqXHR object for this request
var jqxhr = $.ajax( "example.php" )
  .done(function() {
    alert( "success" );
  })
  .fail(function() {
    alert( "error" );
  })
  .always(function() {
    alert( "complete" );
  });

// Perform other work here ...

// Set another completion function for the request above
jqxhr.always(function() {
  alert( "second complete" );
});
    '
                                 },
                                 {
                                   'code' => '
$.ajaxSetup({
  contents: {
    mycustomtype: /mycustomtype/
  },
  converters: {
    "mycustomtype json": function( result ) {
      // Do stuff
      return newresult;
    }
  }
});
    '
                                 },
                                 {
                                   'code' => '
$.ajaxSetup({
  contents: {
    mycustomtype: /mycustomtype/
  },
  converters: {
    "text mycustomtype": true,
    "mycustomtype json": function( result ) {
      // Do stuff
      return newresult;
    }
  }
});
    '
                                 }
                               ],
                        'ol' => {
                                'li' => [
                                        {
                                          'code' => [
                                                    'beforeSend',
                                                    'jqXHR',
                                                    'settings'
                                                  ],
                                          'content' => [
                                                         ' callback option is invoked; it receives the ',
                                                         ' object and the ',
                                                         ' object as parameters.'
                                                       ]
                                        },
                                        {
                                          'code' => [
                                                    'error',
                                                    'jqXHR'
                                                  ],
                                          'content' => [
                                                         ' callback option is invoked, if the request fails. It receives the ',
                                                         ', a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: "abort", "timeout", "No Transport".'
                                                       ]
                                        },
                                        {
                                          'content' => [
                                                         ' callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of ',
                                                         ', and must return the (possibly altered) data to pass on to ',
                                                         '.'
                                                       ],
                                          'code' => [
                                                    'dataFilter',
                                                    'dataType',
                                                    'success'
                                                  ]
                                        },
                                        {
                                          'code' => [
                                                    'success',
                                                    'jqXHR'
                                                  ],
                                          'content' => [
                                                         ' callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the ',
                                                         ' object.'
                                                       ]
                                        },
                                        {
                                          'strong' => 'Promise callbacks',
                                          'content' => [
                                                         " \x{2014} ",
                                                         ', ',
                                                         ', ',
                                                         ', and ',
                                                         " \x{2014} are invoked, in the order they are registered. "
                                                       ],
                                          'code' => [
                                                    '.done()',
                                                    '.fail()',
                                                    '.always()',
                                                    '.then()'
                                                  ]
                                        },
                                        {
                                          'code' => [
                                                    'complete',
                                                    'jqXHR'
                                                  ],
                                          'content' => [
                                                         ' callback option fires, when the request finishes, whether in failure or success. It receives the ',
                                                         ' object, as well as a string containing the success or error code.'
                                                       ]
                                        }
                                      ]
                              },
                        'p' => [
                               {
                                 'code' => [
                                           '$.ajax()',
                                           {
                                             'a' => {
                                                    'href' => '/jQuery.get/',
                                                    'content' => '$.get()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'href' => '/load/',
                                                    'content' => '.load()'
                                                  }
                                           },
                                           '$.ajax()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' function underlies all Ajax requests sent by jQuery.  It is often unnecessary to directly call this function, as several higher-level alternatives like ',
                                                ' and ',
                                                ' are available and are easier to use. If less common options are required, though, ',
                                                ' can be used more flexibly.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'At its simplest, the ',
                                                ' function can be called with no arguments:'
                                              ],
                                 'code' => '$.ajax()'
                               },
                               {
                                 'code' => {
                                           'a' => {
                                                  'content' => '$.ajaxSetup()',
                                                  'href' => '/jQuery.ajaxSetup/'
                                                }
                                         },
                                 'content' => [
                                                ' Default settings can be set globally by using the ',
                                                ' function.'
                                              ],
                                 'strong' => 'Note:'
                               },
                               'This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions.',
                               {
                                 'code' => [
                                           '$.ajax()',
                                           'responseText',
                                           'responseXML',
                                           'getResponseHeader()',
                                           'jqXHR'
                                         ],
                                 'content' => [
                                                'The jQuery XMLHttpRequest (jqXHR) object returned by ',
                                                ' is a superset of the browser\'s native XMLHttpRequest object. For example, it contains ',
                                                ' and ',
                                                ' properties, as well as a ',
                                                ' method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the ',
                                                ' object simulates native XHR functionality where possible. '
                                              ],
                                 'strong' => 'as of jQuery 1.5'
                               },
                               {
                                 'code' => [
                                           'jqXHR',
                                           'overrideMimeType()',
                                           '.overrideMimeType()',
                                           'beforeSend()'
                                         ],
                                 'strong' => 'As of jQuery 1.5.1',
                                 'content' => [
                                                ', the ',
                                                ' object also contains the ',
                                                ' method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The ',
                                                ' method may be used in the ',
                                                ' callback function, for example, to modify the response content-type header:'
                                              ]
                               },
                               {
                                 'code' => [
                                           '$.ajax()',
                                           '$.ajax()'
                                         ],
                                 'content' => [
                                                'The jqXHR objects returned by ',
                                                ' as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see ',
                                                ' for more information). These methods take one or more function arguments that are called when the ',
                                                ' request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: '
                                              ],
                                 'a' => {
                                        'content' => 'Deferred object',
                                        'href' => '/category/deferred-object/'
                                      }
                               },
                               {
                                 'code' => [
                                           'this',
                                           'context',
                                           '$.ajax',
                                           'context',
                                           'this'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' reference within all callbacks is the object in the ',
                                                ' option passed to ',
                                                ' in the settings; if ',
                                                ' is not specified, ',
                                                ' is a reference to the Ajax settings themselves.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'XMLHttpRequest',
                                           'jqXHR'
                                         ],
                                 'content' => [
                                                'For backward compatibility with ',
                                                ', a ',
                                                ' object will expose the following properties and methods:'
                                              ]
                               },
                               {
                                 'code' => [
                                           'onreadystatechange',
                                           'done',
                                           'fail',
                                           'always',
                                           'statusCode'
                                         ],
                                 'content' => [
                                                'No ',
                                                ' mechanism is provided, however, since ',
                                                ', ',
                                                ', ',
                                                ', and ',
                                                ' cover all conceivable requirements.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ' and ',
                                                ' options all accept callback functions that are invoked at the appropriate times.'
                                              ],
                                 'code' => [
                                           'beforeSend',
                                           'error',
                                           'dataFilter',
                                           'success',
                                           'complete'
                                         ]
                               },
                               {
                                 'code' => [
                                           'fail',
                                           'done',
                                           'always',
                                           '$.ajax()'
                                         ],
                                 'content' => [
                                                ', the ',
                                                ' and ',
                                                ', and, as of jQuery 1.6, ',
                                                ' callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See ',
                                                ', which are implemented internally for these ',
                                                ' callback hooks.'
                                              ],
                                 'strong' => 'As of jQuery 1.5',
                                 'a' => {
                                        'content' => 'Deferred object methods',
                                        'href' => '/category/deferred-object/'
                                      }
                               },
                               {
                                 'content' => [
                                                'The callback hooks provided by ',
                                                ' are as follows:'
                                              ],
                                 'code' => '$.ajax()'
                               },
                               {
                                 'code' => [
                                           '$.ajax()',
                                           'dataType',
                                           'dataType'
                                         ],
                                 'content' => [
                                                'Different types of response to ',
                                                ' call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the ',
                                                ' option. If the ',
                                                ' option is provided, the Content-Type header of the response will be disregarded.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The available data types are ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', and ',
                                                '.'
                                              ],
                                 'code' => [
                                           'text',
                                           'html',
                                           'xml',
                                           'json',
                                           'jsonp',
                                           'script'
                                         ]
                               },
                               {
                                 'code' => [
                                           'text',
                                           'html',
                                           'responseText',
                                           'jqXHR'
                                         ],
                                 'content' => [
                                                'If ',
                                                ' or ',
                                                ' is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the ',
                                                ' property of the ',
                                                ' object.'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'href' => '/jQuery.parseXML/',
                                          'code' => 'jQuery.parseXML'
                                        },
                                        {
                                          'code' => 'XMLDocument',
                                          'href' => 'http://api.jquery.com/Types/#XMLDocument'
                                        }
                                      ],
                                 'code' => [
                                           'xml',
                                           'responseXML',
                                           'jqXHR'
                                         ],
                                 'content' => [
                                                'If ',
                                                ' is specified, the response is parsed using ',
                                                ' before being passed, as an ',
                                                ', to the success handler. The XML document is made available through the ',
                                                ' property of the ',
                                                ' object.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => '/jQuery.parseJSON/',
                                        'code' => 'jQuery.parseJSON'
                                      },
                                 'code' => [
                                           'json',
                                           'responseJSON',
                                           'jqXHR'
                                         ],
                                 'content' => [
                                                'If ',
                                                ' is specified, the response is parsed using ',
                                                ' before being passed, as an object, to the success handler. The parsed JSON object is made available through the ',
                                                ' property of the ',
                                                ' object.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'script',
                                           '$.ajax()'
                                         ],
                                 'content' => [
                                                'If ',
                                                ' is specified, ',
                                                ' will execute the JavaScript that is received from the server before passing it on to the success handler as a string.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'If ',
                                                ' is specified, ',
                                                ' will automatically append a query string parameter of (by default) ',
                                                ' to the URL. The ',
                                                ' and ',
                                                ' properties of the settings passed to ',
                                                ' can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. ',
                                                ' will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the ',
                                                ' success handler.'
                                              ],
                                 'code' => [
                                           'jsonp',
                                           '$.ajax()',
                                           'callback=?',
                                           'jsonp',
                                           'jsonpCallback',
                                           '$.ajax()',
                                           '$.ajax()',
                                           '$.ajax()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'For more information on JSONP, see the ',
                                                '.'
                                              ],
                                 'a' => {
                                        'content' => 'original post detailing its use',
                                        'href' => 'http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/'
                                      }
                               },
                               {
                                 'content' => [
                                                'By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the ',
                                                ' option. This option affects how the contents of the ',
                                                ' option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard.'
                                              ],
                                 'code' => [
                                           'type',
                                           'data'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' option can contain either a query string of the form ',
                                                ', or an object of the form ',
                                                '. If the latter form is used, the data is converted into a query string using ',
                                                ' before it is sent. This processing can be circumvented by setting ',
                                                ' to ',
                                                '.  The processing might be undesirable if you wish to send an XML object to the server; in this case, change the ',
                                                ' option from ',
                                                ' to a more appropriate MIME type.'
                                              ],
                                 'code' => [
                                           'data',
                                           'key1=value1&key2=value2',
                                           '{key1: \'value1\', key2: \'value2\'}',
                                           {
                                             'a' => {
                                                    'href' => '/jQuery.param/',
                                                    'content' => 'jQuery.param()'
                                                  }
                                           },
                                           'processData',
                                           'false',
                                           'contentType',
                                           'application/x-www-form-urlencoded'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' option prevents handlers registered using ',
                                                ', ',
                                                ', and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with ',
                                                ' if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to ',
                                                '. See the descriptions of these methods below for more details.'
                                              ],
                                 'code' => [
                                           'global',
                                           {
                                             'a' => {
                                                    'href' => '/ajaxSend/',
                                                    'content' => '.ajaxSend()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'href' => '/ajaxError/',
                                                    'content' => '.ajaxError()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'content' => '.ajaxSend()',
                                                    'href' => '/ajaxSend/'
                                                  }
                                           },
                                           'false'
                                         ]
                               },
                               {
                                 'content' => [
                                                'If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the ',
                                                ' and ',
                                                ' options.'
                                              ],
                                 'code' => [
                                           'username',
                                           'password'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using ',
                                                ' rather than being overridden for specific requests with the ',
                                                ' option.'
                                              ],
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '$.ajaxSetup()',
                                                    'href' => '/jQuery.ajaxSetup/'
                                                  }
                                           },
                                           'timeout'
                                         ]
                               },
                               {
                                 'code' => [
                                           'cache',
                                           'false',
                                           'ifModified',
                                           'true'
                                         ],
                                 'content' => [
                                                'By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set ',
                                                ' to ',
                                                '. To cause the request to report failure if the asset has not been modified since the last request, set ',
                                                ' to ',
                                                '.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'scriptCharset',
                                           '<script>',
                                           'script',
                                           'jsonp'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' allows the character set to be explicitly specified for requests that use a ',
                                                ' tag (that is, a type of ',
                                                ' or ',
                                                '). This is useful if the script and host page have differing character sets.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'async',
                                           '$.ajax()',
                                           'true',
                                           'false'
                                         ],
                                 'content' => [
                                                'The first letter in Ajax stands for "asynchronous," meaning that the operation occurs in parallel and the order of completion is not guaranteed. The ',
                                                ' option to ',
                                                ' defaults to ',
                                                ', indicating that code execution can continue after the request is made. Setting this option to ',
                                                ' (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' function returns the ',
                                                ' object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the ',
                                                ' option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling ',
                                                ' on the object will halt the request before it completes.'
                                              ],
                                 'code' => [
                                           '$.ajax()',
                                           'XMLHttpRequest',
                                           'xhr',
                                           '.abort()'
                                         ]
                               },
                               {
                                 'strong' => 'As of jQuery 1.5',
                                 'content' => [
                                                ', jQuery\'s Ajax implementation includes ',
                                                ', ',
                                                ', and converters that allow you to extend Ajax with a great deal of flexibility.'
                                              ],
                                 'a' => [
                                        {
                                          'href' => '/jQuery.ajaxPrefilter/',
                                          'content' => 'prefilters'
                                        },
                                        {
                                          'href' => '/jQuery.ajaxTransport/',
                                          'content' => 'transports'
                                        }
                                      ]
                               },
                               {
                                 'code' => [
                                           '$.ajax()',
                                           'json',
                                           'contents'
                                         ],
                                 'content' => [
                                                ' converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g ',
                                                '), you must add a correspondence between the response Content-Type and the actual data type using the ',
                                                ' option:'
                                              ]
                               },
                               'This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).',
                               {
                                 'code' => [
                                           'text',
                                           'json'
                                         ],
                                 'content' => [
                                                'To convert from a supported type (e.g ',
                                                ', ',
                                                ') to a custom data type and back again, use another pass-through converter:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The above now allows passing from ',
                                                ' to ',
                                                ' and then ',
                                                ' to ',
                                                '.'
                                              ],
                                 'code' => [
                                           'text',
                                           'mycustomtype',
                                           'mycustomtype',
                                           'json'
                                         ]
                               }
                             ],
                        'h4' => {
                                'data-types' => {
                                                'content' => 'Data Types'
                                              },
                                'callback-functions' => {
                                                        'content' => 'Callback Function Queues'
                                                      },
                                'jqXHR' => {
                                           'content' => 'The jqXHR Object'
                                         },
                                'advanced-options' => {
                                                      'content' => 'Advanced Options'
                                                    },
                                'extending-ajax' => {
                                                    'content' => 'Extending Ajax'
                                                  },
                                'sending-data-to-server' => {
                                                            'content' => 'Sending Data to the Server'
                                                          },
                                'using-converters' => {
                                                      'content' => 'Using Converters'
                                                    }
                              },
                        'ul' => [
                                {
                                  'li' => [
                                          {
                                            'p' => {
                                                   'code' => {
                                                             'a' => {
                                                                    'href' => '/deferred.done/',
                                                                    'content' => 'deferred.done()'
                                                                  }
                                                           },
                                                   'content' => [
                                                                  'An alternative construct to the success callback option, refer to ',
                                                                  ' for implementation details.'
                                                                ]
                                                 },
                                            'strong' => 'jqXHR.done(function( data, textStatus, jqXHR ) {});'
                                          },
                                          {
                                            'p' => {
                                                   'code' => [
                                                             '.fail()',
                                                             '.error()',
                                                             {
                                                               'a' => {
                                                                      'href' => '/deferred.fail/',
                                                                      'content' => 'deferred.fail()'
                                                                    }
                                                             }
                                                           ],
                                                   'content' => [
                                                                  'An alternative construct to the error callback option, the ',
                                                                  ' method replaces the deprecated ',
                                                                  ' method. Refer to ',
                                                                  ' for implementation details.
        '
                                                                ]
                                                 },
                                            'strong' => 'jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {});'
                                          },
                                          {
                                            'p' => [
                                                   {
                                                     'content' => [
                                                                    'An alternative construct to the complete callback option, the ',
                                                                    ' method replaces the deprecated ',
                                                                    ' method.'
                                                                  ],
                                                     'code' => [
                                                               '.always()',
                                                               '.complete()'
                                                             ]
                                                   },
                                                   {
                                                     'content' => [
                                                                    'In response to a successful request, the function\'s arguments are the same as those of ',
                                                                    ': data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of ',
                                                                    ': the jqXHR object, textStatus, and errorThrown. Refer to ',
                                                                    ' for implementation details.'
                                                                  ],
                                                     'code' => [
                                                               '.done()',
                                                               '.fail()',
                                                               {
                                                                 'a' => {
                                                                        'href' => '/deferred.always/',
                                                                        'content' => 'deferred.always()'
                                                                      }
                                                               }
                                                             ]
                                                   }
                                                 ],
                                            'strong' => 'jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { });'
                                          },
                                          {
                                            'p' => {
                                                   'a' => {
                                                          'code' => 'deferred.then()',
                                                          'href' => '/deferred.then/'
                                                        },
                                                   'content' => [
                                                                  'Incorporates the functionality of the ',
                                                                  ' and ',
                                                                  ' methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to ',
                                                                  ' for implementation details.
        '
                                                                ],
                                                   'code' => [
                                                             '.done()',
                                                             '.fail()'
                                                           ]
                                                 },
                                            'strong' => 'jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {});'
                                          }
                                        ]
                                },
                                {
                                  'li' => [
                                          {
                                            'code' => 'readyState'
                                          },
                                          {
                                            'code' => 'status'
                                          },
                                          {
                                            'code' => 'statusText'
                                          },
                                          {
                                            'content' => [
                                                           ' and/or ',
                                                           ' when the underlying request responded with xml and/or text, respectively'
                                                         ],
                                            'code' => [
                                                      'responseXML',
                                                      'responseText'
                                                    ]
                                          },
                                          {
                                            'content' => ' which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one',
                                            'code' => 'setRequestHeader(name, value)'
                                          },
                                          {
                                            'code' => 'getAllResponseHeaders()'
                                          },
                                          {
                                            'code' => 'getResponseHeader()'
                                          },
                                          {
                                            'code' => 'statusCode()'
                                          },
                                          {
                                            'code' => 'abort()'
                                          }
                                        ]
                                }
                              ],
                        'div' => {
                                 'class' => 'warning',
                                 'p' => {
                                        'strong' => 'Deprecation Notice:',
                                        'content' => [
                                                       ' The ',
                                                       ', ',
                                                       ', and ',
                                                       ' callbacks are removed as of jQuery 3.0. You can use ',
                                                       ', ',
                                                       ', and ',
                                                       ' instead.'
                                                     ],
                                        'code' => [
                                                  'jqXHR.success()',
                                                  'jqXHR.error()',
                                                  'jqXHR.complete()',
                                                  'jqXHR.done()',
                                                  'jqXHR.fail()',
                                                  'jqXHR.always()'
                                                ]
                                      }
                               }
                      },
          'category' => [
                        {
                          'slug' => 'ajax/low-level-interface'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.5'
                        },
                        {
                          'slug' => 'version/1.5.1'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.ajaxPrefilter.xml ####
Possible keys are: category longdesc name type signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'ajax/low-level-interface'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => '$.ajaxPrefilter()',
                                 'content' => [
                                                'A typical prefilter registration using ',
                                                ' looks like this:'
                                              ]
                               },
                               'where:',
                               {
                                 'code' => [
                                           '$.ajax()',
                                           'abortOnRetry',
                                           'true'
                                         ],
                                 'content' => [
                                                'Prefilters are a perfect fit when custom options need to be handled.  Given the following code, for example, a call to ',
                                                ' would automatically abort a request to the same URL if the custom ',
                                                ' option is set to ',
                                                ':'
                                              ]
                               },
                               'Prefilters can also be used to modify existing options. For example, the following proxies cross-domain requests through http://mydomain.net/proxy/:',
                               {
                                 'content' => [
                                                'If the optional ',
                                                ' argument is supplied, the prefilter will be only be applied to requests with the indicated dataTypes. For example, the following only applies the given prefilter to JSON and script requests:'
                                              ],
                                 'code' => 'dataTypes'
                               },
                               {
                                 'code' => [
                                           '$.ajaxPrefilter()',
                                           'isActuallyScript()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method can also redirect a request to another dataType by returning that dataType. For example, the following sets a request as "script" if the URL has some specific properties defined in a custom ',
                                                ' function:'
                                              ]
                               },
                               'This would ensure not only that the request is considered "script" but also that all the prefilters specifically attached to the script dataType would be applied to it.'
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {
  // Modify options, control originalOptions, store jqXHR, etc
});
    '
                                 },
                                 {
                                   'code' => '
var currentRequests = {};

$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {
  if ( options.abortOnRetry ) {
    if ( currentRequests[ options.url ] ) {
      currentRequests[ options.url ].abort();
    }
    currentRequests[ options.url ] = jqXHR;
  }
});
    '
                                 },
                                 {
                                   'code' => '
$.ajaxPrefilter(function( options ) {
  if ( options.crossDomain ) {
    options.url = "http://mydomain.net/proxy/" + encodeURIComponent( options.url );
    options.crossDomain = false;
  }
});
    '
                                 },
                                 {
                                   'code' => '
$.ajaxPrefilter( "json script", function( options, originalOptions, jqXHR ) {
  // Modify options, control originalOptions, store jqXHR, etc
});
    '
                                 },
                                 {
                                   'code' => '
$.ajaxPrefilter(function( options ) {
  if ( isActuallyScript( options.url ) ) {
    return "script";
  }
});
    '
                                 }
                               ],
                        'ul' => {
                                'li' => [
                                        {
                                          'code' => 'options',
                                          'content' => ' are the request options'
                                        },
                                        {
                                          'content' => [
                                                         ' are the options as provided to the ',
                                                         ' method, unmodified and, thus, without defaults from '
                                                       ],
                                          'code' => [
                                                    'originalOptions',
                                                    '$.ajax()',
                                                    'ajaxSettings'
                                                  ]
                                        },
                                        {
                                          'code' => 'jqXHR',
                                          'content' => ' is the jqXHR object of the request'
                                        }
                                      ]
                              }
                      },
          'name' => 'jQuery.ajaxPrefilter',
          'type' => 'method',
          'signature' => {
                         'argument' => {
                                       'dataTypes' => {
                                                      'type' => 'String',
                                                      'optional' => 'true',
                                                      'desc' => 'An optional string containing one or more space-separated dataTypes'
                                                    },
                                       'handler' => {
                                                    'type' => 'Function',
                                                    'argument' => {
                                                                  'jqXHR' => {
                                                                             'type' => 'jqXHR'
                                                                           },
                                                                  'options' => {
                                                                               'type' => 'PlainObject'
                                                                             },
                                                                  'originalOptions' => {
                                                                                       'type' => 'PlainObject'
                                                                                     }
                                                                },
                                                    'desc' => 'A handler to set default values for future Ajax requests.'
                                                  }
                                     },
                         'added' => '1.5'
                       },
          'title' => 'jQuery.ajaxPrefilter()',
          'return' => 'undefined',
          'desc' => {
                    'code' => '$.ajax()',
                    'content' => [
                                   'Handle custom Ajax options or modify existing options before each request is sent and before they are processed by ',
                                   '.'
                                 ]
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.ajaxSetup.xml ####
Possible keys are: desc title return signature longdesc example name type category
$VAR1 = {
          'desc' => 'Set default values for future Ajax requests. Its use is not recommended.',
          'title' => 'jQuery.ajaxSetup()',
          'return' => '',
          'signature' => {
                         'argument' => {
                                       'desc' => 'A set of key/value pairs that configure the default Ajax request. All options are optional. ',
                                       'name' => 'options',
                                       'type' => 'PlainObject'
                                     },
                         'added' => '1.1'
                       },
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$.ajaxSetup({
  url: "ping.php"
});
    '
                                 },
                                 {
                                   'code' => '
$.ajax({
  // url not set here; uses ping.php
  data: { "name": "Dan" }
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '$.ajaxSetup()',
                                           {
                                             'a' => {
                                                    'href' => '/jQuery.ajax/',
                                                    'content' => '$.ajax()'
                                                  }
                                           }
                                         ],
                                 'content' => [
                                                'For details on the settings available for ',
                                                ', see ',
                                                '. '
                                              ]
                               },
                               {
                                 'code' => '$.ajaxSetup()',
                                 'content' => [
                                                'All subsequent Ajax calls using any function will use the new settings, unless overridden by the individual calls, until the next invocation of ',
                                                '.'
                                              ]
                               },
                               {
                                 'em' => [
                                         'all',
                                         'strongly recommend against using this API'
                                       ],
                                 'content' => [
                                                ' The settings specified here will affect ',
                                                ' calls to ',
                                                ' or Ajax-based derivatives such as ',
                                                '. This can cause undesirable behavior since other callers (for example, plugins) may be expecting the normal default settings. For that reason we ',
                                                '. Instead, set the options explicitly in the call or define a simple plugin to do so.'
                                              ],
                                 'strong' => 'Note:',
                                 'code' => [
                                           '$.ajax',
                                           '$.get()'
                                         ]
                               },
                               {
                                 'code' => 'url',
                                 'content' => [
                                                'For example, the following sets a default for the ',
                                                ' parameter before pinging the server repeatedly:'
                                              ]
                               },
                               'Now each time an Ajax request is made, the "ping.php" URL will be used automatically:'
                             ],
                        'div' => {
                                 'p' => {
                                        'content' => [
                                                       "Note: Global callback functions should be set with their respective global Ajax event handler methods\x{2014}",
                                                       ', ',
                                                       ', ',
                                                       ', ',
                                                       ', ',
                                                       ', ',
                                                       "\x{2014}rather than within the ",
                                                       ' object for ',
                                                       '.'
                                                     ],
                                        'code' => [
                                                  {
                                                    'a' => {
                                                           'href' => '/ajaxStart/',
                                                           'content' => '.ajaxStart()'
                                                         }
                                                  },
                                                  {
                                                    'a' => {
                                                           'href' => '/ajaxStop/',
                                                           'content' => '.ajaxStop()'
                                                         }
                                                  },
                                                  {
                                                    'a' => {
                                                           'content' => '.ajaxComplete()',
                                                           'href' => '/ajaxComplete/'
                                                         }
                                                  },
                                                  {
                                                    'a' => {
                                                           'content' => '.ajaxError()',
                                                           'href' => '/ajaxError/'
                                                         }
                                                  },
                                                  {
                                                    'a' => {
                                                           'content' => '.ajaxSuccess()',
                                                           'href' => '/ajaxSuccess/'
                                                         }
                                                  },
                                                  {
                                                    'a' => {
                                                           'content' => '.ajaxSend()',
                                                           'href' => '/ajaxSend/'
                                                         }
                                                  },
                                                  'options',
                                                  '$.ajaxSetup()'
                                                ]
                                      },
                                 'class' => 'warning'
                               }
                      },
          'example' => {
                       'desc' => 'Sets the defaults for Ajax requests to the url "/xmlhttp/", disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.',
                       'code' => '
$.ajaxSetup({
  url: "/xmlhttp/",
  global: false,
  type: "POST"
});
$.ajax({ data: myData });
'
                     },
          'name' => 'jQuery.ajaxSetup',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'ajax/low-level-interface'
                        },
                        {
                          'slug' => 'version/1.1'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.ajaxTransport.xml ####
Possible keys are: category type name longdesc signature return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'ajax/low-level-interface'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'type' => 'method',
          'name' => 'jQuery.ajaxTransport',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           'send',
                                           'abort',
                                           '$.ajax()',
                                           '$.ajax()'
                                         ],
                                 'content' => [
                                                'A transport is an object that provides two methods, ',
                                                ' and ',
                                                ', that are used internally by ',
                                                ' to issue requests. A transport is the most advanced way to enhance ',
                                                ' and should be used only as a last resort when prefilters and converters are insufficient.'
                                              ]
                               },
                               'Since each request requires its own transport object instance, transports cannot be registered directly. Therefore, you should provide a function that returns a transport instead.',
                               {
                                 'code' => '$.ajaxTransport()',
                                 'content' => [
                                                'Transports factories are registered using ',
                                                '. A typical registration looks like this:'
                                              ]
                               },
                               'where:',
                               {
                                 'content' => ' has the following signature:',
                                 'code' => 'completeCallback'
                               },
                               'where:',
                               'Just like prefilters, a transport\'s factory function can be attached to a specific dataType:',
                               'The following example shows how a minimal image transport could be implemented:',
                               'The jQuery Ajax implementation comes with a set of standard dataTypes, such as text, json, xml, and html.',
                               {
                                 'content' => [
                                                'Use the ',
                                                ' option in ',
                                                ' to augment or modify the data type conversion strategies used by ',
                                                '.'
                                              ],
                                 'code' => [
                                           'converters',
                                           {
                                             'a' => {
                                                    'href' => '/jQuery.ajaxSetup/',
                                                    'content' => '$.ajaxSetup()'
                                                  }
                                           },
                                           '$.ajax()'
                                         ]
                               },
                               ' The unminified jQuery source itself includes a list of default converters, which effectively illustrates how they can be used: ',
                               {
                                 'code' => [
                                           'converters',
                                           '$.ajaxSetup()',
                                           '$.ajax()'
                                         ],
                                 'content' => [
                                                'When you specify a ',
                                                ' option globally in ',
                                                ' or per call in ',
                                                ', the object will map onto the default converters, overwriting those you specify and leaving the others intact.'
                                              ]
                               },
                               {
                                 'code' => '$.ajaxSetup()',
                                 'content' => [
                                                'For example, the jQuery source uses ',
                                                ' to  add a converter for "text script":'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$.ajaxTransport( dataType, function( options, originalOptions, jqXHR ) {
  if( /* transportCanHandleRequest */ ) {
    return {
      send: function( headers, completeCallback ) {
        // Send code
      },
      abort: function() {
        // Abort code
      }
    };
  }
});
    '
                                 },
                                 {
                                   'code' => '
function( status, statusText, responses, headers ) {}
    '
                                 },
                                 {
                                   'code' => '
$.ajaxTransport( "script", function( options, originalOptions, jqXHR ) {
  // Will only be called for script requests
});
    '
                                 },
                                 {
                                   'code' => '
$.ajaxTransport( "image", function( s ) {
  if ( s.type === "GET" && s.async ) {
    var image;
    return {
      send: function( _ , callback ) {
        image = new Image();
        function done( status ) {
          if ( image ) {
            var statusText = ( status === 200 ) ? "success" : "error",
              tmp = image;
            image = image.onreadystatechange = image.onerror = image.onload = null;
            callback( status, statusText, { image: tmp } );
          }
        }
        image.onreadystatechange = image.onload = function() {
          done( 200 );
        };
        image.onerror = function() {
          done( 404 );
        };
        image.src = s.url;
      },
      abort: function() {
        if ( image ) {
          image = image.onreadystatechange = image.onerror = image.onload = null;
        }
      }
    };
  }
});
    '
                                 },
                                 {
                                   'code' => '
// List of data converters
// 1) Key format is "source_type destination_type"
//    (a single space in-between)
// 2) The catchall symbol "*" can be used for source_type
converters: {
  // Convert anything to text
  "* text": window.String,
  // Text to html (true = no transformation)
  "text html": true,
  // Evaluate text as a json expression
  "text json": jQuery.parseJSON,
  // Parse text as xml
  "text xml": jQuery.parseXML
}
    '
                                 },
                                 {
                                   'code' => '
jQuery.ajaxSetup({
  accepts: {
    script: "text/javascript, application/javascript"
  },
  contents: {
    script: /javascript/
  },
  converters: {
    "text script": jQuery.globalEval
  }
});
    '
                                 }
                               ],
                        'h4' => {
                                'content' => 'Handling Custom Data Types',
                                'id' => 'handling-custom-data-types'
                              },
                        'ul' => [
                                {
                                  'li' => [
                                          {
                                            'content' => ' are the request options',
                                            'code' => 'options'
                                          },
                                          {
                                            'content' => [
                                                           ' are the options as provided to the ',
                                                           ' method, unmodified and, thus, without defaults from ajaxSettings'
                                                         ],
                                            'code' => [
                                                      'originalOptions',
                                                      '$.ajax()'
                                                    ]
                                          },
                                          {
                                            'code' => 'jqXHR',
                                            'content' => ' is the jqXHR object of the request'
                                          },
                                          {
                                            'code' => 'headers',
                                            'content' => ' is an object of (key-value) request headers that the transport can transmit if it supports it'
                                          },
                                          {
                                            'code' => 'completeCallback',
                                            'content' => ' is the callback used to notify Ajax of the completion of the request'
                                          }
                                        ]
                                },
                                {
                                  'li' => [
                                          {
                                            'content' => ' is the HTTP status code of the response, like  200 for a typical success, or 404 for when the resource is not found.',
                                            'code' => 'status'
                                          },
                                          {
                                            'code' => 'statusText',
                                            'content' => ' is the statusText of the response.'
                                          },
                                          {
                                            'code' => [
                                                      'responses',
                                                      '{ xml: XMLData, text: textData }'
                                                    ],
                                            'content' => [
                                                           ' (Optional) is An object containing dataType/value that contains the response in all the formats the transport could provide (for instance, a native XMLHttpRequest object would set responses to ',
                                                           ' for a response that is an XML document)'
                                                         ]
                                          },
                                          {
                                            'code' => [
                                                      'headers',
                                                      'XMLHttpRequest.getAllResponseHeaders()'
                                                    ],
                                            'content' => [
                                                           ' (Optional) is a string containing all the response headers if the transport has access to them (akin to what ',
                                                           ' would provide).'
                                                         ]
                                          }
                                        ]
                                }
                              ]
                      },
          'signature' => {
                         'argument' => {
                                       'handler' => {
                                                    'desc' => 'A handler to return the new transport object to use with the data type provided in the first argument.',
                                                    'argument' => {
                                                                  'options' => {
                                                                               'type' => 'PlainObject'
                                                                             },
                                                                  'originalOptions' => {
                                                                                       'type' => 'PlainObject'
                                                                                     },
                                                                  'jqXHR' => {
                                                                             'type' => 'jqXHR'
                                                                           }
                                                                },
                                                    'type' => 'Function'
                                                  },
                                       'dataType' => {
                                                     'desc' => 'A string identifying the data type to use',
                                                     'type' => 'String'
                                                   }
                                     },
                         'added' => '1.5'
                       },
          'return' => 'undefined',
          'title' => 'jQuery.ajaxTransport()',
          'desc' => 'Creates an object that handles the actual transmission of Ajax data.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.boxModel.xml ####
Possible keys are: removed desc return title deprecated signature category name type longdesc
$VAR1 = {
          'removed' => '1.8',
          'desc' => {
                    'content' => [
                                   'States if the current page, in the user\'s browser, is being rendered using the ',
                                   '. ',
                                   '. Please try to use feature detection instead.'
                                 ],
                    'strong' => 'This property was removed in jQuery 1.8',
                    'a' => {
                           'content' => 'W3C CSS Box Model',
                           'href' => 'http://www.w3.org/TR/REC-CSS2/box.html'
                         }
                  },
          'return' => 'Boolean',
          'title' => 'jQuery.boxModel',
          'deprecated' => '1.3',
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.3'
                        },
                        {
                          'slug' => 'removed'
                        }
                      ],
          'name' => 'jQuery.boxModel',
          'type' => 'property',
          'longdesc' => {}
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.browser.xml ####
Possible keys are: deprecated removed entry
$VAR1 = {
          'deprecated' => '1.3',
          'removed' => '1.9',
          'entry' => {
                     'jQuery.browser' => {
                                         'deprecated' => '1.3',
                                         'signature' => {
                                                        'added' => '1.0'
                                                      },
                                         'category' => [
                                                       {
                                                         'slug' => 'properties/global-jquery-object-properties'
                                                       },
                                                       {
                                                         'slug' => 'utilities'
                                                       },
                                                       {
                                                         'slug' => 'version/1.0'
                                                       },
                                                       {
                                                         'slug' => 'version/1.1.3'
                                                       },
                                                       {
                                                         'slug' => 'deprecated/deprecated-1.3'
                                                       },
                                                       {
                                                         'slug' => 'removed'
                                                       }
                                                     ],
                                         'type' => 'property',
                                         'example' => [
                                                      {
                                                        'code' => '
jQuery.each( jQuery.browser, function( i, val ) {
  $( "<div>" + i + " : <span>" + val + "</span>" )
  .appendTo( document.body );
});
',
                                                        'desc' => 'Show the browser info.'
                                                      },
                                                      {
                                                        'desc' => {
                                                                  'strong' => 'Will not work in jQuery 1.9 or later',
                                                                  'content' => [
                                                                                 'Return true if the current useragent is some version of Microsoft\'s Internet Explorer. ',
                                                                                 ' unless the ',
                                                                                 ' plugin is included.'
                                                                               ],
                                                                  'a' => {
                                                                         'href' => 'https://github.com/jquery/jquery-migrate/#readme',
                                                                         'content' => 'jQuery Migrate'
                                                                       }
                                                                },
                                                        'code' => '
$.browser.msie;
'
                                                      },
                                                      {
                                                        'desc' => {
                                                                  'content' => [
                                                                                 'Alert "this is WebKit!" only for WebKit browsers. ',
                                                                                 ' unless the ',
                                                                                 ' plugin is included.'
                                                                               ],
                                                                  'strong' => 'Will not work in jQuery 1.9 or later',
                                                                  'a' => {
                                                                         'content' => 'jQuery Migrate',
                                                                         'href' => 'https://github.com/jquery/jquery-migrate/#readme'
                                                                       }
                                                                },
                                                        'code' => '
  if ( $.browser.webkit ) {
    alert( "This is WebKit!" );
  }
'
                                                      }
                                                    ],
                                         'longdesc' => {
                                                       'p' => [
                                                              {
                                                                'code' => '$.browser',
                                                                'content' => [
                                                                               'The ',
                                                                               ' property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.'
                                                                             ]
                                                              },
                                                              'Available flags are:',
                                                              {
                                                                'content' => [
                                                                               'This property is available immediately. It is therefore safe to use it to determine whether or not to call ',
                                                                               '.
    The ',
                                                                               ' property is deprecated in jQuery 1.3, and its functionality may be moved to a team-supported plugin in a future release of jQuery.'
                                                                             ],
                                                                'code' => [
                                                                          '$(document).ready()',
                                                                          '$.browser'
                                                                        ]
                                                              },
                                                              {
                                                                'code' => [
                                                                          '$.browser',
                                                                          'navigator.userAgent',
                                                                          '$.browser'
                                                                        ],
                                                                'content' => [
                                                                               'Because ',
                                                                               ' uses ',
                                                                               ' to determine the platform, it is vulnerable to spoofing by the user or misrepresentation by the browser itself. It is always best to avoid browser-specific code entirely where possible. Instead of relying on ',
                                                                               ' it\'s better to use libraries like ',
                                                                               '.'
                                                                             ],
                                                                'a' => {
                                                                       'href' => 'http://modernizr.com/',
                                                                       'content' => 'Modernizr'
                                                                     }
                                                              }
                                                            ],
                                                       'ul' => {
                                                               'li' => [
                                                                       'webkit (as of jQuery 1.4)',
                                                                       'safari (deprecated)',
                                                                       'opera',
                                                                       'msie',
                                                                       'mozilla'
                                                                     ]
                                                             }
                                                     },
                                         'removed' => '1.9',
                                         'desc' => {
                                                   'content' => [
                                                                  'Contains flags for the useragent, read from navigator.userAgent. ',
                                                                  ' and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.'
                                                                ],
                                                   'strong' => 'This property was removed in jQuery 1.9'
                                                 },
                                         'return' => 'PlainObject',
                                         'title' => 'jQuery.browser'
                                       },
                     'jQuery.browser.version' => {
                                                 'removed' => '1.9',
                                                 'desc' => {
                                                           'strong' => 'This property was removed in jQuery 1.9',
                                                           'content' => [
                                                                          'The version number of the rendering engine for the user\'s browser. ',
                                                                          ' and is available only through the jQuery.migrate plugin.'
                                                                        ]
                                                         },
                                                 'return' => 'String',
                                                 'signature' => {
                                                                'added' => '1.1.3'
                                                              },
                                                 'deprecated' => '1.3',
                                                 'longdesc' => {
                                                               'p' => [
                                                                      'Here are some typical results:',
                                                                      'Note that IE8 claims to be 7 in Compatibility View.'
                                                                    ],
                                                               'ul' => {
                                                                       'li' => [
                                                                               'Internet Explorer: 6.0, 7.0, 8.0',
                                                                               'Mozilla/Firefox/Flock/Camino: 1.7.12, 1.8.1.3, 1.9',
                                                                               'Opera: 10.06, 11.01',
                                                                               'Safari/Webkit: 312.8, 418.9'
                                                                             ]
                                                                     }
                                                             },
                                                 'example' => [
                                                              {
                                                                'desc' => {
                                                                          'strong' => 'Will not work in jQuery 1.9 or later',
                                                                          'content' => [
                                                                                         'Return the version number of the rendering engine used by the user\'s current browser. For example, FireFox 4 returns 2.0 (the version of the Gecko rendering engine it utilizes). ',
                                                                                         ' unless the ',
                                                                                         ' plugin is included.'
                                                                                       ],
                                                                          'a' => {
                                                                                 'content' => 'jQuery Migrate',
                                                                                 'href' => 'https://github.com/jquery/jquery-migrate/#readme'
                                                                               }
                                                                        },
                                                                'code' => '
$( "p" ).html( "The version # of the browser\'s rendering engine is: <span>" +
  $.browser.version + "</span>" );
'
                                                              },
                                                              {
                                                                'code' => '
if ( $.browser.msie ) {
  alert( $.browser.version );
}
',
                                                                'desc' => {
                                                                          'content' => [
                                                                                         'Alert the version of IE\'s rendering engine that is being used. ',
                                                                                         ' unless the ',
                                                                                         ' plugin is included.'
                                                                                       ],
                                                                          'strong' => 'Will not work in jQuery 1.9 or later',
                                                                          'a' => {
                                                                                 'content' => 'jQuery Migrate',
                                                                                 'href' => 'https://github.com/jquery/jquery-migrate/#readme'
                                                                               }
                                                                        }
                                                              }
                                                            ],
                                                 'type' => 'property',
                                                 'category' => [
                                                               {
                                                                 'slug' => 'properties/global-jquery-object-properties'
                                                               },
                                                               {
                                                                 'slug' => 'utilities'
                                                               },
                                                               {
                                                                 'slug' => 'version/1.0'
                                                               },
                                                               {
                                                                 'slug' => 'version/1.1.3'
                                                               },
                                                               {
                                                                 'slug' => 'deprecated/deprecated-1.3'
                                                               },
                                                               {
                                                                 'slug' => 'removed'
                                                               }
                                                             ]
                                               }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.Callbacks.xml ####
Possible keys are: signature longdesc type name category desc title return
$VAR1 = {
          'signature' => {
                         'added' => '1.7',
                         'argument' => {
                                       'type' => 'String',
                                       'name' => 'flags',
                                       'desc' => 'An optional list of space-separated flags that change how the callback list behaves.'
                                     }
                       },
          'longdesc' => {
                        'h3' => {
                                'getting-started' => {
                                                     'content' => 'Getting started'
                                                   },
                                'supported-flags' => {
                                                     'content' => 'Supported Flags'
                                                   },
                                'pubsub' => {
                                            'content' => '$.Callbacks, $.Deferred and Pub/Sub'
                                          }
                              },
                        'h2' => [
                                'Possible flags:',
                                {
                                  'content' => ':',
                                  'code' => '$.Callbacks( "once" )',
                                  'id' => 'once'
                                },
                                {
                                  'code' => '$.Callbacks( "memory" )',
                                  'id' => 'memory',
                                  'content' => ':'
                                },
                                {
                                  'id' => 'unique',
                                  'code' => '$.Callbacks( "unique" )',
                                  'content' => ':'
                                },
                                {
                                  'content' => ':',
                                  'code' => '$.Callbacks( "stopOnFalse" )',
                                  'id' => 'stopOnFalse'
                                },
                                {
                                  'code' => '$.Callbacks( \'unique memory\' )',
                                  'id' => 'unique-memory',
                                  'content' => ':'
                                }
                              ],
                        'ul' => {
                                'li' => [
                                        {
                                          'content' => ': Ensures the callback list can only be fired once (like a Deferred).',
                                          'code' => 'once'
                                        },
                                        {
                                          'content' => ': Keeps track of previous values and will call any callback added after the list has been fired right away with the latest "memorized" values (like a Deferred).',
                                          'code' => 'memory'
                                        },
                                        {
                                          'content' => ': Ensures a callback can only be added once (so there are no duplicates in the list).',
                                          'code' => 'unique'
                                        },
                                        {
                                          'content' => ': Interrupts callings when a callback returns false.',
                                          'code' => 'stopOnFalse'
                                        }
                                      ]
                              },
                        'pre' => [
                                 {
                                   'code' => '
function fn1( value ) {
  console.log( value );
}

function fn2( value ) {
  console.log( "fn2 says: " + value );
  return false;
}
    '
                                 },
                                 {
                                   'code' => '
var callbacks = $.Callbacks();
callbacks.add( fn1 );

// Outputs: foo!
callbacks.fire( "foo!" );

callbacks.add( fn2 );

// Outputs: bar!, fn2 says: bar!
callbacks.fire( "bar!" );
    '
                                 },
                                 {
                                   'code' => '
var callbacks = $.Callbacks();
callbacks.add( fn1 );

// Outputs: foo!
callbacks.fire( "foo!" );

callbacks.add( fn2 );

// Outputs: bar!, fn2 says: bar!
callbacks.fire( "bar!" );

callbacks.remove( fn2 );

// Only outputs foobar, as fn2 has been removed.
callbacks.fire( "foobar" );
    '
                                 },
                                 {
                                   'code' => '
var callbacks = $.Callbacks( "once" );
callbacks.add( fn1 );
callbacks.fire( "foo" );
callbacks.add( fn2 );
callbacks.fire( "bar" );
callbacks.remove( fn2 );
callbacks.fire( "foobar" );

/*
output:
foo
*/
    '
                                 },
                                 {
                                   'code' => '
var callbacks = $.Callbacks( "memory" );
callbacks.add( fn1 );
callbacks.fire( "foo" );
callbacks.add( fn2 );
callbacks.fire( "bar" );
callbacks.remove( fn2 );
callbacks.fire( "foobar" );

/*
output:
foo
fn2 says:foo
bar
fn2 says:bar
foobar
*/
    '
                                 },
                                 {
                                   'code' => '
var callbacks = $.Callbacks( "unique" );
callbacks.add( fn1 );
callbacks.fire( "foo" );
callbacks.add( fn1 ); // Repeat addition
callbacks.add( fn2 );
callbacks.fire( "bar" );
callbacks.remove( fn2 );
callbacks.fire( "foobar" );

/*
output:
foo
bar
fn2 says:bar
foobar
*/
    '
                                 },
                                 {
                                   'code' => '
function fn1( value ) {
  console.log( value );
  return false;
}

function fn2( value ) {
  fn1( "fn2 says: " + value );
  return false;
}

var callbacks = $.Callbacks( "stopOnFalse" );
callbacks.add( fn1 );
callbacks.fire( "foo" );
callbacks.add( fn2 );
callbacks.fire( "bar" );
callbacks.remove( fn2 );
callbacks.fire( "foobar" );

/*
output:
foo
bar
foobar
*/
    '
                                 },
                                 {
                                   'code' => '
function fn1( value ) {
  console.log( value );
  return false;
}

function fn2( value ) {
  fn1( "fn2 says: " + value );
  return false;
}

var callbacks = $.Callbacks( "unique memory" );
callbacks.add( fn1 );
callbacks.fire( "foo" );
callbacks.add( fn1 ); // Repeat addition
callbacks.add( fn2 );
callbacks.fire( "bar" );
callbacks.add( fn2 );
callbacks.fire( "baz" );
callbacks.remove( fn2 );
callbacks.fire( "foobar" );

/*
output:
foo
fn2 says:foo
bar
fn2 says:bar
baz
fn2 says:baz
foobar
*/
'
                                 },
                                 {
                                   'code' => '
var callbacks = $.Callbacks(),
  add = callbacks.add,
  remove = callbacks.remove,
  fire = callbacks.fire;

add( fn1 );
fire( "hello world" );
remove( fn1 );
    '
                                 },
                                 {
                                   'code' => '
var topics = {};

jQuery.Topic = function( id ) {
  var callbacks, method,
    topic = id && topics[ id ];

  if ( !topic ) {
    callbacks = jQuery.Callbacks();
    topic = {
      publish: callbacks.fire,
      subscribe: callbacks.add,
      unsubscribe: callbacks.remove
    };
    if ( id ) {
      topics[ id ] = topic;
    }
  }
  return topic;
};
    '
                                 },
                                 {
                                   'code' => '
// Subscribers
$.Topic( "mailArrived" ).subscribe( fn1 );
$.Topic( "mailArrived" ).subscribe( fn2 );
$.Topic( "mailSent" ).subscribe( fn1 );

// Publisher
$.Topic( "mailArrived" ).publish( "hello world!" );
$.Topic( "mailSent" ).publish( "woo! mail!" );

// Here, "hello world!" gets pushed to fn1 and fn2
// when the "mailArrived" notification is published
// with "woo! mail!" also being pushed to fn1 when
// the "mailSent" notification is published.

/*
output:
hello world!
fn2 says: hello world!
woo! mail!
*/
    '
                                 },
                                 {
                                   'code' => '
// Subscribe to the mailArrived notification
$.Topic( "mailArrived" ).subscribe( fn1 );

// Create a new instance of Deferreds
var dfd = $.Deferred();

// Define a new topic (without directly publishing)
var topic = $.Topic( "mailArrived" );

// When the deferred has been resolved, publish a
// notification to subscribers
dfd.done( topic.publish );

// Here the Deferred is being resolved with a message
// that will be passed back to subscribers. It\'s possible to
// easily integrate this into a more complex routine
// (eg. waiting on an Ajax call to complete) so that
// messages are only published once the task has actually
// finished.
dfd.resolve( "it\'s been published!" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' function is internally used to provide the base functionality behind the jQuery ',
                                                ' and ',
                                                ' components. It can be used as a similar base to define functionality for new components.'
                                              ],
                                 'code' => [
                                           '$.Callbacks()',
                                           '$.ajax()',
                                           '$.Deferred()'
                                         ]
                               },
                               {
                                 'code' => [
                                           '$.Callbacks()',
                                           {
                                             'a' => {
                                                    'href' => '/callbacks.add/',
                                                    'content' => 'callbacks.add()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'href' => '/callbacks.remove/',
                                                    'content' => 'callbacks.remove()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'content' => 'callbacks.fire()',
                                                    'href' => '/callbacks.fire/'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'href' => '/callbacks.disable/',
                                                    'content' => 'callbacks.disable()'
                                                  }
                                           }
                                         ],
                                 'content' => [
                                                ' supports a number of methods including ',
                                                ',',
                                                ', ',
                                                ' and ',
                                                '.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The following are two sample methods named ',
                                                ' and ',
                                                ':'
                                              ],
                                 'code' => [
                                           'fn1',
                                           'fn2'
                                         ]
                               },
                               {
                                 'content' => [
                                                'These can be added as callbacks to a ',
                                                ' list and invoked as follows:'
                                              ],
                                 'code' => '$.Callbacks'
                               },
                               'The result of this is that it becomes simple to construct complex lists of callbacks where input values can be passed through to as many functions as needed with ease.',
                               {
                                 'code' => [
                                           '.add()',
                                           '.fire()',
                                           '.add()',
                                           '.fire()'
                                         ],
                                 'content' => [
                                                'Two specific methods were being used above: ',
                                                ' and ',
                                                '. The ',
                                                ' method supports adding new callbacks to the callback list, while the ',
                                                ' method executes the added functions and provides a way to pass arguments to be processed by the callbacks in the same list.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Another method supported by ',
                                                ' is ',
                                                ', which has the ability to remove a particular callback from the callback list. Here\'s a practical example of ',
                                                ' being used:'
                                              ],
                                 'code' => [
                                           '$.Callbacks',
                                           '.remove()',
                                           '.remove()'
                                         ]
                               },
                               {
                                 'code' => [
                                           'flags',
                                           '$.Callbacks()',
                                           '$.Callbacks( "unique stopOnFalse" )'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' argument is an optional argument to ',
                                                ', structured as a list of space-separated strings that change how the callback list behaves (eg. ',
                                                ').'
                                              ]
                               },
                               'By default a callback list will act like an event callback list and can be "fired" multiple times.',
                               {
                                 'code' => 'flags',
                                 'content' => [
                                                'For examples of how ',
                                                ' should ideally be used, see below:'
                                              ]
                               },
                               {
                                 'code' => [
                                           '$.Callbacks()',
                                           '$.Callbacks("unique memory")'
                                         ],
                                 'content' => [
                                                'Because ',
                                                ' supports a list of flags rather than just one, setting several flags has a cumulative effect similar to "&&". This means it\'s possible to combine flags to create callback lists that, say, both are ',
                                                ' and ',
                                                ' (i.e. ',
                                                ').'
                                              ],
                                 'i' => [
                                        'unique',
                                        'ensure if list was already fired, adding more callbacks will have it called with the latest fired value'
                                      ]
                               },
                               {
                                 'code' => [
                                           '$.Callbacks()',
                                           '.done()',
                                           '.fail()',
                                           '$.Callbacks(\'memory once\')'
                                         ],
                                 'content' => [
                                                'Flag combinations with ',
                                                ' are internally in jQuery for the ',
                                                ' and ',
                                                " functions on a Deferred \x{2014} both of which use ",
                                                '.'
                                              ]
                               },
                               {
                                 'code' => '$.Callbacks',
                                 'content' => [
                                                'The methods of ',
                                                ' can also be detached, should there be a need to define short-hand versions for convenience:'
                                              ]
                               },
                               'The general idea behind pub/sub (Publish/Subscribe, or, the Observer pattern) is the promotion of loose coupling in applications. Rather than single objects calling on the methods of other objects, an object instead subscribes to a specific task or activity of another object and is notified when it occurs. Observers are also called Subscribers, and we refer to the object being observed as the Publisher (or the subject). Publishers notify subscribers when events occur.',
                               {
                                 'code' => [
                                           '$.Callbacks()',
                                           '$.Callbacks'
                                         ],
                                 'content' => [
                                                'To demonstrate the component-creation capabilities of ',
                                                ', it\'s possible to implement a Pub/Sub system using only callback lists. Using ',
                                                ' as a topics queue, a system for publishing and subscribing to topics can be implemented as follows:'
                                              ]
                               },
                               'This can then be used by parts of your application to publish and subscribe to events of interest quite easily:',
                               {
                                 'content' => [
                                                'While this is useful, the implementation can be taken further. Using ',
                                                ',  it\'s possible to ensure publishers only publish notifications for subscribers once particular tasks have been completed (resolved). See the below code sample for some further comments on how this could be used in practice:'
                                              ],
                                 'code' => '$.Deferreds'
                               }
                             ]
                      },
          'type' => 'method',
          'name' => 'jQuery.Callbacks',
          'category' => [
                        {
                          'slug' => 'callbacks-object'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'desc' => 'A multi-purpose callbacks list object that provides a powerful way to manage callback lists.',
          'title' => 'jQuery.Callbacks()',
          'return' => 'Callbacks'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.contains.xml ####
Possible keys are: example longdesc type name category signature title return desc
$VAR1 = {
          'example' => {
                       'code' => '
$.contains( document.documentElement, document.body ); // true
$.contains( document.body, document.documentElement ); // false
',
                       'desc' => 'Check if an element is a descendant of another.'
                     },
          'longdesc' => {
                        'p' => {
                               'em' => 'element',
                               'code' => [
                                         '$.contains()',
                                         'true',
                                         'false',
                                         '$.contains()',
                                         'false'
                                       ],
                               'content' => [
                                              'The ',
                                              ' method returns ',
                                              ' if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns ',
                                              '. Only ',
                                              ' nodes are supported; if the second argument is a text or comment node, ',
                                              ' will return ',
                                              '.'
                                            ]
                             },
                        'div' => {
                                 'class' => 'warning',
                                 'p' => {
                                        'strong' => 'Note:',
                                        'content' => [
                                                       ' The first argument ',
                                                       ' be a DOM element, not a jQuery object or plain JavaScript object.'
                                                     ],
                                        'em' => 'must'
                                      }
                               }
                      },
          'type' => 'method',
          'name' => 'jQuery.contains',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'signature' => {
                         'added' => '1.4',
                         'argument' => {
                                       'contained' => {
                                                      'type' => 'Element',
                                                      'desc' => 'The DOM element that may be contained by (a descendant of) the other element.'
                                                    },
                                       'container' => {
                                                      'desc' => 'The DOM element that may contain the other element.',
                                                      'type' => 'Element'
                                                    }
                                     }
                       },
          'title' => 'jQuery.contains()',
          'return' => 'Boolean',
          'desc' => 'Check to see if a DOM element is a descendant of another DOM element.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.cssHooks.xml ####
Possible keys are: signature type name longdesc category desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.4.3'
                       },
          'type' => 'property',
          'name' => 'jQuery.cssHooks',
          'longdesc' => {
                        'h4' => {
                                'defining-complete-csshook' => {
                                                               'content' => 'Defining a complete css hook'
                                                             },
                                'feature-testing' => {
                                                     'content' => 'Feature Testing'
                                                   },
                                'animating' => {
                                               'content' => 'Animating with cssHooks'
                                             },
                                'special-units' => {
                                                   'content' => 'Special units'
                                                 }
                              },
                        'pre' => [
                                 {
                                   'code' => '
(function( $ ) {

// First, check to see if cssHooks are supported
if ( !$.cssHooks ) {
  // If not, output an error message
  throw( new Error( "jQuery 1.4.3 or above is required for this plugin to work" ) );
}

// Wrap in a document ready call, because jQuery writes
// cssHooks at this time and will blow away your functions
// if they exist.
$(function () {
  $.cssHooks[ "someCSSProp" ] = {
    get: function( elem, computed, extra ) {
      // Handle getting the CSS property
    },
    set: function( elem, value ) {
      // Handle setting the CSS value
    }
  };
});

})( jQuery );
    '
                                 },
                                 {
                                   'code' => '
(function( $ ) {

function styleSupport( prop ) {
  var vendorProp, supportedProp,

    // Capitalize first character of the prop to test vendor prefix
    capProp = prop.charAt( 0 ).toUpperCase() + prop.slice( 1 ),
    prefixes = [ "Moz", "Webkit", "O", "ms" ],
    div = document.createElement( "div" );

  if ( prop in div.style ) {

    // Browser supports standard CSS property name
    supportedProp = prop;
  } else {

    // Otherwise test support for vendor-prefixed property names
    for ( var i = 0; i < prefixes.length; i++ ) {
      vendorProp = prefixes[ i ] + capProp;
      if ( vendorProp in div.style ) {
        supportedProp = vendorProp;
        break;
      }
    }
  }

  // Avoid memory leak in IE
  div = null;

  // Add property to $.support so it can be accessed elsewhere
  $.support[ prop ] = supportedProp;
  return supportedProp;
}

// Call the function, e.g. testing for "border-radius" support:
styleSupport( "borderRadius" );

})( jQuery );
    '
                                 },
                                 {
                                   'code' => '
(function( $ ) {

if ( !$.cssHooks ) {
  throw( new Error( "jQuery 1.4.3+ is needed for this plugin to work" ) );
}

function styleSupport( prop ) {
  var vendorProp, supportedProp,
    capProp = prop.charAt( 0 ).toUpperCase() + prop.slice( 1 ),
    prefixes = [ "Moz", "Webkit", "O", "ms" ],
    div = document.createElement( "div" );

  if ( prop in div.style ) {
    supportedProp = prop;
  } else {
    for ( var i = 0; i < prefixes.length; i++ ) {
      vendorProp = prefixes[ i ] + capProp;
      if ( vendorProp in div.style ) {
        supportedProp = vendorProp;
        break;
      }
    }
  }

  div = null;
  $.support[ prop ] = supportedProp;
  return supportedProp;
}

var borderRadius = styleSupport( "borderRadius" );

// Set cssHooks only for browsers that support a vendor-prefixed border radius
if ( borderRadius && borderRadius !== "borderRadius" ) {
  $.cssHooks.borderRadius = {
    get: function( elem, computed, extra ) {
      return $.css( elem, borderRadius );
    },
    set: function( elem, value) {
      elem.style[ borderRadius ] = value;
    }
  };
}

})( jQuery );
    '
                                 },
                                 {
                                   'code' => '
$( "#element" ).css( "borderRadius", "10px" );
$( "#another" ).css( "border-radius", "20px" );
    '
                                 },
                                 {
                                   'code' => '
(function( $ ) {

// Feature test for support of a CSS property
// and a proprietary alternative
// ...
if ( $.support.someCSSProp && $.support.someCSSProp !== "someCSSProp" ) {

  // Set cssHooks for browsers that
  // support only a vendor-prefixed someCSSProp
  $.cssHooks.someCSSProp = {
    get: function( elem, computed, extra ) {
      return $.css( elem, $.support.someCSSProp );
    },
    set: function( elem, value) {
      elem.style[ $.support.someCSSProp ] = value;
    }
  };
} else if ( supportsProprietaryAlternative ) {
  $.cssHooks.someCSSProp = {
    get: function( elem, computed, extra ) {
      // Handle crazy conversion from the proprietary alternative
    },
    set: function( elem, value ) {
      // Handle crazy conversion to the proprietary alternative
    }
  }
}

})( jQuery );
    '
                                 },
                                 {
                                   'code' => '
$.cssNumber.someCSSProp = true;
    '
                                 },
                                 {
                                   'code' => '
$.fx.step.someCSSProp = function( fx ) {
  $.cssHooks.someCSSProp.set( fx.elem, fx.now + fx.unit );
};
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => '$.cssHooks',
                                 'content' => [
                                                'The ',
                                                ' object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients. '
                                              ]
                               },
                               {
                                 'content' => [
                                                'For example, some versions of Webkit-based browsers require ',
                                                ' to set the ',
                                                ' on an element, while earlier Firefox versions require ',
                                                '. A css hook can normalize these vendor-prefixed properties to let ',
                                                ' accept a single, standard property name (',
                                                ', or with DOM property syntax, ',
                                                ').'
                                              ],
                                 'code' => [
                                           '-webkit-border-radius',
                                           'border-radius',
                                           '-moz-border-radius',
                                           '.css()',
                                           'border-radius',
                                           'borderRadius'
                                         ]
                               },
                               {
                                 'code' => [
                                           '$.cssHooks',
                                           '.animate()'
                                         ],
                                 'content' => [
                                                'In addition to providing fine-grained control over how specific style properties are handled, ',
                                                ' also extends the set of properties available to the ',
                                                ' method.'
                                              ]
                               },
                               'Defining a new css hook is straight-forward. The skeleton template below can serve as a guide to creating your own. ',
                               {
                                 'code' => [
                                           'border-radius',
                                           'style'
                                         ],
                                 'content' => [
                                                'Before normalizing a vendor-specific CSS property, first determine whether the browser supports the standard property or a vendor-prefixed variation. For example, to check for support of the ',
                                                ' property, see if any variation is a member of a temporary element\'s ',
                                                ' object.'
                                              ]
                               },
                               'To define a complete css hook, combine the support test with a filled-out version of the skeleton template provided in the first example:',
                               'You can then set the border radius in a supported browser using either the DOM (camelCased) style or the CSS (hyphenated) style:',
                               'If the browser lacks support for any form of the CSS property, vendor-prefixed or not, the style is not applied to the element. However, if the browser supports a proprietary alternative, it can be applied to the cssHooks instead. ',
                               {
                                 'content' => [
                                                'By default, jQuery adds a "px" unit to the values passed to the ',
                                                ' method. This behavior can be prevented by adding the property to the ',
                                                ' object'
                                              ],
                                 'code' => '.css()',
                                 'a' => {
                                        'code' => 'jQuery.cssNumber',
                                        'href' => '/jQuery.cssNumer/'
                                      }
                               },
                               {
                                 'code' => 'jQuery.fx.step',
                                 'content' => [
                                                'A css hook can also hook into jQuery\'s animation mechanism by adding a property to the ',
                                                ' object:'
                                              ]
                               },
                               'Note that this works best for simple numeric-value animations. More custom code may be required depending on the CSS property, the type of value it returns, and the animation\'s complexity.'
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'css'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'desc' => 'Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.',
          'return' => 'Object',
          'title' => 'jQuery.cssHooks'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.cssNumber.xml ####
Possible keys are: return title desc category name type longdesc signature
$VAR1 = {
          'return' => 'Object',
          'title' => 'jQuery.cssNumber',
          'desc' => {
                    'a' => {
                           'code' => '.css()',
                           'href' => '/css/'
                         },
                    'content' => [
                                   'An object containing all CSS properties that may be used without a unit. The ',
                                   ' method uses this object to see if it may append ',
                                   ' to unitless values.'
                                 ],
                    'code' => 'px'
                  },
          'category' => [
                        {
                          'slug' => 'css'
                        },
                        {
                          'slug' => 'manipulation/style-properties'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'name' => 'jQuery.cssNumber',
          'type' => 'property',
          'longdesc' => {
                        'pre' => {
                                 'code' => '
jQuery.cssNumber.someCSSProp = true;
    '
                               },
                        'p' => [
                               {
                                 'content' => [
                                                'You can think about ',
                                                ' as a list of all CSS properties you might use without a unit. It\'s used by ',
                                                ' to determine if it needs to add ',
                                                ' to unitless values.'
                                              ],
                                 'code' => [
                                           'jQuery.cssNumber',
                                           'px'
                                         ],
                                 'a' => {
                                        'code' => '.css()',
                                        'href' => '/css/'
                                      }
                               },
                               {
                                 'a' => {
                                        'href' => '/css/',
                                        'code' => '.css()'
                                      },
                                 'content' => [
                                                'The keys of the ',
                                                ' object are camel-cased and the values are all set to ',
                                                '. If you want to prevent the ',
                                                ' method from automatically adding the ',
                                                ' unit for a specific CSS property, you can add an extra property to the ',
                                                ' object.'
                                              ],
                                 'code' => [
                                           'jQuery.cssNumber',
                                           'true',
                                           'px',
                                           'jQuery.cssNumber'
                                         ]
                               },
                               'By default the object contains the following properties:'
                             ],
                        'ul' => {
                                'li' => [
                                        {
                                          'code' => 'zIndex'
                                        },
                                        {
                                          'code' => 'fontWeight'
                                        },
                                        {
                                          'code' => 'opacity'
                                        },
                                        {
                                          'code' => 'zoom'
                                        },
                                        {
                                          'code' => 'lineHeight'
                                        },
                                        {
                                          'content' => ' (added in jQuery 1.6)',
                                          'code' => 'widows'
                                        },
                                        {
                                          'code' => 'orphans',
                                          'content' => ' (added in jQuery 1.6)'
                                        },
                                        {
                                          'content' => ' (added in jQuery 1.6.2)',
                                          'code' => 'fillOpacity'
                                        },
                                        {
                                          'code' => 'columnCount',
                                          'content' => ' (added in jQuery 1.9)'
                                        },
                                        {
                                          'code' => 'order',
                                          'content' => ' (added in jQuery 1.10.2)'
                                        },
                                        {
                                          'content' => ' (added in jQuery 1.11.1)',
                                          'code' => 'flexGrow'
                                        },
                                        {
                                          'content' => ' (added in jQuery 1.11.1)',
                                          'code' => 'flexShrink'
                                        }
                                      ]
                              }
                      },
          'signature' => {
                         'added' => '1.4.3'
                       }
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.data.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'jQuery.data' => {
                                      'signature' => [
                                                     {
                                                       'argument' => {
                                                                     'key' => {
                                                                              'type' => 'String',
                                                                              'desc' => 'Name of the data stored.'
                                                                            },
                                                                     'element' => {
                                                                                  'desc' => 'The DOM element to query for the data.',
                                                                                  'type' => 'Element'
                                                                                }
                                                                   },
                                                       'added' => '1.2.3'
                                                     },
                                                     {
                                                       'added' => '1.4',
                                                       'argument' => {
                                                                     'name' => 'element',
                                                                     'type' => 'Element',
                                                                     'desc' => 'The DOM element to query for the data.'
                                                                   }
                                                     }
                                                   ],
                                      'longdesc' => {
                                                    'pre' => {
                                                             'code' => '
alert( jQuery.data( document.body, "foo" ) );
alert( jQuery.data( document.body ) );
      '
                                                           },
                                                    'p' => [
                                                           {
                                                             'content' => [
                                                                            ' This is a low-level method; a more convenient ',
                                                                            ' is also available.'
                                                                          ],
                                                             'strong' => 'Note:',
                                                             'code' => {
                                                                       'a' => {
                                                                              'content' => '.data()',
                                                                              'href' => '/data/'
                                                                            }
                                                                     }
                                                           },
                                                           {
                                                             'content' => [
                                                                            ' This low-level method does NOT retrieve the ',
                                                                            ' attributes unless the more convenient ',
                                                                            ' method has already retrieved them.'
                                                                          ],
                                                             'strong' => 'Regarding HTML5 data-* attributes:',
                                                             'code' => [
                                                                       'data-*',
                                                                       {
                                                                         'a' => {
                                                                                'content' => '.data()',
                                                                                'href' => '/data/'
                                                                              }
                                                                       }
                                                                     ]
                                                           },
                                                           {
                                                             'content' => [
                                                                            'The ',
                                                                            ' method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:'
                                                                          ],
                                                             'code' => 'jQuery.data()'
                                                           },
                                                           {
                                                             'code' => 'body',
                                                             'content' => [
                                                                            'The above lines alert the data values that were set on the ',
                                                                            ' element. If nothing was set on that element, an empty string is returned.'
                                                                          ]
                                                           },
                                                           {
                                                             'code' => 'jQuery.data( element )',
                                                             'content' => [
                                                                            'Calling ',
                                                                            ' retrieves all of the element\'s associated values as a JavaScript object. Note that jQuery itself uses this method to store data for internal use, such as event handlers, so do not assume that it contains only data that your own code has stored.'
                                                                          ]
                                                           },
                                                           {
                                                             'content' => ' this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.',
                                                             'em' => 'Note:'
                                                           }
                                                         ]
                                                  },
                                      'example' => {
                                                   'code' => '
$( "button" ).click( function() {
  var value,
    div = $( "div" )[ 0 ];
  switch ( $( "button" ).index( this ) ) {
  case 0 :
    value = jQuery.data( div, "blah" );
    break;
  case 1 :
    jQuery.data( div, "blah", "hello" );
    value = "Stored!";
    break;
  case 2 :
    jQuery.data( div, "blah", 86 );
    value = "Stored!";
    break;
  case 3 :
    jQuery.removeData( div, "blah" );
    value = "Removed!";
    break;
  }
  $( "span" ).text( "" + value );
});
',
                                                   'html' => '
<div>A div</div>
<button>Get "blah" from the div</button>
<button>Set "blah" to "hello"</button>
<button>Set "blah" to 86</button>
<button>Remove "blah" from the div</button>
<p>The "blah" value of this div is <span>?</span></p>
',
                                                   'desc' => 'Get the data named "blah" stored at for an element.',
                                                   'css' => '
  div {
    margin: 5px;
    background: yellow;
  }
  button {
    margin: 5px;
    font-size: 14px;
  }
  p {
    margin: 5px;
    color: blue;
  }
  span {
    color: red;
  }
'
                                                 },
                                      'type' => 'method',
                                      'category' => [
                                                    {
                                                      'slug' => 'data'
                                                    },
                                                    {
                                                      'slug' => 'utilities'
                                                    },
                                                    {
                                                      'slug' => 'version/1.2.3'
                                                    },
                                                    {
                                                      'slug' => 'version/1.4'
                                                    },
                                                    {
                                                      'slug' => 'version/1.4.3'
                                                    }
                                                  ],
                                      'desc' => {
                                                'code' => 'jQuery.data(element, name, value)',
                                                'content' => [
                                                               'Returns value at named data store for the element, as set by ',
                                                               ', or the full data store for the element.'
                                                             ]
                                              },
                                      'return' => 'Object'
                                    }
                   },
          'desc' => 'Store arbitrary data associated with the specified element and/or return the value that was set.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.Deferred.xml ####
Possible keys are: title return desc longdesc type name category signature
$VAR1 = {
          'title' => 'jQuery.Deferred()',
          'return' => 'Deferred',
          'desc' => ' A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.',
          'longdesc' => {
                        'h4' => '
      Enhanced Callbacks with jQuery Deferred
    ',
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' factory creates a new ',
                                                ' object.'
                                              ],
                                 'code' => [
                                           'jQuery.Deferred()',
                                           'deferred'
                                         ]
                               },
                               {
                                 'code' => [
                                           'jQuery.Deferred',
                                           'deferred',
                                           'this'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method can be passed an optional function, which is called just before the method returns and is passed the new ',
                                                ' object as both the ',
                                                ' object and as the first argument to the function. The called function can attach callbacks using ',
                                                ', for example.'
                                              ],
                                 'a' => {
                                        'href' => '/deferred.then/',
                                        'code' => 'deferred.then()'
                                      }
                               },
                               {
                                 'code' => [
                                           'doneCallbacks',
                                           'failCallbacks'
                                         ],
                                 'content' => [
                                                'A Deferred object starts in the ',
                                                ' state. Any callbacks added to the object with ',
                                                ', ',
                                                ', ',
                                                ', or ',
                                                ' are queued to be executed later. Calling ',
                                                ' or ',
                                                ' transitions the Deferred into the ',
                                                ' state and immediately executes any ',
                                                ' that are set. Calling ',
                                                ' or ',
                                                ' transitions the Deferred into the ',
                                                ' state and immediately executes any ',
                                                " that are set. Once the object has entered the resolved or rejected state, it stays in that state. Callbacks can still be added to the resolved or rejected Deferred \x{2014} they will execute immediately."
                                              ],
                                 'a' => [
                                        {
                                          'code' => 'deferred.then()',
                                          'href' => '/deferred.then/'
                                        },
                                        {
                                          'code' => 'deferred.always()',
                                          'href' => '/deferred.always/'
                                        },
                                        {
                                          'href' => '/deferred.done/',
                                          'code' => 'deferred.done()'
                                        },
                                        {
                                          'href' => '/deferred.fail/',
                                          'code' => 'deferred.fail()'
                                        },
                                        {
                                          'code' => 'deferred.resolve()',
                                          'href' => '/deferred.resolve/'
                                        },
                                        {
                                          'href' => '/deferred.resolveWith/',
                                          'code' => 'deferred.resolveWith()'
                                        },
                                        {
                                          'code' => 'deferred.reject()',
                                          'href' => '/deferred.reject/'
                                        },
                                        {
                                          'href' => '/deferred.rejectWith/',
                                          'code' => 'deferred.rejectWith()'
                                        }
                                      ],
                                 'em' => [
                                         'pending',
                                         'resolved',
                                         'rejected'
                                       ]
                               },
                               {
                                 'content' => [
                                                'In JavaScript it is common to invoke functions that optionally accept callbacks that are called within that function. For example, in versions prior to jQuery 1.5, asynchronous processes such as ',
                                                ' accept callbacks to be invoked some time in the near-future upon success, error, and completion of the ajax request.'
                                              ],
                                 'code' => 'jQuery.ajax()'
                               },
                               {
                                 'a' => {
                                        'content' => 'CommonJS Promises/A',
                                        'href' => 'http://wiki.commonjs.org/wiki/Promises/A'
                                      },
                                 'code' => [
                                           'jQuery.Deferred()',
                                           'jQuery.Deferred()'
                                         ],
                                 'content' => [
                                                ' introduces several enhancements to the way callbacks are managed and invoked. In particular, ',
                                                ' provides flexible ways to provide multiple callbacks, and these callbacks can be invoked regardless of whether the original callback dispatch has already occurred. jQuery Deferred is based on the ',
                                                ' design.'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'href' => '/deferred.then/',
                                          'code' => 'deferred.then()'
                                        },
                                        {
                                          'code' => 'deferred.always()',
                                          'href' => '/deferred.always/'
                                        },
                                        {
                                          'code' => 'deferred.done()',
                                          'href' => '/deferred.done/'
                                        },
                                        {
                                          'href' => '/deferred.fail/',
                                          'code' => 'deferred.fail()'
                                        },
                                        {
                                          'code' => 'deferred.resolve(args)',
                                          'href' => '/deferred.resolve/'
                                        },
                                        {
                                          'code' => 'deferred.reject(args)',
                                          'href' => '/deferred.reject/'
                                        }
                                      ],
                                 'code' => [
                                           'deferred.resolve()',
                                           'deferred.then()'
                                         ],
                                 'content' => [
                                                'One model for understanding Deferred is to think of it as a chain-aware function wrapper. The ',
                                                ', ',
                                                ', ',
                                                ', and ',
                                                ' methods specify the functions to be called and the ',
                                                ' or ',
                                                ' methods "call" the functions with the arguments you supply. Once the Deferred has been resolved or rejected it stays in that state; a second call to ',
                                                ', for example, is ignored. If more functions are added by ',
                                                ', for example, after the Deferred is resolved, they are called immediately with the arguments previously provided.'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'href' => '/jQuery.ajax/',
                                          'code' => 'jQuery.ajax()'
                                        },
                                        {
                                          'href' => '/jQuery.when/',
                                          'code' => 'jQuery.when()'
                                        },
                                        {
                                          'href' => '/deferred.then/',
                                          'code' => 'deferred.then()'
                                        },
                                        {
                                          'href' => '/deferred.done/',
                                          'code' => 'deferred.done()'
                                        },
                                        {
                                          'href' => '/deferred.fail/',
                                          'code' => 'deferred.fail()'
                                        },
                                        {
                                          'href' => '/deferred.resolve/',
                                          'code' => 'deferred.resolve()'
                                        },
                                        {
                                          'code' => 'deferred.reject()',
                                          'href' => '/deferred.reject/'
                                        }
                                      ],
                                 'content' => [
                                                'In most cases where a jQuery API call returns a Deferred or Promise-compatible object, such as ',
                                                ' or ',
                                                ', you will only want to use the ',
                                                ', ',
                                                ', and ',
                                                ' methods to add callbacks to the Deferred\'s queues. The internals of the API call or code that created the Deferred will invoke ',
                                                ' or ',
                                                ' on the deferred at some point, causing the appropriate callbacks to run.'
                                              ]
                               }
                             ]
                      },
          'type' => 'method',
          'name' => 'jQuery.Deferred',
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'optional' => 'true',
                                       'name' => 'beforeStart',
                                       'type' => 'Function',
                                       'argument' => {
                                                     'desc' => '
          The constructed Deferred object.
        ',
                                                     'type' => 'Deferred',
                                                     'name' => 'deferred'
                                                   },
                                       'desc' => '
        A function that is called just before the constructor returns.
      '
                                     },
                         'added' => '1.5'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.dequeue.xml ####
Possible keys are: return title desc type name longdesc example category signature
$VAR1 = {
          'return' => 'undefined',
          'title' => 'jQuery.dequeue()',
          'desc' => 'Execute the next function on the queue for the matched element.',
          'type' => 'method',
          'name' => 'jQuery.dequeue',
          'longdesc' => {
                        'p' => [
                               {
                                 'strong' => 'Note:',
                                 'content' => [
                                                ' This is a low-level method, you should probably use ',
                                                ' instead.'
                                              ],
                                 'code' => {
                                           'a' => {
                                                  'content' => '.dequeue()',
                                                  'href' => '/dequeue/'
                                                }
                                         }
                               },
                               {
                                 'content' => [
                                                'When ',
                                                ' is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause ',
                                                ' to be called, so that the sequence can continue.'
                                              ],
                                 'code' => [
                                           'jQuery.dequeue()',
                                           'jQuery.dequeue()'
                                         ]
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$( "button" ).click(function() {
  $( "div" )
    .animate({ left: \'+=200px\' }, 2000 )
    .animate({ top: \'0px\' }, 600 )
    .queue(function() {
      $( this ).toggleClass( "red" );
      $.dequeue( this );
    })
    .animate({ left:\'10px\', top:\'30px\' }, 700 );
});
',
                       'css' => '
  div {
    margin: 3px;
    width: 50px;
    position: absolute;
    height: 50px;
    left: 10px;
    top: 30px;
    background-color: yellow;
  }
  div.red {
    background-color: red;
  }
',
                       'desc' => 'Use jQuery.dequeue() to end a custom queue function which allows the queue to keep going.',
                       'html' => '
<button>Start</button>
<div></div>
'
                     },
          'category' => [
                        {
                          'slug' => 'data'
                        },
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ],
          'signature' => {
                         'added' => '1.3',
                         'argument' => {
                                       'queueName' => {
                                                      'desc' => {
                                                                'content' => [
                                                                               'A string containing the name of the queue. Defaults to ',
                                                                               ', the standard effects queue.'
                                                                             ],
                                                                'code' => 'fx'
                                                              },
                                                      'optional' => 'true',
                                                      'type' => 'String'
                                                    },
                                       'element' => {
                                                    'type' => 'Element',
                                                    'desc' => 'A DOM element from which to remove and execute a queued function.'
                                                  }
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.each.xml ####
Possible keys are: title return desc longdesc example type name category signature
$VAR1 = {
          'title' => 'jQuery.each()',
          'return' => 'Object',
          'desc' => 'A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\'s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' function is not the same as ',
                                                ', which is used to iterate, exclusively, over a jQuery object. The ',
                                                ' function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the ',
                                                ' keyword, but Javascript will always wrap the ',
                                                ' value as an ',
                                                ' even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.'
                                              ],
                                 'code' => [
                                           '$.each()',
                                           '$.each()',
                                           'this',
                                           'this',
                                           'Object'
                                         ],
                                 'a' => {
                                        'href' => '/each/',
                                        'content' => '$(selector).each()'
                                      }
                               },
                               {
                                 'b' => 'Note:',
                                 'code' => [
                                           '$.each()',
                                           'length',
                                           'length',
                                           '{bar: \'foo\', length: 10}'
                                         ],
                                 'content' => [
                                                ' The ',
                                                ' function internally retrieves and uses the ',
                                                ' property of the passed collection. So, if the collection has a property called ',
                                                " \x{2014} e.g. ",
                                                " \x{2014} the function might not work as expected."
                                              ]
                               },
                               'This produces two messages:',
                               {
                                 'br' => {},
                                 'samp' => [
                                           '0: 52',
                                           '1: 97'
                                         ]
                               },
                               'If an object is used as the collection, the callback is passed a key-value pair each time:',
                               'Once again, this produces two messages:',
                               {
                                 'samp' => [
                                           'flammable: inflammable',
                                           'duh: no duh'
                                         ],
                                 'br' => {}
                               },
                               {
                                 'em' => 'non-false',
                                 'code' => [
                                           '$.each()',
                                           'false',
                                           'continue'
                                         ],
                                 'content' => [
                                                'We can break the ',
                                                ' loop at a particular iteration by making the callback function return ',
                                                '. Returning ',
                                                ' is the same as a ',
                                                ' statement in a for loop; it will skip immediately to the next iteration.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$.each([ 52, 97 ], function( index, value ) {
  alert( index + ": " + value );
});
    '
                                 },
                                 {
                                   'code' => '
var obj = {
  "flammable": "inflammable",
  "duh": "no duh"
};
$.each( obj, function( key, value ) {
  alert( key + ": " + value );
});
    '
                                 }
                               ]
                      },
          'example' => [
                       {
                         'html' => '
<div id="one"></div>
<div id="two"></div>
<div id="three"></div>
<div id="four"></div>
<div id="five"></div>
',
                         'desc' => 'Iterates through the array displaying each number as both a word and numeral',
                         'css' => '
  div {
    color: blue;
  }
  div#five {
    color: red;
  }
',
                         'code' => '
var arr = [ "one", "two", "three", "four", "five" ];
var obj = { one: 1, two: 2, three: 3, four: 4, five: 5 };

jQuery.each( arr, function( i, val ) {
  $( "#" + val ).text( "Mine is " + val + "." );

  // Will stop running after "three"
  return ( val !== "three" );
});

jQuery.each( obj, function( i, val ) {
  $( "#" + i ).append( document.createTextNode( " - " + val ) );
});
'
                       },
                       {
                         'desc' => 'Iterates over items in an array, accessing both the current item and its index.',
                         'code' => '
$.each( [ "a", "b", "c" ], function( i, l ){
  alert( "Index #" + i + ": " + l );
});
'
                       },
                       {
                         'code' => '
$.each({ name: "John", lang: "JS" }, function( k, v ) {
  alert( "Key: " + k + ", Value: " + v );
});
',
                         'desc' => 'Iterates over the properties in an object, accessing both the current item and its key.'
                       }
                     ],
          'type' => 'method',
          'name' => 'jQuery.each',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'callback' => {
                                                       'desc' => 'The function that will be executed on every object.',
                                                       'argument' => {
                                                                     'indexInArray' => {
                                                                                       'type' => 'Integer'
                                                                                     },
                                                                     'value' => {
                                                                                'type' => 'Object'
                                                                              }
                                                                   },
                                                       'type' => 'Function'
                                                     },
                                         'array' => {
                                                    'desc' => 'The array to iterate over.',
                                                    'type' => 'Array'
                                                  }
                                       }
                         },
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'object' => {
                                                     'type' => 'Object',
                                                     'desc' => 'The object to iterate over.'
                                                   },
                                         'callback' => {
                                                       'argument' => {
                                                                     'propertyName' => {
                                                                                       'type' => 'String'
                                                                                     },
                                                                     'valueOfProperty' => {
                                                                                          'type' => 'Object'
                                                                                        }
                                                                   },
                                                       'type' => 'Function',
                                                       'desc' => 'The function that will be executed on every object.'
                                                     }
                                       }
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.error.xml ####
Possible keys are: category longdesc example type name signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'internals'
                        },
                        {
                          'slug' => 'version/1.4.1'
                        }
                      ],
          'longdesc' => {
                        'p' => 'This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.'
                      },
          'example' => {
                       'desc' => 'Override jQuery.error for display in Firebug.',
                       'code' => '
jQuery.error = console.error;
'
                     },
          'type' => 'method',
          'name' => 'jQuery.error',
          'signature' => {
                         'added' => '1.4.1',
                         'argument' => {
                                       'desc' => 'The message to send out.',
                                       'name' => 'message',
                                       'type' => 'String'
                                     }
                       },
          'title' => 'jQuery.error()',
          'return' => '',
          'desc' => 'Takes a string and throws an exception containing it.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.escapeSelector.xml ####
Possible keys are: signature example longdesc type name category desc title return
$VAR1 = {
          'signature' => {
                         'added' => '3.0',
                         'argument' => {
                                       'desc' => 'A string containing a selector expression to escape.',
                                       'name' => 'selector',
                                       'type' => 'Selector'
                                     }
                       },
          'example' => [
                       {
                         'desc' => 'Escape an ID containing a hash.',
                         'code' => '
$.escapeSelector( "#target" ); // "\\#target"
'
                       },
                       {
                         'code' => '
$( "div" ).find( "." + $.escapeSelector( ".box" ) );
',
                         'desc' => {
                                   'content' => [
                                                  'Select all the elements having a class name of ',
                                                  ' inside a ',
                                                  '.'
                                                ],
                                   'code' => [
                                             '.box',
                                             'div'
                                           ]
                                 }
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               'This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.',
                               {
                                 'a' => {
                                        'href' => 'https://drafts.csswg.org/cssom/#the-css.escape()-method',
                                        'content' => 'CSS Working Group\'s CSS.escape() method'
                                      },
                                 'code' => '$.escapeSelector()',
                                 'content' => [
                                                'The method is essentially a shim for the ',
                                                '. The main difference is that ',
                                                ' can be reliably used in all of jQuery\'s supported browsers.'
                                              ]
                               }
                             ]
                      },
          'type' => 'method',
          'name' => 'jQuery.escapeSelector',
          'category' => [
                        {
                          'slug' => 'css'
                        },
                        {
                          'slug' => 'version/3.0'
                        }
                      ],
          'desc' => 'Escapes any character that has a special meaning in a CSS selector.',
          'title' => 'jQuery.escapeSelector()',
          'return' => 'Selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.extend.xml ####
Possible keys are: signature type name longdesc example category desc return title
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'objectN' => {
                                                      'optional' => 'true',
                                                      'type' => 'Object',
                                                      'desc' => 'Additional objects containing properties to merge in.'
                                                    },
                                         'target' => {
                                                     'type' => 'Object',
                                                     'desc' => ' An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.'
                                                   },
                                         'object1' => {
                                                      'type' => 'Object',
                                                      'optional' => 'true',
                                                      'desc' => 'An object containing additional properties to merge in.'
                                                    }
                                       },
                           'added' => '1.0'
                         },
                         {
                           'argument' => {
                                         'object1' => {
                                                      'desc' => 'An object containing additional properties to merge in.',
                                                      'type' => 'Object'
                                                    },
                                         'target' => {
                                                     'type' => 'Object',
                                                     'desc' => 'The object to extend. It will receive the new properties.'
                                                   },
                                         'deep' => {
                                                   'desc' => 'If true, the merge becomes recursive (aka. deep copy).',
                                                   'optional' => 'true',
                                                   'type' => 'Boolean'
                                                 },
                                         'objectN' => {
                                                      'desc' => 'Additional objects containing properties to merge in.',
                                                      'optional' => 'true',
                                                      'type' => 'Object'
                                                    }
                                       },
                           'added' => '1.1.4'
                         }
                       ],
          'type' => 'method',
          'name' => 'jQuery.extend',
          'longdesc' => {
                        'pre' => {
                                 'code' => 'var object = $.extend({}, object1, object2);'
                               },
                        'p' => [
                               {
                                 'code' => [
                                           '$.extend()',
                                           'null',
                                           'undefined'
                                         ],
                                 'content' => [
                                                'When two or more object arguments are supplied to ',
                                                ', properties from all of the objects are added to the target object. Arguments that are ',
                                                ' or ',
                                                ' are ignored.'
                                              ]
                               },
                               {
                                 'code' => '$.extend()',
                                 'content' => [
                                                'If only one argument is supplied to ',
                                                ', this means the target argument was omitted. In this case, the jQuery object itself is assumed to be the target. By doing this, you can add new functions to the jQuery namespace. This can be useful for plugin authors wishing to add new methods to JQuery.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Keep in mind that the target object (first argument) will be modified, and will also be returned from ',
                                                '. If, however, you want to preserve both of the original objects, you can do so by passing an empty object as the target:'
                                              ],
                                 'code' => '$.extend()'
                               },
                               {
                                 'content' => [
                                                'The merge performed by ',
                                                ' is not recursive by default; if a property of the first object is itself an object or array, it will be completely overwritten by a property with the same key in the second or subsequent object. The values are not merged. This can be seen in the example below by examining the value of banana. However, by passing ',
                                                ' for the first function argument, objects will be recursively merged.'
                                              ],
                                 'code' => [
                                           '$.extend()',
                                           'true'
                                         ]
                               },
                               {
                                 'strong' => 'Warning',
                                 'content' => [
                                                ': Passing ',
                                                ' for the first argument is not supported.'
                                              ],
                                 'code' => 'false'
                               },
                               {
                                 'content' => [
                                                'Undefined properties are not copied. However, properties inherited from the object\'s prototype ',
                                                ' be copied over. Properties that are an object constructed via ',
                                                ', or built-in JavaScript types such as Date or RegExp, are not re-constructed and will appear as plain Objects in the resulting object or array.'
                                              ],
                                 'code' => 'new MyCustomObject(args)',
                                 'em' => 'will'
                               },
                               {
                                 'code' => 'deep',
                                 'content' => [
                                                'On a ',
                                                ' extend, Object and Array are extended, but object wrappers on primitive types such as String, Boolean, and Number are not. Deep-extending a cyclical data structure will result in an error.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => 'http://lodash.com',
                                        'content' => 'lodash'
                                      },
                                 'content' => [
                                                'For needs that fall outside of this behavior, write a custom extend method instead, or use a library like ',
                                                '. '
                                              ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'html' => '
<div id="log"></div>
',
                         'desc' => 'Merge two objects, modifying the first.',
                         'code' => '
var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

// Merge object2 into object1
$.extend( object1, object2 );

// Assuming JSON.stringify - not available in IE<8
$( "#log" ).append( JSON.stringify( object1 ) );
'
                       },
                       {
                         'desc' => 'Merge two objects recursively, modifying the first.',
                         'html' => '
<div id="log"></div>
',
                         'code' => '
var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

// Merge object2 into object1, recursively
$.extend( true, object1, object2 );

// Assuming JSON.stringify - not available in IE<8
$( "#log" ).append( JSON.stringify( object1 ) );
'
                       },
                       {
                         'html' => '
<div id="log"></div>
',
                         'desc' => 'Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.',
                         'code' => '
var defaults = { validate: false, limit: 5, name: "foo" };
var options = { validate: true, name: "bar" };

// Merge defaults and options, without modifying defaults
var settings = $.extend( {}, defaults, options );

// Assuming JSON.stringify - not available in IE<8
$( "#log" ).append( "<div><b>defaults -- </b>" + JSON.stringify( defaults ) + "</div>" );
$( "#log" ).append( "<div><b>options -- </b>" + JSON.stringify( options ) + "</div>" );
$( "#log" ).append( "<div><b>settings -- </b>" + JSON.stringify( settings ) + "</div>" );
'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'desc' => 'Merge the contents of two or more objects together into the first object.',
          'return' => 'Object',
          'title' => 'jQuery.extend()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.fn.extend.xml ####
Possible keys are: signature example longdesc type name category desc title return
$VAR1 = {
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'name' => 'object',
                                       'type' => 'Object',
                                       'desc' => 'An object to merge onto the jQuery prototype.'
                                     }
                       },
          'example' => {
                       'desc' => {
                                 'code' => '$.fn',
                                 'content' => [
                                                'Add two methods to the jQuery prototype (',
                                                ') object and then use one of them.'
                                              ]
                               },
                       'html' => '
<label><input type="checkbox" name="foo"> Foo</label>
<label><input type="checkbox" name="bar"> Bar</label>
',
                       'css' => '
  label {
    display: block;
    margin: .5em;
  }
',
                       'code' => '
jQuery.fn.extend({
  check: function() {
    return this.each(function() {
      this.checked = true;
    });
  },
  uncheck: function() {
    return this.each(function() {
      this.checked = false;
    });
  }
});

// Use the newly created .check() method
$( "input[type=\'checkbox\']" ).check();
'
                     },
          'longdesc' => {
                        'code' => [
                                  'jQuery.fn.extend()',
                                  '$.fn',
                                  'jQuery()'
                                ],
                        'content' => [
                                       '
    The ',
                                       ' method extends the jQuery prototype (',
                                       ') object to provide new methods that can be chained to the ',
                                       ' function.
  '
                                     ]
                      },
          'type' => 'method',
          'name' => 'jQuery.fn.extend',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'desc' => 'Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.',
          'title' => 'jQuery.fn.extend()',
          'return' => 'Object'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.fx.interval.xml ####
Possible keys are: title return desc example longdesc type name category signature
$VAR1 = {
          'title' => 'jQuery.fx.interval',
          'return' => 'Number',
          'desc' => 'The rate (in milliseconds) at which animations fire.',
          'example' => {
                       'code' => '
jQuery.fx.interval = 100;
$( "input" ).click(function() {
  $( "div" ).toggle( 3000 );
});
',
                       'css' => '
  div {
    width: 50px;
    height: 30px;
    margin: 5px;
    float: left;
    background: green;
  }
',
                       'html' => '
<p><input type="button" value="Run"></p>
<div></div>
',
                       'desc' => 'Cause all animations to run with less frames.'
                     },
          'longdesc' => {
                        'p' => [
                               'This property can be manipulated to adjust the number of frames per second at which animations will run. The default is 13 milliseconds. Making this a lower number could make the animations run smoother in faster browsers (such as Chrome) but there may be performance and CPU implications of doing so.',
                               'Since jQuery uses one global interval, no animation should be running or all animations should stop for the change of this property to take effect.'
                             ]
                      },
          'type' => 'property',
          'name' => 'jQuery.fx.interval',
          'category' => [
                        {
                          'slug' => 'effects/custom-effects'
                        },
                        {
                          'slug' => 'properties/global-jquery-object-properties'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'signature' => {
                         'added' => '1.4.3'
                       }
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.fx.off.xml ####
Possible keys are: category example longdesc name type signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'effects/custom-effects'
                        },
                        {
                          'slug' => 'properties/global-jquery-object-properties'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ],
          'example' => {
                       'code' => '
var toggleFx = function() {
  $.fx.off = !$.fx.off;
};
toggleFx();
$( "button" ).click( toggleFx );
$( "input" ).click(function() {
  $( "div" ).toggle( "slow" );
});
',
                       'desc' => 'Toggle animation on and off',
                       'html' => '
<input type="button" value="Run">
<button>Toggle fx</button>
<div></div>
',
                       'css' => '
  div {
    width: 50px;
    height: 30px;
    margin: 5px;
    float: left;
    background: green;
  }
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'When this property is set to ',
                                                ', all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:'
                                              ],
                                 'code' => 'true'
                               },
                               {
                                 'code' => 'false',
                                 'content' => [
                                                'Animations can be turned back on by setting the property to ',
                                                '.'
                                              ]
                               }
                             ],
                        'ul' => {
                                'li' => [
                                        'jQuery is being used on a low-resource device.',
                                        'Users are encountering accessibility problems with the animations.'
                                      ]
                              }
                      },
          'name' => 'jQuery.fx.off',
          'type' => 'property',
          'signature' => {
                         'added' => '1.3'
                       },
          'title' => 'jQuery.fx.off',
          'return' => 'Boolean',
          'desc' => 'Globally disable all animations.'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.get.xml ####
Possible keys are: note desc title return signature example longdesc name type category
$VAR1 = {
          'note' => {
                    'same-origin-policy' => {
                                            'type' => 'additional'
                                          },
                    'use-ajaxerror' => {
                                       'type' => 'additional',
                                       'data-title' => 'jQuery.get()'
                                     },
                    'same-origin-policy-exceptions' => {
                                                       'type' => 'additional'
                                                     }
                  },
          'desc' => 'Load data from the server using a HTTP GET request.',
          'title' => 'jQuery.get()',
          'return' => 'jqXHR',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'dataType' => {
                                                       'optional' => 'true',
                                                       'type' => 'String',
                                                       'desc' => 'The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).'
                                                     },
                                         'success' => {
                                                      'optional' => 'true',
                                                      'argument' => {
                                                                    'jqXHR' => {
                                                                               'type' => 'jqXHR'
                                                                             },
                                                                    'data' => {
                                                                              'type' => 'PlainObject'
                                                                            },
                                                                    'textStatus' => {
                                                                                    'type' => 'String'
                                                                                  }
                                                                  },
                                                      'type' => 'Function',
                                                      'desc' => {
                                                                'a' => {
                                                                       'code' => 'jQuery.noop',
                                                                       'href' => '/jQuery.noop/'
                                                                     },
                                                                'content' => [
                                                                               'A callback function that is executed if the request succeeds. Required if ',
                                                                               ' is provided, but you can use ',
                                                                               ' or ',
                                                                               ' as a placeholder.'
                                                                             ],
                                                                'code' => [
                                                                          'dataType',
                                                                          'null'
                                                                        ]
                                                              }
                                                    },
                                         'url' => {
                                                  'desc' => 'A string containing the URL to which the request is sent.',
                                                  'type' => 'String'
                                                },
                                         'data' => {
                                                   'desc' => 'A plain object or string that is sent to the server with the request.',
                                                   'optional' => 'true',
                                                   'type' => {
                                                             'PlainObject' => {},
                                                             'String' => {}
                                                           }
                                                 }
                                       }
                         },
                         {
                           'added' => '1.12/2.2',
                           'argument' => {
                                         'desc' => {
                                                   'code' => [
                                                             'url',
                                                             'GET'
                                                           ],
                                                   'content' => [
                                                                  'A set of key/value pairs that configure the Ajax request. All properties except for ',
                                                                  ' are optional. A default can be set for any option with ',
                                                                  '. See ',
                                                                  ' for a complete list of all settings. The type option will automatically be set to ',
                                                                  '.'
                                                                ],
                                                   'a' => [
                                                          {
                                                            'content' => '$.ajaxSetup()',
                                                            'href' => '/jQuery.ajaxSetup/'
                                                          },
                                                          {
                                                            'content' => 'jQuery.ajax( settings )',
                                                            'href' => '/jquery.ajax/#jQuery-ajax-settings'
                                                          }
                                                        ]
                                                 },
                                         'optional' => 'false',
                                         'type' => 'PlainObject',
                                         'name' => 'settings'
                                       }
                         }
                       ],
          'example' => [
                       {
                         'desc' => 'Request the test.php page, but ignore the return results.',
                         'code' => '
$.get( "test.php" );
'
                       },
                       {
                         'desc' => 'Request the test.php page and send some additional data along (while still ignoring the return results).',
                         'code' => '
$.get( "test.php", { name: "John", time: "2pm" } );
'
                       },
                       {
                         'desc' => 'Pass arrays of data to the server (while still ignoring the return results).',
                         'code' => '
$.get( "test.php", { "choices[]": ["Jon", "Susan"] } );
'
                       },
                       {
                         'desc' => 'Alert the results from requesting test.php (HTML or XML, depending on what was returned).',
                         'code' => '
$.get( "test.php", function( data ) {
  alert( "Data Loaded: " + data );
});
'
                       },
                       {
                         'desc' => 'Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).',
                         'code' => '
$.get( "test.cgi", { name: "John", time: "2pm" } )
  .done(function( data ) {
    alert( "Data Loaded: " + data );
  });
'
                       },
                       {
                         'code' => '
$.get( "test.php", function( data ) {
  $( "body" )
    .append( "Name: " + data.name ) // John
    .append( "Time: " + data.time ); //  2pm
}, "json" );
',
                         'desc' => ' Get the test.php page contents, which has been returned in json format (<?php echo json_encode( array( "name"=>"John","time"=>"2pm" ) ); ?>), and add it to the page.'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               'This is a shorthand Ajax function, which is equivalent to:',
                               {
                                 'content' => [
                                                'The ',
                                                ' callback function is passed the returned data, which will be an XML root element, text string, JavaScript file, or JSON object, depending on the MIME type of the response. It is also passed the text status of the response. '
                                              ],
                                 'code' => 'success'
                               },
                               {
                                 'abbr' => {
                                           'content' => 'XHR',
                                           'title' => 'XMLHTTPRequest'
                                         },
                                 'a' => {
                                        'content' => '"jqXHR" object',
                                        'href' => '#jqxhr-object'
                                      },
                                 'content' => [
                                                ', the ',
                                                ' callback function is also passed a ',
                                                ' (in ',
                                                ', it was passed the ',
                                                ' object). However, since JSONP and cross-domain GET requests do not use ',
                                                ',  in those cases the ',
                                                ' and ',
                                                ' parameters passed to the success callback are undefined.'
                                              ],
                                 'strong' => [
                                             'As of jQuery 1.5',
                                             'jQuery 1.4'
                                           ],
                                 'code' => [
                                           'success',
                                           'XMLHttpRequest',
                                           'jqXHR',
                                           'textStatus'
                                         ]
                               },
                               'Most implementations will specify a success handler:',
                               'This example fetches the requested HTML snippet and inserts it on the page.',
                               {
                                 'a' => [
                                        {
                                          'content' => 'Deferred object',
                                          'href' => '/category/deferred-object/'
                                        },
                                        {
                                          'href' => '/jQuery.ajax/#jqXHR',
                                          'content' => 'jqXHR Object'
                                        }
                                      ],
                                 'content' => [
                                                ', all of jQuery\'s Ajax methods return  a superset of the ',
                                                ' object. This jQuery XHR object, or "jqXHR," returned by ',
                                                ' implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see ',
                                                ' for more information). The ',
                                                ' (for success), ',
                                                ' (for error), and ',
                                                ' (for completion, whether success or error) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the ',
                                                ' section of the ',
                                                ' documentation.'
                                              ],
                                 'strong' => 'As of jQuery 1.5',
                                 'code' => [
                                           'XMLHTTPRequest',
                                           '$.get()',
                                           'jqXHR.done()',
                                           'jqXHR.fail()',
                                           'jqXHR.always()',
                                           '$.ajax()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The Promise interface also allows jQuery\'s Ajax methods, including ',
                                                ', to chain multiple ',
                                                ', ',
                                                ', and ',
                                                ' callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.'
                                              ],
                                 'code' => [
                                           '$.get()',
                                           '.done()',
                                           '.fail()',
                                           '.always()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ', ',
                                                ', and ',
                                                ' callback methods are ',
                                                '. You can use ',
                                                ', ',
                                                ', and ',
                                                ' instead.'
                                              ],
                                 'strong' => 'removed as of jQuery 3.0',
                                 'code' => [
                                           'jqXHR.success()',
                                           'jqXHR.error()',
                                           'jqXHR.complete()',
                                           'jqXHR.done()',
                                           'jqXHR.fail()',
                                           'jqXHR.always()'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$.ajax({
  url: url,
  data: data,
  success: success,
  dataType: dataType
});
    '
                                 },
                                 {
                                   'code' => '
$.get( "ajax/test.html", function( data ) {
  $( ".result" ).html( data );
  alert( "Load was performed." );
});
    '
                                 },
                                 {
                                   'code' => '
// Assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( "example.php", function() {
  alert( "success" );
})
  .done(function() {
    alert( "second success" );
  })
  .fail(function() {
    alert( "error" );
  })
  .always(function() {
    alert( "finished" );
  });

// Perform other work here ...

// Set another completion function for the request above
jqxhr.always(function() {
  alert( "second finished" );
});
    '
                                 }
                               ],
                        'h4' => [
                                {
                                  'content' => 'The jqXHR Object',
                                  'id' => 'jqxhr-object'
                                },
                                'Deprecation Notice'
                              ]
                      },
          'name' => 'jQuery.get',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'ajax/shorthand-methods'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.getJSON.xml ####
Possible keys are: category example longdesc name type signature title return desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'ajax/shorthand-methods'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'example' => [
                       {
                         'desc' => 'Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API.',
                         'html' => '
<div id="images"></div>
',
                         'css' => '
  img {
    height: 100px;
    float: left;
  }
',
                         'code' => '
(function() {
  var flickerAPI = "http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?";
  $.getJSON( flickerAPI, {
    tags: "mount rainier",
    tagmode: "any",
    format: "json"
  })
    .done(function( data ) {
      $.each( data.items, function( i, item ) {
        $( "<img>" ).attr( "src", item.media.m ).appendTo( "#images" );
        if ( i === 3 ) {
          return false;
        }
      });
    });
})();
'
                       },
                       {
                         'desc' => 'Load the JSON data from test.js and access a name from the returned JSON data.',
                         'code' => '
$.getJSON( "test.js", function( json ) {
  console.log( "JSON Data: " + json.users[ 3 ].name );
 });
 '
                       },
                       {
                         'code' => '
$.getJSON( "test.js", { name: "John", time: "2pm" } )
  .done(function( json ) {
    console.log( "JSON Data: " + json.users[ 3 ].name );
  })
  .fail(function( jqxhr, textStatus, error ) {
    var err = textStatus + ", " + error;
    console.log( "Request Failed: " + err );
});
',
                         'desc' => 'Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data.
      If an error occurs, log an error message instead.'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               'This is a shorthand Ajax function, which is equivalent to:',
                               {
                                 'content' => [
                                                'Data that is sent to the server is appended to the URL as a query string. If the value of the ',
                                                ' parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL.'
                                              ],
                                 'code' => 'data'
                               },
                               'Most implementations will specify a success handler:',
                               'This example, of course, relies on the structure of the JSON file:',
                               'Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body.',
                               {
                                 'code' => [
                                           'success',
                                           {
                                             'a' => {
                                                    'href' => '/jQuery.parseJSON/',
                                                    'content' => '$.parseJSON()'
                                                  }
                                           }
                                         ],
                                 'content' => [
                                                'The ',
                                                ' callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the ',
                                                ' method. It is also passed the text status of the response.'
                                              ]
                               },
                               {
                                 'strong' => [
                                             'As of jQuery 1.5',
                                             'jQuery 1.4'
                                           ],
                                 'content' => [
                                                ', the ',
                                                ' callback function receives a ',
                                                ' (in ',
                                                ', it received the ',
                                                ' object). However, since JSONP and cross-domain GET requests do not use ',
                                                ', in those cases the ',
                                                ' and ',
                                                ' parameters passed to the success callback are undefined.'
                                              ],
                                 'code' => [
                                           'success',
                                           'XMLHttpRequest',
                                           'jqXHR',
                                           'textStatus'
                                         ],
                                 'abbr' => {
                                           'title' => 'XMLHTTPRequest',
                                           'content' => 'XHR'
                                         },
                                 'a' => {
                                        'content' => '"jqXHR" object',
                                        'href' => '/jQuery.get/#jqxhr-object'
                                      }
                               },
                               {
                                 'content' => [
                                                'If the URL includes the string "callback=?" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the ',
                                                ' data type in ',
                                                ' for more details.'
                                              ],
                                 'code' => [
                                           'jsonp',
                                           {
                                             'a' => {
                                                    'href' => '/jQuery.ajax/',
                                                    'content' => '$.ajax()'
                                                  }
                                           }
                                         ]
                               },
                               {
                                 'a' => [
                                        {
                                          'href' => '/category/deferred-object/',
                                          'content' => 'Deferred object'
                                        },
                                        {
                                          'content' => 'jqXHR Object',
                                          'href' => '/jQuery.ajax/#jqXHR'
                                        }
                                      ],
                                 'strong' => 'As of jQuery 1.5',
                                 'content' => [
                                                ', all of jQuery\'s Ajax methods return  a superset of the ',
                                                ' object. This jQuery XHR object, or "jqXHR," returned by ',
                                                ' implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see ',
                                                ' for more information). The ',
                                                ' (for success), ',
                                                ' (for error), and ',
                                                ' (for completion, whether success or error) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the ',
                                                ' section of the ',
                                                ' documentation.'
                                              ],
                                 'code' => [
                                           'XMLHTTPRequest',
                                           '$.getJSON()',
                                           'jqXHR.done()',
                                           'jqXHR.fail()',
                                           'jqXHR.always()',
                                           '$.ajax()'
                                         ]
                               },
                               {
                                 'code' => [
                                           '$.getJSON()',
                                           '.done()',
                                           '.always()',
                                           '.fail()'
                                         ],
                                 'content' => [
                                                'The Promise interface in jQuery 1.5 also allows jQuery\'s Ajax methods, including ',
                                                ', to chain multiple ',
                                                ', ',
                                                ', and ',
                                                ' callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.'
                                              ]
                               },
                               {
                                 'strong' => 'removed as of jQuery 3.0',
                                 'content' => [
                                                'The ',
                                                ', ',
                                                ', and ',
                                                ' callback methods are ',
                                                '. You can use ',
                                                ', ',
                                                ', and ',
                                                ' instead.'
                                              ],
                                 'code' => [
                                           'jqXHR.success()',
                                           'jqXHR.error()',
                                           'jqXHR.complete()',
                                           'jqXHR.done()',
                                           'jqXHR.fail()',
                                           'jqXHR.always()'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$.ajax({
  dataType: "json",
  url: url,
  data: data,
  success: success
});
    '
                                 },
                                 {
                                   'code' => '
$.getJSON( "ajax/test.json", function( data ) {
  var items = [];
  $.each( data, function( key, val ) {
    items.push( "<li id=\'" + key + "\'>" + val + "</li>" );
  });

  $( "<ul/>", {
    "class": "my-new-list",
    html: items.join( "" )
  }).appendTo( "body" );
});
'
                                 },
                                 {
                                   'code' => '
{
  "one": "Singular sensation",
  "two": "Beady little eyes",
  "three": "Little birds pitch by my doorstep"
}
    '
                                 },
                                 {
                                   'code' => '
// Assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.getJSON( "example.json", function() {
  console.log( "success" );
})
  .done(function() {
    console.log( "second success" );
  })
  .fail(function() {
    console.log( "error" );
  })
  .always(function() {
    console.log( "complete" );
  });

// Perform other work here ...

// Set another completion function for the request above
jqxhr.complete(function() {
  console.log( "second complete" );
});
    '
                                 }
                               ],
                        'h4' => [
                                {
                                  'content' => 'JSONP',
                                  'id' => 'jsonp'
                                },
                                {
                                  'content' => 'The jqXHR Object',
                                  'id' => 'jqxhr-object'
                                },
                                'Deprecation Notice'
                              ],
                        'div' => {
                                 'p' => {
                                        'a' => {
                                               'href' => 'http://json.org/',
                                               'content' => 'http://json.org/'
                                             },
                                        'strong' => 'Important:',
                                        'content' => [
                                                       ' As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript\'s object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see ',
                                                       '.'
                                                     ]
                                      },
                                 'class' => 'warning'
                               }
                      },
          'name' => 'jQuery.getJSON',
          'type' => 'method',
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'success' => {
                                                    'optional' => 'true',
                                                    'type' => 'Function',
                                                    'argument' => {
                                                                  'data' => {
                                                                            'type' => 'PlainObject'
                                                                          },
                                                                  'jqXHR' => {
                                                                             'type' => 'jqXHR'
                                                                           },
                                                                  'textStatus' => {
                                                                                  'type' => 'String'
                                                                                }
                                                                },
                                                    'desc' => 'A callback function that is executed if the request succeeds.'
                                                  },
                                       'url' => {
                                                'desc' => 'A string containing the URL to which the request is sent.',
                                                'type' => 'String'
                                              },
                                       'data' => {
                                                 'type' => {
                                                           'String' => {},
                                                           'PlainObject' => {}
                                                         },
                                                 'optional' => 'true',
                                                 'desc' => 'A plain object or string that is sent to the server with the request.'
                                               }
                                     }
                       },
          'title' => 'jQuery.getJSON()',
          'return' => 'jqXHR',
          'desc' => 'Load JSON-encoded data from the server using a GET HTTP request.',
          'note' => {
                    'same-origin-policy-exceptions' => {
                                                       'type' => 'additional'
                                                     },
                    'same-origin-policy' => {
                                            'type' => 'additional'
                                          }
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.getScript.xml ####
Possible keys are: desc title return signature category longdesc example name type
$VAR1 = {
          'desc' => 'Load a JavaScript file from the server using a GET HTTP request, then execute it.',
          'title' => 'jQuery.getScript()',
          'return' => 'jqXHR',
          'signature' => {
                         'argument' => {
                                       'url' => {
                                                'desc' => 'A string containing the URL to which the request is sent.',
                                                'type' => 'String'
                                              },
                                       'success' => {
                                                    'optional' => 'true',
                                                    'type' => 'Function',
                                                    'argument' => {
                                                                  'textStatus' => {
                                                                                  'type' => 'String'
                                                                                },
                                                                  'script' => {
                                                                              'type' => 'String'
                                                                            },
                                                                  'jqXHR' => {
                                                                             'type' => 'jqXHR'
                                                                           }
                                                                },
                                                    'desc' => 'A callback function that is executed if the request succeeds.'
                                                  }
                                     },
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'ajax/shorthand-methods'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$.ajax({
  url: url,
  dataType: "script",
  success: success
});
    '
                                 },
                                 {
                                   'code' => '
$.getScript( "ajax/test.js", function( data, textStatus, jqxhr ) {
  console.log( data ); // Data returned
  console.log( textStatus ); // Success
  console.log( jqxhr.status ); // 200
  console.log( "Load was performed." );
});
    '
                                 },
                                 {
                                   'code' => '
$.getScript( "ajax/test.js" )
  .done(function( script, textStatus ) {
    console.log( textStatus );
  })
  .fail(function( jqxhr, settings, exception ) {
    $( "div.log" ).text( "Triggered ajaxError handler." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "div.log" ).ajaxError(function( e, jqxhr, settings, exception ) {
  if ( settings.dataType == "script" ) {
    $( this ).text( "Triggered ajaxError handler." );
  }
});
    '
                                 },
                                 {
                                   'code' => '
$.ajaxSetup({
  cache: true
});
    '
                                 }
                               ],
                        'p' => [
                               'This is a shorthand Ajax function, which is equivalent to:',
                               'The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page.',
                               'The callback is fired once the script has been loaded but not necessarily executed.',
                               'Scripts are included and run by referencing the file name:',
                               {
                                 'a' => {
                                        'href' => '/deferred.fail/',
                                        'code' => '.fail()'
                                      },
                                 'content' => [
                                                'As of jQuery 1.5, you may use ',
                                                ' to account for errors:'
                                              ]
                               },
                               {
                                 'code' => [
                                           '.ajaxError()',
                                           '$.getScript()'
                                         ],
                                 'content' => [
                                                'Prior to jQuery 1.5, the global ',
                                                ' callback event had to be used in order to handle ',
                                                ' errors:'
                                              ]
                               },
                               {
                                 'a' => {
                                        'code' => '$.ajaxSetup()',
                                        'href' => '/jquery.ajaxsetup/'
                                      },
                                 'content' => [
                                                'By default, ',
                                                ' sets the cache setting to ',
                                                '. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using ',
                                                ': '
                                              ],
                                 'code' => [
                                           '$.getScript()',
                                           'false'
                                         ]
                               },
                               {
                                 'code' => '$.ajax()',
                                 'content' => [
                                                'Alternatively, you could define a new method that uses the more flexible ',
                                                ' method.'
                                              ]
                               }
                             ],
                        'h4' => {
                                'handling-errors' => {
                                                     'content' => 'Handling Errors'
                                                   },
                                'success-callback' => {
                                                      'content' => '
        Success Callback
      '
                                                    },
                                'caching-requests' => {
                                                      'content' => 'Caching Responses'
                                                    }
                              }
                      },
          'example' => [
                       {
                         'desc' => 'Define a $.cachedScript() method that allows fetching a cached script:',
                         'code' => '
jQuery.cachedScript = function( url, options ) {

  // Allow user to set any option except for dataType, cache, and url
  options = $.extend( options || {}, {
    dataType: "script",
    cache: true,
    url: url
  });

  // Use $.ajax() since it is more flexible than $.getScript
  // Return the jqXHR object so we can chain callbacks
  return jQuery.ajax( options );
};

// Usage
$.cachedScript( "ajax/test.js" ).done(function( script, textStatus ) {
  console.log( textStatus );
});
'
                       },
                       {
                         'code' => "
var url = \"https://code.jquery.com/color/jquery.color.js\";
\$.getScript( url, function() {
  \$( \"#go\" ).click(function() {
    \$( \".block\" )
      .animate({
        backgroundColor: \"rgb(255, 180, 180)\"
      }, 1000 )
      .delay( 500 )
      .animate({
        backgroundColor: \"olive\"
      }, 1000 )
      .delay( 500\x{a0})
      .animate({
        backgroundColor: \"#00f\"
      }, 1000 );
  });
});
",
                         'css' => '
  .block {
     background-color: blue;
     width: 150px;
     height: 70px;
     margin: 10px;
  }
',
                         'html' => '
<button id="go">&raquo; Run</button>
<div class="block"></div>
',
                         'desc' => {
                                   'a' => {
                                          'content' => 'official jQuery Color Animation plugin',
                                          'href' => 'https://github.com/jquery/jquery-color'
                                        },
                                   'content' => [
                                                  'Load the ',
                                                  ' dynamically and bind some color animations to occur once the new functionality is loaded.'
                                                ]
                                 }
                       }
                     ],
          'name' => 'jQuery.getScript',
          'type' => 'method'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.globalEval.xml ####
Possible keys are: desc return title signature name type longdesc example category
$VAR1 = {
          'desc' => 'Execute some JavaScript code globally.',
          'return' => '',
          'title' => 'jQuery.globalEval()',
          'signature' => {
                         'added' => '1.0.4',
                         'argument' => {
                                       'type' => 'String',
                                       'name' => 'code',
                                       'desc' => 'The JavaScript code to execute.'
                                     }
                       },
          'name' => 'jQuery.globalEval',
          'type' => 'method',
          'longdesc' => {
                        'p' => {
                               'code' => 'eval()',
                               'content' => [
                                              'This method behaves differently from using a normal JavaScript ',
                                              ' in that it\'s executed within the global context (which is important for loading external scripts dynamically).'
                                            ]
                             }
                      },
          'example' => {
                       'code' => '
function test() {
  jQuery.globalEval( "var newVar = true;" )
}
test();
// newVar === true
',
                       'desc' => 'Execute a script in the global context.'
                     },
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.0.4'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.grep.xml ####
Possible keys are: signature longdesc example type name category desc title return
$VAR1 = {
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'invert' => {
                                                   'type' => 'Boolean',
                                                   'optional' => 'true',
                                                   'desc' => 'If "invert" is false, or not provided, then the function returns an array consisting of all elements for which "callback" returns true.  If "invert" is true, then the function returns an array consisting of all elements for which "callback" returns false.'
                                                 },
                                       'array' => {
                                                  'desc' => 'The array-like object to search through.',
                                                  'type' => 'ArrayLikeObject'
                                                },
                                       'function' => {
                                                     'type' => 'Function',
                                                     'return' => {
                                                                 'type' => 'Boolean'
                                                               },
                                                     'argument' => {
                                                                   'indexInArray' => {
                                                                                     'type' => 'Integer'
                                                                                   },
                                                                   'elementOfArray' => {
                                                                                       'type' => 'Object'
                                                                                     }
                                                                 },
                                                     'desc' => {
                                                               'content' => [
                                                                              'The function to process each item against.  The first argument to the function is the item, and the second argument is the index.  The function should return a Boolean value.  ',
                                                                              ' will be the global window object.'
                                                                            ],
                                                               'code' => 'this'
                                                             }
                                                   }
                                     }
                       },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => '$.grep()',
                                 'content' => [
                                                'The ',
                                                ' method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.'
                                              ]
                               },
                               ' The filter function will be passed two arguments: the current array item and its index. The filter function must return \'true\' to include the item in the result array.'
                             ]
                      },
          'example' => [
                       {
                         'html' => '
<div></div>
<p></p>
<span></span>
',
                         'desc' => 'Filters the original array of numbers leaving that are not 5 and have an index greater than 4.  Then it removes all 9s.',
                         'css' => '
  div {
    color: blue;
  }
  p {
    color: green;
    margin: 0;
  }
  span {
    color: red;
  }
',
                         'code' => '
var arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];
$( "div" ).text( arr.join( ", " ) );

arr = jQuery.grep(arr, function( n, i ) {
  return ( n !== 5 && i > 4 );
});
$( "p" ).text( arr.join( ", " ) );

arr = jQuery.grep(arr, function( a ) {
  return a !== 9;
});

$( "span" ).text( arr.join( ", " ) );
'
                       },
                       {
                         'code' => '
$.grep( [ 0, 1, 2 ], function( n, i ) {
  return n > 0;
});
',
                         'results' => '
[ 1, 2 ]
',
                         'desc' => 'Filter an array of numbers to include only numbers bigger then zero.'
                       },
                       {
                         'desc' => 'Filter an array of numbers to include numbers that are not bigger than zero.',
                         'code' => '
$.grep( [ 0, 1, 2 ], function( n, i ) {
    return n > 0;
}, true );
',
                         'results' => '
[ 0 ]
'
                       }
                     ],
          'type' => 'method',
          'name' => 'jQuery.grep',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'desc' => 'Finds the elements of an array which satisfy a filter function. The original array is not affected.',
          'title' => 'jQuery.grep()',
          'return' => 'Array'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.hasData.xml ####
Possible keys are: signature category name type example longdesc desc return title
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'name' => 'element',
                                       'type' => 'Element',
                                       'desc' => 'A DOM element to be checked for data.'
                                     },
                         'added' => '1.5'
                       },
          'category' => [
                        {
                          'slug' => 'data'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'name' => 'jQuery.hasData',
          'type' => 'method',
          'example' => {
                       'code' => '
var $p = jQuery( "p" ), p = $p[ 0 ];
$p.append( jQuery.hasData( p ) + " " ); // false

$.data( p, "testing", 123 );
$p.append( jQuery.hasData( p ) + " " ); // true

$.removeData( p, "testing" );
$p.append( jQuery.hasData( p ) + " " ); // false

$p.on( "click", function() {} );
$p.append( jQuery.hasData( p ) + " " ); // true

$p.off( "click" );
$p.append( jQuery.hasData( p ) + " " ); // false
',
                       'desc' => 'Set data on an element and see the results of hasData.',
                       'html' => '
<p>Results: </p>
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           'jQuery.hasData()',
                                           {
                                             'a' => {
                                                    'href' => '/jQuery.data/',
                                                    'content' => 'jQuery.data()'
                                                  }
                                           },
                                           'false',
                                           'true'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method provides a way to determine if an element currently has any values that were set using ',
                                                '. If there is no data object associated with an element, the method returns ',
                                                '; otherwise it returns ',
                                                '.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'jQuery.hasData(element)',
                                           'jQuery.data(element)'
                                         ],
                                 'content' => [
                                                'The primary advantage of ',
                                                ' is that it does not create and associate a data object with the element if none currently exists. In contrast, ',
                                                ' always returns a data object to the caller, creating one if no data object previously existed.
'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Note that jQuery\'s event system uses the jQuery data API to store event handlers. Therefore, binding an event to an element using ',
                                                ', ',
                                                ', ',
                                                ', ',
                                                ', or one of the shorthand event methods also associates a data object with that element.
'
                                              ],
                                 'code' => [
                                           '.on()',
                                           '.bind()',
                                           '.live()',
                                           '.delegate()'
                                         ]
                               }
                             ]
                      },
          'desc' => 'Determine whether an element has any jQuery data associated with it.',
          'return' => 'Boolean',
          'title' => 'jQuery.hasData()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.holdReady.xml ####
Possible keys are: signature type name example longdesc category desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.6',
                         'argument' => {
                                       'name' => 'hold',
                                       'type' => 'Boolean',
                                       'desc' => 'Indicates whether the ready hold is being requested or released'
                                     }
                       },
          'type' => 'method',
          'name' => 'jQuery.holdReady',
          'example' => {
                       'code' => '
$.holdReady( true );
$.getScript( "myplugin.js", function() {
  $.holdReady( false );
});
',
                       'desc' => 'Delay the ready event until a custom plugin has loaded.'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '$.holdReady()',
                                           '<head>'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method allows the caller to delay jQuery\'s ready event. This ',
                                                ' would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the ',
                                                ' immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect. '
                                              ],
                                 'em' => 'advanced feature'
                               },
                               {
                                 'code' => [
                                           '$.holdReady( true )',
                                           '$.holdReady( false )',
                                           '$.holdReady( true )',
                                           '$.holdReady( false )'
                                         ],
                                 'content' => [
                                                'To delay the ready event, first call ',
                                                '. When the ready event should be released to execute, call ',
                                                '. Note that multiple holds can be put on the ready event, one for each ',
                                                ' call. The ready event will not actually fire until all holds have been released with a corresponding number of ',
                                                ' calls ',
                                                ' the normal document ready conditions are met. (See ',
                                                ' for more information.)'
                                              ],
                                 'em' => 'and',
                                 'a' => {
                                        'href' => '/ready/',
                                        'code' => 'ready'
                                      }
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'core'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ],
          'desc' => 'Holds or releases the execution of jQuery\'s ready event.',
          'return' => 'undefined',
          'title' => 'jQuery.holdReady()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.htmlPrefilter.xml ####
Possible keys are: title return desc category longdesc type name signature
$VAR1 = {
          'title' => 'jQuery.htmlPrefilter()',
          'return' => 'String',
          'desc' => {
                    'a' => {
                           'content' => 'jQuery manipulation methods',
                           'href' => '/category/manipulation/'
                         },
                    'content' => [
                                   'Modify and filter HTML strings passed through ',
                                   '.'
                                 ]
                  },
          'category' => {
                        'slug' => 'manipulation'
                      },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => '<del>',
                                 'content' => [
                                                'This method rarely needs to be called directly. Instead, use it as an entry point to modify existing ',
                                                '. For instance, to remove all ',
                                                ' tags from incoming HTML strings, do this:'
                                              ],
                                 'a' => {
                                        'href' => '/category/manipulation/',
                                        'content' => 'jQuery manipulation methods'
                                      }
                               },
                               {
                                 'code' => [
                                           'htmlPrefilter',
                                           'jQuery.htmlPrefilter()'
                                         ],
                                 'content' => [
                                                'This function can also be overwritten in order to bypass certain edge case issues. The default ',
                                                ' function in jQuery will greedily ensure that all tags are XHTML-compliant. This includes anything that looks like an HTML tag, but is actually within a string (e.g. ',
                                                '). The ',
                                                ' function can be used to bypass this:'
                                              ],
                                 'pre' => '<a title="<div />"><>'
                               },
                               'However, while the above fix is short and simple, it puts the burden on you to ensure XHTML-compliant tags in any HTML strings. A more thorough fix for this issue would be this:'
                             ],
                        'pre' => [
                                 {
                                   'code' => '
var htmlPrefilter = $.htmlPrefilter,
  rdel = /<(del)(?=[\\s>])[\\w\\W]*?<\\/\\1\\s*>/gi;

$.htmlPrefilter = function( html ) {
  return htmlPrefilter.call( this, html ).replace( rdel, "" );
};
    '
                                 },
                                 {
                                   'code' => '
$.htmlPrefilter = function( html ) {
  // Return HTML strings unchanged
  return html;
};
    '
                                 },
                                 {
                                   'code' => "
var panything = \"[\\\\w\\\\W]*?\",

  // Whitespace
  // https://html.spec.whatwg.org/multipage/infrastructure.html#space-character
  pspace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",

  // End of tag name (whitespace or greater-than)
  pnameEnd = pspace.replace( \"]\", \">]\" ),

  // Tag name (a leading letter, then almost anything)
  // https://html.spec.whatwg.org/multipage/syntax.html#tag-open-state
  // https://html.spec.whatwg.org/multipage/syntax.html#tag-name-state
  pname = \"[a-z]\" + pnameEnd.replace( \"[\", \"[^/\\\\0\" ) + \"*\",

  // Void element (end tag prohibited)
  // https://html.spec.whatwg.org/multipage/syntax.html#void-elements
  pvoidName = \"(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|\" +
    \"source|track|wbr)(?=\" + pnameEnd + \")\",

  // Attributes (double-quoted value, single-quoted value, unquoted value, or no value)
  // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
  pattrs = \"(?:\" + pspace + \"+[^\\\\0-\\\\x20\\\\x7f-\\\\x9f=\\\"'/>]+(?:\" + pspace + \"*=\" + pspace +
    \"*(?:\\\"\" + panything + \"\\\"|'\" + panything + \"'|\" +
    pnameEnd.replace( \"[\", \"[^\" ) + \"*(?!/)\" +
    \")|))*\" + pspace + \"*\",

  // Trailing content of a close tag
  pcloseTail = \"(?:\" + pspace + panything + \"|)\",

  rspecialHtml = new RegExp(
    // Non-void element that self-closes: \$1\x{2013}\$5
    \"(<)(?!\" + pvoidName + \")(\" + pname + \")(\" + pattrs + \")(\\\\/)(>)|\" +
      // No-innerHTML container (element, comment, or CDATA): \$6
      \"(<(script|style|textarea)\" + pattrs + \">\" + panything + \"<\\\\/\\\\7\" + pcloseTail + \">|\" +
      \"<!--\" + panything + \"--)\",
    \"gi\"
  ),

  // \"<\"; element name; attributes; \">\"; \"<\"; \"/\"; element name; \">\"; no-innerHTML container
  pspecialReplacement = \"\$1\$2\$3\$5\$1\$4\$2\$5\$6\";

\$.htmlPrefilter = function( html ) {
  return ( html + \"\" ).replace( rspecialHtml, pspecialReplacement );
};
    "
                                 }
                               ]
                      },
          'type' => 'method',
          'name' => 'jQuery.htmlPrefilter',
          'signature' => {
                         'argument' => {
                                       'desc' => 'The HTML string on which to operate.',
                                       'type' => 'String',
                                       'name' => 'html'
                                     },
                         'added' => '1.12/2.2'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.inArray.xml ####
Possible keys are: signature category name type longdesc example desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.2',
                         'argument' => {
                                       'array' => {
                                                  'type' => 'Array',
                                                  'desc' => 'An array through which to search.'
                                                },
                                       'fromIndex' => {
                                                      'desc' => 'The index of the array at which to begin the search. The default is 0, which will search the whole array.',
                                                      'optional' => 'true',
                                                      'type' => 'Number'
                                                    },
                                       'value' => {
                                                  'desc' => 'The value to search for.',
                                                  'type' => 'Anything'
                                                }
                                     }
                       },
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'name' => 'jQuery.inArray',
          'type' => 'method',
          'longdesc' => {
                        'pre' => {
                                 'code' => '$.inArray( 5 + 5, [ "8", "9", "10", 10 + "" ] );'
                               },
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method is similar to JavaScript\'s native ',
                                                ' method in that it returns -1 when it doesn\'t find a match. If the first element within the array matches ',
                                                ', ',
                                                ' returns 0.'
                                              ],
                                 'code' => [
                                           '$.inArray()',
                                           '.indexOf()',
                                           'value',
                                           '$.inArray()'
                                         ]
                               },
                               {
                                 'code' => [
                                           'value',
                                           'array'
                                         ],
                                 'content' => [
                                                'Because JavaScript treats 0 as loosely equal to false (i.e. 0 == false, but 0 !== false), to check for the presence of ',
                                                ' within ',
                                                ', you need to check if it\'s not equal to (or greater than) -1.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The comparison between values is strict. The following will return ',
                                                ' (not found) because a number is being searched in an array of strings:'
                                              ],
                                 'code' => '-1'
                               }
                             ]
                      },
          'example' => {
                       'code' => '
var arr = [ 4, "Pete", 8, "John" ];
var $spans = $( "span" );
$spans.eq( 0 ).text( jQuery.inArray( "John", arr ) );
$spans.eq( 1 ).text( jQuery.inArray( 4, arr ) );
$spans.eq( 2 ).text( jQuery.inArray( "Karl", arr ) );
$spans.eq( 3 ).text( jQuery.inArray( "Pete", arr, 2 ) );
',
                       'html' => '
<div>"John" found at <span></span></div>
<div>4 found at <span></span></div>
<div>"Karl" not found, so <span></span></div>
<div>"Pete" is in the array, but not at or after index 2, so <span></span></div>
',
                       'desc' => 'Report the index of some elements in the array.',
                       'css' => '
  div {
    color: blue;
  }
  span {
    color: red;
  }
'
                     },
          'desc' => 'Search for a specified value within an array and return its index (or -1 if not found).',
          'return' => 'Number',
          'title' => 'jQuery.inArray()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.isArray.xml ####
Possible keys are: desc title return signature example longdesc type name category
$VAR1 = {
          'desc' => 'Determine whether the argument is an array.',
          'title' => 'jQuery.isArray()',
          'return' => 'boolean',
          'signature' => {
                         'argument' => {
                                       'desc' => 'Object to test whether or not it is an array.',
                                       'type' => 'Object',
                                       'name' => 'obj'
                                     },
                         'added' => '1.3'
                       },
          'example' => {
                       'html' => '
Is [] an Array? <b></b>
',
                       'desc' => 'Finds out if the parameter is an array.',
                       'code' => '
$( "b" ).append( "" + $.isArray([]) );
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => ' returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).',
                               'code' => '$.isArray()'
                             }
                      },
          'type' => 'method',
          'name' => 'jQuery.isArray',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.isEmptyObject.xml ####
Possible keys are: category name type example longdesc signature return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'name' => 'jQuery.isEmptyObject',
          'type' => 'method',
          'example' => {
                       'code' => '
jQuery.isEmptyObject({}); // true
jQuery.isEmptyObject({ foo: "bar" }); // false
',
                       'desc' => 'Check an object to see if it\'s empty.'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn\'t use hasOwnProperty). The argument should always be a plain JavaScript ',
                                              ' as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use '
                                            ],
                               'code' => 'Object',
                               'a' => {
                                      'code' => '$.isPlainObject()',
                                      'href' => '/jQuery.isPlainObject/'
                                    }
                             }
                      },
          'signature' => {
                         'added' => '1.4',
                         'argument' => {
                                       'desc' => 'The object that will be checked to see if it\'s empty.',
                                       'name' => 'object',
                                       'type' => 'Object'
                                     }
                       },
          'return' => 'Boolean',
          'title' => 'jQuery.isEmptyObject()',
          'desc' => 'Check to see if an object is empty (contains no enumerable properties).'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.isFunction.xml ####
Possible keys are: return title desc name type longdesc example category signature
$VAR1 = {
          'return' => 'boolean',
          'title' => 'jQuery.isFunction()',
          'desc' => 'Determine if the argument passed is a JavaScript function object. ',
          'name' => 'jQuery.isFunction',
          'type' => 'method',
          'longdesc' => {
                        'p' => {
                               'code' => [
                                         'alert()',
                                         'getAttribute()'
                                       ],
                               'content' => [
                                              ' As of jQuery 1.3, functions provided by the browser like ',
                                              ' and DOM element methods like ',
                                              ' are not guaranteed to be detected as functions in browsers such as Internet Explorer.'
                                            ],
                               'strong' => 'Note:'
                             }
                      },
          'example' => [
                       {
                         'code' => '
function stub() {}
var objs = [
  function() {},
  { x:15, y:20 },
  null,
  stub,
  "function"
];

jQuery.each( objs, function( i ) {
  var isFunc = jQuery.isFunction( objs[ i ]);
  $( "span" ).eq( i ).text( isFunc );
});
',
                         'css' => '
  div {
    color: blue;
    margin: 2px;
    font-size: 14px;
  }
  span {
    color: red;
  }
',
                         'html' => '
<div>jQuery.isFunction( objs[ 0 ] ) = <span></span></div>
<div>jQuery.isFunction( objs[ 1 ] ) = <span></span></div>
<div>jQuery.isFunction( objs[ 2 ] ) = <span></span></div>
<div>jQuery.isFunction( objs[ 3 ] ) = <span></span></div>
<div>jQuery.isFunction( objs[ 4 ] ) = <span></span></div>
',
                         'desc' => 'Test a few parameter examples.'
                       },
                       {
                         'results' => '
true
',
                         'code' => '
$.isFunction(function() {});
',
                         'desc' => 'Finds out if the parameter is a function.'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'name' => 'obj',
                                       'type' => 'PlainObject',
                                       'desc' => 'Object to test whether or not it is a function.'
                                     },
                         'added' => '1.2'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.isNumeric.xml ####
Possible keys are: desc return title signature type name longdesc example category
$VAR1 = {
          'desc' => 'Determines whether its argument represents a JavaScript number.',
          'return' => 'Boolean',
          'title' => 'jQuery.isNumeric()',
          'signature' => {
                         'added' => '1.7',
                         'argument' => {
                                       'desc' => 'The value to be tested.',
                                       'type' => 'Anything',
                                       'name' => 'value'
                                     }
                       },
          'type' => 'method',
          'name' => 'jQuery.isNumeric',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '$.isNumeric()',
                                           'true',
                                           'false'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method checks whether its argument represents a numeric value. If so, it returns ',
                                                '. Otherwise it returns ',
                                                '. The argument can be of any type.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '$.isNumeric()',
                                           'true',
                                           'string',
                                           'false'
                                         ],
                                 'content' => [
                                                'As of jQuery 3.0 ',
                                                ' returns ',
                                                ' only if the argument is of type ',
                                                ', or if it\'s of type ',
                                                ' and it can be coerced into finite numbers. In all other cases, it returns ',
                                                '.'
                                              ],
                                 'a' => {
                                        'href' => '/Types/#Number',
                                        'code' => 'number'
                                      }
                               }
                             ]
                      },
          'example' => {
                       'desc' => 'Sample return values of $.isNumeric with various inputs.',
                       'code' => '
// true (numeric)
$.isNumeric( "-10" )
$.isNumeric( "0" )
$.isNumeric( 0xFF )
$.isNumeric( "0xFF" )
$.isNumeric( "8e5" )
$.isNumeric( "3.1415" )
$.isNumeric( +10 )
$.isNumeric( 0144 )

// false (non-numeric)
$.isNumeric( "-0x42" )
$.isNumeric( "7.2acdgs" )
$.isNumeric( "" )
$.isNumeric( {} )
$.isNumeric( NaN )
$.isNumeric( null )
$.isNumeric( true )
$.isNumeric( Infinity )
$.isNumeric( undefined )
'
                     },
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.isPlainObject.xml ####
Possible keys are: signature type name longdesc example category desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.4',
                         'argument' => {
                                       'desc' => 'The object that will be checked to see if it\'s a plain object.',
                                       'type' => 'PlainObject',
                                       'name' => 'object'
                                     }
                       },
          'type' => 'method',
          'name' => 'jQuery.isPlainObject',
          'longdesc' => {
                        'pre' => {
                                 'code' => '
console.log( $.isPlainObject( document.location ) );
    '
                               },
                        'p' => [
                               {
                                 'code' => '$.isPlainObject()',
                                 'content' => [
                                                ' Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this,  ',
                                                ' may evaluate inconsistently across browsers in certain instances.'
                                              ],
                                 'strong' => 'Note:'
                               },
                               {
                                 'code' => [
                                           'document.location',
                                           '$.isPlainObject()'
                                         ],
                                 'content' => [
                                                'An example of this is a test against ',
                                                ' using ',
                                                ' as follows:'
                                              ]
                               },
                               {
                                 'code' => '$.isPlainObject()',
                                 'content' => [
                                                'which throws an invalid pointer exception in IE8. With this in mind, it\'s important to be aware of any of the gotchas involved in using ',
                                                ' against older browsers. A couple basic examples that do function correctly cross-browser can be found below.'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'code' => '
jQuery.isPlainObject({}) // true
jQuery.isPlainObject( "test" ) // false
',
                       'desc' => 'Check an object to see if it\'s a plain object.'
                     },
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'desc' => 'Check to see if an object is a plain object (created using "{}" or "new Object").',
          'return' => 'Boolean',
          'title' => 'jQuery.isPlainObject()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.isWindow.xml ####
Possible keys are: return title desc type name longdesc example category signature
$VAR1 = {
          'return' => 'boolean',
          'title' => 'jQuery.isWindow()',
          'desc' => 'Determine whether the argument is a window.',
          'type' => 'method',
          'name' => 'jQuery.isWindow',
          'longdesc' => {
                        'p' => 'This is used in a number of places in jQuery to determine if we\'re operating against a browser window (such as the current window or an iframe).'
                      },
          'example' => {
                       'html' => '
Is \'window\' a window? <b></b>
',
                       'desc' => 'Finds out if the parameter is a window.',
                       'code' => '
$( "b" ).append( "" + $.isWindow( window ) );
'
                     },
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'type' => 'PlainObject',
                                       'name' => 'obj',
                                       'desc' => 'Object to test whether or not it is a window.'
                                     },
                         'added' => '1.4.3'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.isXMLDoc.xml ####
Possible keys are: example longdesc name type category signature title return desc
$VAR1 = {
          'example' => {
                       'desc' => 'Check an object to see if it\'s in an XML document.',
                       'code' => '
jQuery.isXMLDoc( document ) // false
jQuery.isXMLDoc( document.body ) // false
'
                     },
          'longdesc' => {},
          'name' => 'jQuery.isXMLDoc',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.1.4'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'desc' => 'The DOM node that will be checked to see if it\'s in an XML document.',
                                       'name' => 'node',
                                       'type' => 'Element'
                                     },
                         'added' => '1.1.4'
                       },
          'title' => 'jQuery.isXMLDoc()',
          'return' => 'Boolean',
          'desc' => 'Check to see if a DOM node is within an XML document (or is an XML document).'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.makeArray.xml ####
Possible keys are: desc title return signature example longdesc name type category
$VAR1 = {
          'desc' => 'Convert an array-like object into a true JavaScript array.',
          'title' => 'jQuery.makeArray()',
          'return' => 'Array',
          'signature' => {
                         'argument' => {
                                       'type' => 'PlainObject',
                                       'name' => 'obj',
                                       'desc' => 'Any object to turn into a native Array.'
                                     },
                         'added' => '1.2'
                       },
          'example' => [
                       {
                         'code' => '
// Returns a NodeList
var elems = document.getElementsByTagName( "div" );
// Convert the NodeList to an Array
var arr = jQuery.makeArray( elems );
// Use an Array method on list of dom elements
arr.reverse();
$( arr ).appendTo( document.body );
',
                         'html' => '
<div>First</div>
<div>Second</div>
<div>Third</div>
<div>Fourth</div>
',
                         'desc' => 'Turn a collection of HTMLElements into an Array of them.',
                         'css' => '
  div {
    color: red;
  }
'
                       },
                       {
                         'code' => '
var obj = $( "li" );
var arr = $.makeArray( obj );
',
                         'results' => '
( typeof obj === "object" && obj.jquery ) === true;
jQuery.isArray( arr ) === true;
',
                         'desc' => 'Turn a jQuery object into an array'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function ',
                                                ' returns a jQuery object that has many of the properties of an array (a length, the ',
                                                ' array access operator, etc.), but is not exactly the same as an array and lacks some of an array\'s built-in methods (such as ',
                                                ' and ',
                                                ').'
                                              ],
                                 'code' => [
                                           '$()',
                                           '[]',
                                           '.pop()',
                                           '.reverse()'
                                         ]
                               },
                               'Note that after the conversion, any special features the object had (such as the jQuery methods in our example) will no longer be present. The object is now a plain array.'
                             ]
                      },
          'name' => 'jQuery.makeArray',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.map.xml ####
Possible keys are: title return desc longdesc example name type category signature
$VAR1 = {
          'title' => 'jQuery.map()',
          'return' => 'Array',
          'desc' => 'Translate all items in an array or object to new array of items.',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                "If you wish to process a jQuery object \x{2014} for example, ",
                                                " \x{2014} use ",
                                                ' instead. '
                                              ],
                                 'code' => '$(\'div\').map( callback );',
                                 'a' => {
                                        'href' => '/map/',
                                        'content' => '.map()'
                                      }
                               },
                               {
                                 'code' => [
                                           '$.map()',
                                           '$.map()'
                                         ],
                                 'strong' => [
                                             'Prior to jQuery 1.6',
                                             'As of jQuery 1.6'
                                           ],
                                 'content' => [
                                                'The ',
                                                ' method applies a function to each item in an array or object and maps the results into a new array. ',
                                                ', ',
                                                ' supports traversing ',
                                                '. ',
                                                ' it also traverses objects.'
                                              ],
                                 'em' => 'arrays only'
                               },
                               {
                                 'em' => 'and',
                                 'a' => {
                                        'href' => '/jQuery.makeArray/',
                                        'content' => '$.makeArray()'
                                      },
                                 'content' => [
                                                "Array-like objects \x{2014} those with a ",
                                                ' property ',
                                                ' a value on the ',
                                                " index \x{2014} must be converted to actual arrays before being passed to ",
                                                '. The jQuery library provides ',
                                                ' for such conversions.'
                                              ],
                                 'code' => [
                                           '.length',
                                           '.length - 1',
                                           '$.map()'
                                         ]
                               },
                               'The translation function that is provided to this method is called for each top-level element in the array or object and is passed two arguments: The element\'s value and its index or key within the array or object.',
                               'The function can return:'
                             ],
                        'pre' => {
                                 'code' => '
// The following object masquerades as an array.
var fakeArray = { "length": 2, 0: "Addy", 1: "Subtracty" };

// Therefore, convert it to a real array
var realArray = $.makeArray( fakeArray )

// Now it can be used reliably with $.map()
$.map( realArray, function( val, i ) {
  // Do something
});
    '
                               },
                        'ul' => {
                                'li' => [
                                        'the translated value, which will be mapped to the resulting array',
                                        {
                                          'code' => [
                                                    'null',
                                                    'undefined'
                                                  ],
                                          'content' => [
                                                         ' or ',
                                                         ', to remove the item'
                                                       ]
                                        },
                                        'an array of values, which will be flattened into the full array'
                                      ]
                              }
                      },
          'example' => [
                       {
                         'desc' => 'Use $.map() to change the values of an array.',
                         'html' => '
<div></div>
<p></p>
<span></span>
',
                         'css' => '
  div {
    color: blue;
  }
  p {
    color: green;
    margin: 0;
  }
  span {
    color: red;
  }
',
                         'code' => '
var arr = [ "a", "b", "c", "d", "e" ];
$( "div" ).text( arr.join( ", " ) );

arr = jQuery.map( arr, function( n, i ) {
  return ( n.toUpperCase() + i );
});
$( "p" ).text( arr.join( ", " ) );

arr = jQuery.map( arr, function( a ) {
  return a + a;
});
$( "span" ).text( arr.join( ", " ) );
'
                       },
                       {
                         'desc' => 'Map the original array to a new one and add 4 to each value.',
                         'code' => '
$.map( [ 0, 1, 2 ], function( n ) {
  return n + 4;
});
',
                         'results' => '
[4, 5, 6]
'
                       },
                       {
                         'desc' => 'Map the original array to a new one, adding 1 to each value if it is bigger then zero and removing it if not.',
                         'results' => '
[ 2, 3 ]
',
                         'code' => '
$.map( [ 0, 1, 2 ], function( n ) {
  return n > 0 ? n + 1 : null;
});
'
                       },
                       {
                         'desc' => 'Map the original array to a new one; each element is added with its original value and the value plus one.',
                         'code' => '
$.map( [ 0, 1, 2 ], function( n ) {
    return [ n, n + 1 ];
});
',
                         'results' => '
[ 0, 1, 1, 2, 2, 3 ]
'
                       },
                       {
                         'desc' => 'Map the original object to a new array and double each value.',
                         'code' => '
var dimensions = { width: 10, height: 15, length: 20 };
dimensions = $.map( dimensions, function( value, index ) {
  return value * 2;
});
',
                         'results' => '
[ 20, 30, 40 ]
'
                       },
                       {
                         'code' => '
var dimensions = { width: 10, height: 15, length: 20 };
var keys = $.map( dimensions, function( value, key ) {
  return key;
});
',
                         'results' => '
[ "width", "height", "length" ]
',
                         'desc' => 'Map an object\'s keys to an array.'
                       },
                       {
                         'desc' => 'Map the original array to a new one; each element is squared.',
                         'results' => '
[ 0, 1, 4, 9 ]
',
                         'code' => '
$.map( [ 0, 1, 2, 3 ], function( a ) {
  return a * a;
});
'
                       },
                       {
                         'results' => '
[ 7, 52 ]
',
                         'code' => '
$.map( [ 0, 1, 52, 97 ], function( a ) {
  return (a > 50 ? a - 45 : null);
});
',
                         'desc' => {
                                   'code' => 'null',
                                   'content' => [
                                                  'Map the original array to a new one, removing numbers less than 50 by returning ',
                                                  ' and subtracting 45 from the rest.'
                                                ]
                                 }
                       },
                       {
                         'results' => '
[ -45, 0, -44, 1, 7, 2, 52, 3]
',
                         'code' => '
var array = [ 0, 1, 52, 97 ];
array = $.map( array, function( a, index ) {
  return [ a - 45, index ];
});
',
                         'desc' => 'Augment the resulting array by returning an array inside the function.'
                       }
                     ],
          'name' => 'jQuery.map',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'callback' => {
                                                       'desc' => {
                                                                 'code' => 'this',
                                                                 'content' => [
                                                                                'The function to process each item against.  The first argument to the function is the array item, the second argument is the index in array The function can return any value. A returned array will be flattened into the resulting array. Within the function, ',
                                                                                ' refers to the global (window) object.'
                                                                              ]
                                                               },
                                                       'argument' => {
                                                                     'indexInArray' => {
                                                                                       'type' => 'Integer'
                                                                                     },
                                                                     'elementOfArray' => {
                                                                                         'type' => 'Object'
                                                                                       }
                                                                   },
                                                       'return' => {
                                                                   'type' => 'Object'
                                                                 },
                                                       'type' => 'Function'
                                                     },
                                         'array' => {
                                                    'type' => 'Array',
                                                    'desc' => 'The Array to translate.'
                                                  }
                                       }
                         },
                         {
                           'argument' => {
                                         'object' => {
                                                     'type' => 'Object',
                                                     'desc' => 'The Object to translate.'
                                                   },
                                         'callback' => {
                                                       'desc' => {
                                                                 'code' => 'this',
                                                                 'content' => [
                                                                                'The function to process each item against.  The first argument to the function is the value; the second argument is the key of the object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, ',
                                                                                ' refers to the global (window) object. '
                                                                              ]
                                                               },
                                                       'type' => 'Function',
                                                       'return' => {
                                                                   'type' => 'Object'
                                                                 },
                                                       'argument' => {
                                                                     'key' => {
                                                                              'type' => 'String'
                                                                            },
                                                                     'propertyOfObject' => {
                                                                                           'type' => 'Object'
                                                                                         }
                                                                   }
                                                     }
                                       },
                           'added' => '1.6'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.merge.xml ####
Possible keys are: signature category name type longdesc example desc return title
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'first' => {
                                                  'desc' => 'The first array-like object to merge, the elements of second added.',
                                                  'type' => 'ArrayLikeObject'
                                                },
                                       'second' => {
                                                   'desc' => 'The second array-like object to merge into the first, unaltered.',
                                                   'type' => 'ArrayLikeObject'
                                                 }
                                     },
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'jQuery.merge',
          'type' => 'method',
          'longdesc' => {
                        'pre' => {
                                 'code' => '
var newArray = $.merge([], oldArray);
    '
                               },
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The ',
                                                ' function is destructive. It alters the ',
                                                ' and numeric index properties of the first object to include items from the second.'
                                              ],
                                 'code' => [
                                           '$.merge()',
                                           '$.merge()',
                                           'length'
                                         ]
                               },
                               {
                                 'code' => [
                                           '$.merge()',
                                           '$.merge()'
                                         ],
                                 'content' => [
                                                'If you need the original first array, make a copy of it before calling ',
                                                '. Fortunately, ',
                                                ' itself can be used for this duplication:'
                                              ]
                               },
                               'This shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.',
                               {
                                 'content' => [
                                                'Prior to jQuery 1.4, the arguments should be true Javascript Array objects; use ',
                                                ' if they are not.'
                                              ],
                                 'code' => '$.makeArray'
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )
',
                         'results' => '
[ 0, 1, 2, 2, 3, 4 ]
',
                         'desc' => 'Merges two arrays, altering the first argument.'
                       },
                       {
                         'desc' => 'Merges two arrays, altering the first argument.',
                         'code' => '
$.merge( [ 3, 2, 1 ], [ 4, 3, 2 ] )
',
                         'results' => '
[ 3, 2, 1, 4, 3, 2 ]
'
                       },
                       {
                         'code' => '
var first = [ "a", "b", "c" ];
var second = [ "d", "e", "f" ];
$.merge( $.merge( [], first ), second );
',
                         'results' => '
[ "a", "b", "c", "d", "e", "f" ]
',
                         'desc' => 'Merges two arrays, but uses a copy, so the original isn\'t altered.'
                       }
                     ],
          'desc' => 'Merge the contents of two arrays together into the first array. ',
          'return' => 'Array',
          'title' => 'jQuery.merge()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.noConflict.xml ####
Possible keys are: title return desc category longdesc example name type signature
$VAR1 = {
          'title' => 'jQuery.noConflict()',
          'return' => 'Object',
          'desc' => {
                    'code' => '$',
                    'content' => [
                                   'Relinquish jQuery\'s control of the ',
                                   ' variable.'
                                 ]
                  },
          'category' => [
                        {
                          'slug' => 'core'
                        },
                        {
                          'slug' => 'miscellaneous/setup-methods'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Many JavaScript libraries use ',
                                                ' as a function or variable name, just as jQuery does. In jQuery\'s case, ',
                                                ' is just an alias for ',
                                                ', so all functionality is available without using ',
                                                '. If you need to use another JavaScript library alongside jQuery, return control of ',
                                                ' back to the other library with a call to ',
                                                '. Old references of ',
                                                ' are saved during jQuery initialization; ',
                                                ' simply restores them.'
                                              ],
                                 'code' => [
                                           '$',
                                           '$',
                                           'jQuery',
                                           '$',
                                           '$',
                                           '$.noConflict()',
                                           '$',
                                           'noConflict()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'If for some reason two versions of jQuery are loaded (which is not recommended), calling ',
                                                ' from the second version will return the globally scoped jQuery variables to those of the first version.'
                                              ],
                                 'code' => '$.noConflict( true )'
                               },
                               {
                                 'code' => [
                                           '.ready()',
                                           '.ready()',
                                           '$'
                                         ],
                                 'content' => [
                                                'This technique is especially effective in conjunction with the ',
                                                ' method\'s ability to alias the jQuery object, as within callback passed to ',
                                                ' you can use ',
                                                ' if you wish without fear of conflicts later:'
                                              ]
                               },
                               {
                                 'code' => [
                                           'jQuery',
                                           'true',
                                           'jQuery'
                                         ],
                                 'content' => [
                                                'If necessary, you can free up the ',
                                                ' name as well by passing ',
                                                ' as an argument to the method. This is rarely necessary, and if you must do this (for example, if you need to use multiple versions of the jQuery library on the same page), you need to consider that most plug-ins rely on the presence of the ',
                                                ' variable and may not operate correctly in this situation.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<script src="other_lib.js"></script>
<script src="jquery.js"></script>
<script>
$.noConflict();
// Code that uses other library\'s $ can follow here.
</script>
    '
                                 },
                                 {
                                   'code' => '
<script src="other_lib.js"></script>
<script src="jquery.js"></script>
<script>
$.noConflict();
jQuery( document ).ready(function( $ ) {
  // Code that uses jQuery\'s $ can follow here.
});
// Code that uses other library\'s $ can follow here.
</script>
    '
                                 }
                               ]
                      },
          'example' => [
                       {
                         'desc' => 'Map the original object that was referenced by $ back to $.',
                         'code' => '
jQuery.noConflict();
// Do something with jQuery
jQuery( "div p" ).hide();
// Do something with another library\'s $()
$( "content" ).style.display = "none";
'
                       },
                       {
                         'code' => '
jQuery.noConflict();
(function( $ ) {
  $(function() {
    // More code using $ as alias to jQuery
  });
})(jQuery);

// Other code using $ as an alias to the other library
',
                         'desc' => 'Revert the $ alias and then create and execute a function to provide the $ as a jQuery alias inside the function\'s scope. Inside the function the original $ object is not available. This works well for most plugins that don\'t rely on any other library.
  '
                       },
                       {
                         'desc' => 'Create a different alias instead of jQuery to use in the rest of the script.',
                         'code' => '
var j = jQuery.noConflict();

// Do something with jQuery
j( "div p" ).hide();

// Do something with another library\'s $()
$( "content" ).style.display = "none";
'
                       },
                       {
                         'desc' => 'Completely move jQuery to a new namespace in another object.',
                         'code' => '
var dom = {};
dom.query = jQuery.noConflict( true );
',
                         'results' => '
// Do something with the new jQuery
dom.query( "div p" ).hide();

// Do something with another library\'s $()
$( "content" ).style.display = "none";

// Do something with another version of jQuery
jQuery( "div > p" ).hide();
'
                       },
                       {
                         'code' => '
var $log = $( "#log" );

$log.append( "2nd loaded jQuery version ($): " + $.fn.jquery + "<br>" );

// Restore globally scoped jQuery variables to the first version loaded
// (the newer version)

jq162 = jQuery.noConflict( true );

$log.append( "<h3>After $.noConflict(true)</h3>" );
$log.append( "1st loaded jQuery version ($): " + $.fn.jquery + "<br>" );
$log.append( "2nd loaded jQuery version (jq162): " + jq162.fn.jquery + "<br>" );
',
                         'html' => '
<div id="log">
  <h3>Before $.noConflict(true)</h3>
</div>
<script src="https://code.jquery.com/jquery-1.6.2.js"></script>
',
                         'desc' => 'Load two versions of jQuery (not recommended). Then, restore jQuery\'s globally scoped variables to the first loaded jQuery.'
                       }
                     ],
          'name' => 'jQuery.noConflict',
          'type' => 'method',
          'signature' => {
                         'argument' => {
                                       'type' => 'Boolean',
                                       'name' => 'removeAll',
                                       'optional' => 'true',
                                       'desc' => 'A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).'
                                     },
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.noop.xml ####
Possible keys are: title return desc category longdesc type name signature
$VAR1 = {
          'title' => 'jQuery.noop()',
          'return' => 'undefined',
          'desc' => 'An empty function.',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               'You can use this empty function when you wish to pass around a function that will do nothing.',
                               {
                                 'content' => [
                                                'This is useful for plugin authors who offer optional callbacks; in the case that no callback is given, something like ',
                                                ' could execute.'
                                              ],
                                 'code' => 'jQuery.noop'
                               }
                             ]
                      },
          'type' => 'method',
          'name' => 'jQuery.noop',
          'signature' => {
                         'added' => '1.4'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.now.xml ####
Possible keys are: signature type name longdesc category desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.4.3'
                       },
          'type' => 'method',
          'name' => 'jQuery.now',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The ',
                                              ' method is a shorthand for the number returned by the expression ',
                                              '.'
                                            ],
                               'code' => [
                                         '$.now()',
                                         '(new Date).getTime()'
                                       ]
                             }
                      },
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'desc' => 'Return a number representing the current time.',
          'return' => 'Number',
          'title' => 'jQuery.now()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.param.xml ####
Possible keys are: desc return title signature category type name longdesc example
$VAR1 = {
          'desc' => 'Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.',
          'return' => 'String',
          'title' => 'jQuery.param()',
          'signature' => [
                         {
                           'added' => '1.2',
                           'argument' => {
                                         'type' => {
                                                   'Array' => {},
                                                   'jQuery' => {},
                                                   'PlainObject' => {}
                                                 },
                                         'name' => 'obj',
                                         'desc' => 'An array, a plain object, or a jQuery object to serialize.'
                                       }
                         },
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'obj' => {
                                                  'type' => {
                                                            'Array' => {},
                                                            'jQuery' => {},
                                                            'PlainObject' => {}
                                                          },
                                                  'desc' => 'An array, a plain object, or a jQuery object to serialize.'
                                                },
                                         'traditional' => {
                                                          'desc' => 'A Boolean indicating whether to perform a traditional "shallow" serialization.',
                                                          'type' => 'Boolean'
                                                        }
                                       }
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'miscellaneous/collection-manipulation'
                        },
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'ajax/helper-functions'
                        },
                        {
                          'slug' => 'version/1.2'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'type' => 'method',
          'name' => 'jQuery.param',
          'longdesc' => {
                        'div' => [
                                 {
                                   'class' => 'warning',
                                   'p' => {
                                          'code' => 'obj',
                                          'content' => [
                                                         ' Because some frameworks have limited ability to parse serialized arrays, developers should exercise caution when passing an ',
                                                         ' argument that contains objects or arrays nested within another array.'
                                                       ],
                                          'strong' => 'Note:'
                                        }
                                 },
                                 {
                                   'p' => {
                                          'strong' => 'Note:',
                                          'content' => ' Because there is no universally agreed-upon specification for param strings, it is not possible to encode complex data structures using this method in a manner that works ideally across all languages supporting such input. Use JSON format as an alternative for encoding complex data instead.'
                                        },
                                   'class' => 'warning'
                                 }
                               ],
                        'p' => [
                               {
                                 'a' => {
                                        'content' => '.serialize()',
                                        'href' => '/serialize/'
                                      },
                                 'content' => [
                                                'This function is used internally to convert form element values into a serialized string representation (See ',
                                                ' for more information).'
                                              ]
                               },
                               'As of jQuery 1.3, the return value of a function is used instead of the function as a String.',
                               {
                                 'code' => [
                                           '$.param()',
                                           'jQuery.ajaxSettings.traditional = true;'
                                         ],
                                 'content' => [
                                                'As of jQuery 1.4, the ',
                                                ' method serializes deep objects recursively to accommodate modern scripting languages and frameworks such as PHP and Ruby on Rails. You can disable this functionality globally by setting ',
                                                '.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '$.param()',
                                           'jQuery.ajaxSettings.traditional',
                                           'false',
                                           '$.param()'
                                         ],
                                 'content' => [
                                                'As of jQuery 3.0, the ',
                                                ' method no longer uses ',
                                                ' as its default setting and will default to ',
                                                '. For best compatibility across versions, call ',
                                                ' with an explicit value for the second argument and do not use defaults.'
                                              ]
                               },
                               {
                                 'content' => 'If the object passed is in an Array, it must be an array of objects in the format returned by ',
                                 'a' => {
                                        'content' => '.serializeArray()',
                                        'href' => '/serializeArray/'
                                      }
                               },
                               'In jQuery 1.4, HTML5 input elements are also serialized.',
                               'We can display a query string representation of an object and a URI-decoded version of the same as follows:',
                               {
                                 'code' => [
                                           'recursiveEncoded',
                                           'recursiveDecoded'
                                         ],
                                 'content' => [
                                                'The values of ',
                                                ' and ',
                                                ' are alerted as follows:'
                                              ]
                               },
                               {
                                 'br' => {},
                                 'samp' => [
                                           'a%5Bone%5D=1&a%5Btwo%5D=2&a%5Bthree%5D=3&b%5B%5D=1&b%5B%5D=2&b%5B%5D=3',
                                           'a[one]=1&a[two]=2&a[three]=3&b[]=1&b[]=2&b[]=3'
                                         ]
                               },
                               {
                                 'code' => [
                                           '$.param()',
                                           'traditional',
                                           'true'
                                         ],
                                 'content' => [
                                                'To emulate the behavior of ',
                                                ' prior to jQuery 1.4, we can set the ',
                                                ' argument to ',
                                                ':'
                                              ]
                               },
                               {
                                 'code' => [
                                           'shallowEncoded',
                                           'shallowDecoded'
                                         ],
                                 'content' => [
                                                'The values of ',
                                                ' and ',
                                                ' are alerted as follows:'
                                              ]
                               },
                               {
                                 'samp' => [
                                           'a=%5Bobject+Object%5D&b=1&b=2&b=3',
                                           'a=[object+Object]&b=1&b=2&b=3'
                                         ],
                                 'br' => {}
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
[
  { name: "first", value: "Rick" },
  { name: "last", value: "Astley" },
  { name: "job", value: "Rock Star" }
]
    '
                                 },
                                 {
                                   'code' => '
var myObject = {
  a: {
    one: 1,
    two: 2,
    three: 3
  },
  b: [ 1, 2, 3 ]
};
var recursiveEncoded = $.param( myObject );
var recursiveDecoded = decodeURIComponent( $.param( myObject ) );

alert( recursiveEncoded );
alert( recursiveDecoded );
    '
                                 },
                                 {
                                   'code' => '
var myObject = {
  a: {
    one: 1,
    two: 2,
    three: 3
  },
  b: [ 1, 2, 3 ]
};
var shallowEncoded = $.param( myObject, true );
var shallowDecoded = decodeURIComponent( shallowEncoded );

alert( shallowEncoded );
alert( shallowDecoded );
'
                                 }
                               ]
                      },
          'example' => [
                       {
                         'html' => '
<div id="results"></div>
',
                         'desc' => 'Serialize a key/value object.',
                         'css' => '
  div {
    color: red;
  }
',
                         'code' => '
var params = { width:1680, height:1050 };
var str = jQuery.param( params );
$( "#results" ).text( str );
'
                       },
                       {
                         'css' => '
  div {
    color: red;
  }
',
                         'desc' => 'Serialize a few complex objects',
                         'code' => '
// <=1.3.2:
$.param({ a: [ 2, 3, 4 ] }); // "a=2&a=3&a=4"
// >=1.4:
$.param({ a: [ 2, 3, 4 ] }); // "a[]=2&a[]=3&a[]=4"

// <=1.3.2:
$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
// "a=[object+Object]&d=3&d=4&d=[object+Object]"

// >=1.4:
$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
// "a[b]=1&a[c]=2&d[]=3&d[]=4&d[2][e]=5"
'
                       }
                     ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.parseHTML.xml ####
Possible keys are: category example longdesc type name signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.8'
                        }
                      ],
          'example' => {
                       'code' => '
var $log = $( "#log" ),
  str = "hello, <b>my name is</b> jQuery.",
  html = $.parseHTML( str ),
  nodeNames = [];

// Append the parsed HTML
$log.append( html );

// Gather the parsed HTML\'s node names
$.each( html, function( i, el ) {
  nodeNames[ i ] = "<li>" + el.nodeName + "</li>";
});

// Insert the node names
$log.append( "<h3>Node Names:</h3>" );
$( "<ol></ol>" )
  .append( nodeNames.join( "" ) )
  .appendTo( $log );
',
                       'html' => '
<div id="log">
  <h3>Content:</h3>
</div>
',
                       'desc' => 'Create an array of DOM nodes using an HTML string and insert it into a div.'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => 'jQuery.parseHTML',
                                 'content' => [
                                                ' uses native methods to convert the string to a set of DOM nodes, which can then be inserted into the document. These methods do render all trailing or leading text (even if that\'s just whitespace). To prevent trailing/leading whitespace from being converted to text nodes you can pass the HTML string through ',
                                                '.'
                                              ],
                                 'a' => {
                                        'code' => 'jQuery.trim',
                                        'href' => '/jQuery.trim/'
                                      }
                               },
                               {
                                 'content' => [
                                                'By default, the ',
                                                ' is the current ',
                                                ' if not specified or given as ',
                                                ' or ',
                                                '. If the HTML was to be used in another document such as an iframe, that frame\'s document could be used.'
                                              ],
                                 'code' => [
                                           'context',
                                           'document',
                                           'null',
                                           'undefined'
                                         ]
                               },
                               {
                                 'content' => [
                                                'As of 3.0 the default behavior is changed. If the ',
                                                ' is not specified or given as ',
                                                ' or ',
                                                ', a new ',
                                                ' is used. This can potentially improve security because inline events will not execute when the HTML is parsed. Once the parsed HTML is injected into a document it does execute, but this gives tools a chance to traverse the created DOM and remove anything deemed unsafe. This improvement does not apply to internal uses of ',
                                                ' as they usually pass in the current ',
                                                '. Therefore, a statement like ',
                                                ' is still subject to the injection of malicious code.'
                                              ],
                                 'code' => [
                                           'context',
                                           'null',
                                           'undefined',
                                           'document',
                                           'jQuery.parseHTML',
                                           'document',
                                           '$( "#log" ).append( $( htmlString ) )'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Most jQuery APIs that accept HTML strings will run scripts that are included in the HTML. ',
                                                ' does not run scripts in the parsed HTML unless ',
                                                ' is explicitly ',
                                                '. However, it is still possible in most environments to execute scripts indirectly, for example via the ',
                                                ' attribute. The caller should be aware of this and guard against it by cleaning or escaping any untrusted inputs from sources such as the URL or cookies. For future compatibility, callers should not depend on the ability to run ',
                                                ' script content when ',
                                                ' is unspecified or ',
                                                '.'
                                              ],
                                 'code' => [
                                           'jQuery.parseHTML',
                                           'keepScripts',
                                           'true',
                                           '<img onerror>',
                                           'keepScripts',
                                           'false'
                                         ],
                                 'em' => 'any'
                               }
                             ],
                        'h2' => 'Security Considerations'
                      },
          'type' => 'method',
          'name' => 'jQuery.parseHTML',
          'signature' => {
                         'argument' => {
                                       'context' => {
                                                    'optional' => 'true',
                                                    'type' => 'Element',
                                                    'desc' => 'Document element to serve as the context in which the HTML fragment will be created',
                                                    'default' => 'document'
                                                  },
                                       'keepScripts' => {
                                                        'desc' => 'A Boolean indicating whether to include scripts passed in the HTML string',
                                                        'default' => 'false',
                                                        'optional' => 'true',
                                                        'type' => 'Boolean'
                                                      },
                                       'data' => {
                                                 'desc' => 'HTML string to be parsed',
                                                 'type' => 'String'
                                               }
                                     },
                         'added' => '1.8'
                       },
          'title' => 'jQuery.parseHTML()',
          'return' => 'Array',
          'desc' => 'Parses a string into an array of DOM nodes.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.parseJSON.xml ####
Possible keys are: title return desc example longdesc type name category signature deprecated
$VAR1 = {
          'title' => 'jQuery.parseJSON()',
          'return' => [
                      {
                        'type' => 'String'
                      },
                      {
                        'type' => 'Number'
                      },
                      {
                        'type' => 'Object'
                      },
                      {
                        'type' => 'Array'
                      },
                      {
                        'type' => 'Boolean'
                      }
                    ],
          'desc' => 'Takes a well-formed JSON string and returns the resulting JavaScript value.',
          'example' => {
                       'code' => '
var obj = jQuery.parseJSON( \'{ "name": "John" }\' );
alert( obj.name === "John" );
',
                       'desc' => 'Parse a JSON string.'
                     },
          'longdesc' => {
                        'ul' => {
                                'li' => [
                                        {
                                          'content' => ' (test does not have double quotes around it).',
                                          'code' => '"{test: 1}"'
                                        },
                                        {
                                          'code' => '"{\'test\': 1}"',
                                          'content' => ' (\'test\' is using single quotes instead of double quotes).'
                                        },
                                        {
                                          'code' => '"\'test\'"',
                                          'content' => ' (\'test\' is using single quotes instead of double quotes).'
                                        },
                                        {
                                          'code' => [
                                                    '".1"',
                                                    '"0.1"'
                                                  ],
                                          'content' => [
                                                         ' (a number must start with a digit; ',
                                                         ' would be valid).'
                                                       ]
                                        },
                                        {
                                          'content' => [
                                                         ' (',
                                                         ' cannot be represented in a JSON string; ',
                                                         ', however, can be).'
                                                       ],
                                          'code' => [
                                                    '"undefined"',
                                                    'undefined',
                                                    'null'
                                                  ]
                                        },
                                        {
                                          'code' => [
                                                    '"NaN"',
                                                    'NaN',
                                                    'Infinity'
                                                  ],
                                          'content' => [
                                                         ' (',
                                                         ' cannot be represented in a JSON string; direct representation of ',
                                                         ' is also not permitted).'
                                                       ]
                                        }
                                      ]
                              },
                        'p' => [
                               'Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all invalid JSON strings:',
                               {
                                 'code' => [
                                           '$.parseJSON( \'{ "testing":"1\\t2\\n3" }\' )',
                                           '"1\\\\t2\\\\n3"'
                                         ],
                                 'content' => [
                                                'The JSON standard does not permit "control characters" such as a tab or newline. An example like ',
                                                ' will throw an error in most implementations because the JavaScript parser converts the string\'s tab and newline escapes into literal tab and newline; doubling the backslashes like ',
                                                ' yields expected results. This problem is often seen when injecting JSON into a JavaScript file from a server-side language such as PHP.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => 'http://json.org/',
                                        'content' => 'http://json.org/'
                                      },
                                 'code' => 'JSON.parse',
                                 'content' => [
                                                'Where the browser provides a native implementation of ',
                                                ', jQuery uses it to parse the string. For details on the JSON format, see ',
                                                '.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Prior to jQuery 1.9, ',
                                                ' returned ',
                                                ' instead of throwing an error if it was passed an empty string, ',
                                                ', or ',
                                                ', even though those are not valid JSON.'
                                              ],
                                 'code' => [
                                           '$.parseJSON',
                                           'null',
                                           'null',
                                           'undefined'
                                         ]
                               },
                               {
                                 'content' => [
                                                'As of jQuery 3.0, ',
                                                ' is deprecated. To parse JSON objects, use the native ',
                                                ' method instead.'
                                              ],
                                 'code' => [
                                           '$.parseJSON',
                                           'JSON.parse'
                                         ]
                               }
                             ]
                      },
          'type' => 'method',
          'name' => 'jQuery.parseJSON',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4.1'
                        }
                      ],
          'signature' => {
                         'added' => '1.4.1',
                         'argument' => {
                                       'name' => 'json',
                                       'type' => 'String',
                                       'desc' => 'The JSON string to parse.'
                                     }
                       },
          'deprecated' => '3.0'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.parseXML.xml ####
Possible keys are: return title desc category type name example longdesc signature
$VAR1 = {
          'return' => 'XMLDocument',
          'title' => 'jQuery.parseXML()',
          'desc' => 'Parses a string into an XML document.',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'type' => 'method',
          'name' => 'jQuery.parseXML',
          'example' => {
                       'code' => '
var xml = "<rss version=\'2.0\'><channel><title>RSS Title</title></channel></rss>",
  xmlDoc = $.parseXML( xml ),
  $xml = $( xmlDoc ),
  $title = $xml.find( "title" );

// Append "RSS Title" to #someElement
$( "#someElement" ).append( $title.text() );

// Change the title to "XML Title"
$title.text( "XML Title" );

// Append "XML Title" to #anotherElement
$( "#anotherElement" ).append( $title.text() );
',
                       'desc' => 'Create a jQuery object using an XML string and obtain the value of the title node.',
                       'html' => '
<p id="someElement"></p>
<p id="anotherElement"></p>
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              ' uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to ',
                                              ' to create a typical jQuery object that can be traversed and manipulated.'
                                            ],
                               'code' => [
                                         'jQuery.parseXML',
                                         'jQuery'
                                       ]
                             }
                      },
          'signature' => {
                         'argument' => {
                                       'desc' => 'a well-formed XML string to be parsed',
                                       'type' => 'String',
                                       'name' => 'data'
                                     },
                         'added' => '1.5'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.post.xml ####
Possible keys are: type name longdesc example category signature return title desc note
$VAR1 = {
          'type' => 'method',
          'name' => 'jQuery.post',
          'longdesc' => {
                        'h4' => [
                                {
                                  'content' => 'The jqXHR Object',
                                  'id' => 'jqxhr-object'
                                },
                                'Deprecation Notice'
                              ],
                        'p' => [
                               'This is a shorthand Ajax function, which is equivalent to:',
                               {
                                 'content' => [
                                                'The ',
                                                ' callback function is passed the returned data, which will be an XML root element or a text string depending on the MIME type of the response. It is also passed the text status of the response.'
                                              ],
                                 'code' => 'success'
                               },
                               {
                                 'a' => {
                                        'content' => '"jqXHR" object',
                                        'href' => '#jqxhr-object'
                                      },
                                 'code' => [
                                           'success',
                                           'XMLHttpRequest'
                                         ],
                                 'content' => [
                                                ', the ',
                                                ' callback function is also passed a ',
                                                ' (in ',
                                                ', it was passed the ',
                                                ' object).'
                                              ],
                                 'strong' => [
                                             'As of jQuery 1.5',
                                             'jQuery 1.4'
                                           ]
                               },
                               'Most implementations will specify a success handler:',
                               'This example fetches the requested HTML snippet and inserts it on the page.',
                               {
                                 'code' => [
                                           'POST',
                                           'cache',
                                           'ifModified',
                                           {
                                             'a' => {
                                                    'content' => 'jQuery.ajaxSetup()',
                                                    'href' => '/jQuery.ajaxSetup/'
                                                  }
                                           }
                                         ],
                                 'content' => [
                                                'Pages fetched with ',
                                                ' are never cached, so the ',
                                                ' and ',
                                                ' options in ',
                                                ' have no effect on these requests.'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'content' => 'Deferred object',
                                          'href' => '/category/deferred-object/'
                                        },
                                        {
                                          'href' => '/jQuery.ajax/#jqXHR',
                                          'content' => 'jqXHR Object'
                                        }
                                      ],
                                 'strong' => 'As of jQuery 1.5',
                                 'content' => [
                                                ', all of jQuery\'s Ajax methods return  a superset of the ',
                                                ' object. This jQuery XHR object, or "jqXHR," returned by ',
                                                ' implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see ',
                                                ' for more information). The ',
                                                ' (for success), ',
                                                ' (for error), and ',
                                                ' (for completion, whether success or error) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the ',
                                                ' section of the $.ajax() documentation.'
                                              ],
                                 'code' => [
                                           'XMLHTTPRequest',
                                           '$.get()',
                                           'jqXHR.done()',
                                           'jqXHR.fail()',
                                           'jqXHR.always()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The Promise interface also allows jQuery\'s Ajax methods, including ',
                                                ', to chain multiple ',
                                                ', ',
                                                ', and ',
                                                ' callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.'
                                              ],
                                 'code' => [
                                           '$.get()',
                                           '.done()',
                                           '.fail()',
                                           '.always()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ', ',
                                                ', and ',
                                                ' callback methods are ',
                                                '. You can use ',
                                                ', ',
                                                ', and ',
                                                ' instead.'
                                              ],
                                 'strong' => 'removed as of jQuery 3.0',
                                 'code' => [
                                           'jqXHR.success()',
                                           'jqXHR.error()',
                                           'jqXHR.complete()',
                                           'jqXHR.done()',
                                           'jqXHR.fail()',
                                           'jqXHR.always()'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$.ajax({
  type: "POST",
  url: url,
  data: data,
  success: success,
  dataType: dataType
});
    '
                                 },
                                 {
                                   'code' => '
$.post( "ajax/test.html", function( data ) {
  $( ".result" ).html( data );
});
    '
                                 },
                                 {
                                   'code' => '
// Assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.post( "example.php", function() {
  alert( "success" );
})
  .done(function() {
    alert( "second success" );
  })
  .fail(function() {
    alert( "error" );
  })
  .always(function() {
    alert( "finished" );
});

// Perform other work here ...

// Set another completion function for the request above
jqxhr.always(function() {
  alert( "second finished" );
});
    '
                                 }
                               ]
                      },
          'example' => [
                       {
                         'desc' => 'Request the test.php page, but ignore the return results.',
                         'code' => '
$.post( "test.php" );
'
                       },
                       {
                         'desc' => 'Request the test.php page and send some additional data along (while still ignoring the return results).',
                         'code' => '
$.post( "test.php", { name: "John", time: "2pm" } );
'
                       },
                       {
                         'code' => '
$.post( "test.php", { \'choices[]\': [ "Jon", "Susan" ] } );
',
                         'desc' => 'Pass arrays of data to the server (while still ignoring the return results).'
                       },
                       {
                         'desc' => 'Send form data using Ajax requests',
                         'code' => '
$.post( "test.php", $( "#testform" ).serialize() );
'
                       },
                       {
                         'code' => '
$.post( "test.php", function( data ) {
  alert( "Data Loaded: " + data );
});
',
                         'desc' => 'Alert the results from requesting test.php (HTML or XML, depending on what was returned).'
                       },
                       {
                         'code' => '
$.post( "test.php", { name: "John", time: "2pm" })
  .done(function( data ) {
    alert( "Data Loaded: " + data );
  });
',
                         'desc' => 'Alert the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).'
                       },
                       {
                         'desc' => 'Post to the test.php page and get content which has been returned in json format (<?php echo json_encode(array("name"=>"John","time"=>"2pm")); ?>).',
                         'code' => '
$.post( "test.php", { func: "getNameAndTime" }, function( data ) {
  console.log( data.name ); // John
  console.log( data.time ); // 2pm
}, "json");
'
                       },
                       {
                         'code' => '
// Attach a submit handler to the form
$( "#searchForm" ).submit(function( event ) {

  // Stop form from submitting normally
  event.preventDefault();

  // Get some values from elements on the page:
  var $form = $( this ),
    term = $form.find( "input[name=\'s\']" ).val(),
    url = $form.attr( "action" );

  // Send the data using post
  var posting = $.post( url, { s: term } );

  // Put the results in a div
  posting.done(function( data ) {
    var content = $( data ).find( "#content" );
    $( "#result" ).empty().append( content );
  });
});
',
                         'html' => '
<form action="/" id="searchForm">
  <input type="text" name="s" placeholder="Search...">
  <input type="submit" value="Search">
</form>
<!-- the result of the search will be rendered inside this div -->
<div id="result"></div>
',
                         'desc' => 'Post a form using Ajax and put results in a div'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'ajax/shorthand-methods'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'dataType' => {
                                                       'desc' => 'The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).',
                                                       'optional' => 'true',
                                                       'type' => 'String'
                                                     },
                                         'success' => {
                                                      'optional' => 'true',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'textStatus' => {
                                                                                    'type' => 'String'
                                                                                  },
                                                                    'data' => {
                                                                              'type' => 'PlainObject'
                                                                            },
                                                                    'jqXHR' => {
                                                                               'type' => 'jqXHR'
                                                                             }
                                                                  },
                                                      'desc' => {
                                                                'code' => [
                                                                          'dataType',
                                                                          'null'
                                                                        ],
                                                                'content' => [
                                                                               'A callback function that is executed if the request succeeds. Required if ',
                                                                               ' is provided, but can be ',
                                                                               ' in that case.'
                                                                             ]
                                                              }
                                                    },
                                         'url' => {
                                                  'desc' => 'A string containing the URL to which the request is sent.',
                                                  'type' => 'String'
                                                },
                                         'data' => {
                                                   'desc' => 'A plain object or string that is sent to the server with the request.',
                                                   'type' => {
                                                             'String' => {},
                                                             'PlainObject' => {}
                                                           },
                                                   'optional' => 'true'
                                                 }
                                       }
                         },
                         {
                           'added' => '1.12/2.2',
                           'argument' => {
                                         'optional' => 'false',
                                         'type' => 'PlainObject',
                                         'name' => 'settings',
                                         'desc' => {
                                                   'content' => [
                                                                  'A set of key/value pairs that configure the Ajax request. All properties except for ',
                                                                  ' are optional. A default can be set for any option with ',
                                                                  '. See ',
                                                                  ' for a complete list of all settings. Type will automatically be set to ',
                                                                  '.'
                                                                ],
                                                   'code' => [
                                                             'url',
                                                             'POST'
                                                           ],
                                                   'a' => [
                                                          {
                                                            'href' => '/jQuery.ajaxSetup/',
                                                            'content' => '$.ajaxSetup()'
                                                          },
                                                          {
                                                            'href' => '/jquery.ajax/#jQuery-ajax-settings',
                                                            'content' => 'jQuery.ajax( settings )'
                                                          }
                                                        ]
                                                 }
                                       }
                         }
                       ],
          'return' => 'jqXHR',
          'title' => 'jQuery.post()',
          'desc' => 'Load data from the server using a HTTP POST request.',
          'note' => {
                    'same-origin-policy' => {
                                            'type' => 'additional'
                                          },
                    'use-ajaxerror' => {
                                       'type' => 'additional',
                                       'data-title' => 'jQuery.post()'
                                     }
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.proxy.xml ####
Possible keys are: desc title return signature longdesc example type name category
$VAR1 = {
          'desc' => 'Takes a function and returns a new one that will always have a particular context.',
          'title' => 'jQuery.proxy()',
          'return' => 'Function',
          'signature' => [
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'function' => {
                                                       'type' => 'Function',
                                                       'desc' => 'The function whose context will be changed.'
                                                     },
                                         'context' => {
                                                      'type' => 'PlainObject',
                                                      'desc' => {
                                                                'content' => [
                                                                               'The object to which the context (',
                                                                               ') of the function should be set.'
                                                                             ],
                                                                'code' => 'this'
                                                              }
                                                    }
                                       }
                         },
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'name' => {
                                                   'type' => 'String',
                                                   'desc' => {
                                                             'content' => [
                                                                            'The name of the function whose context will be changed (should be a property of the ',
                                                                            ' object).'
                                                                          ],
                                                             'code' => 'context'
                                                           }
                                                 },
                                         'context' => {
                                                      'desc' => 'The object to which the context of the function should be set.',
                                                      'type' => 'PlainObject'
                                                    }
                                       }
                         },
                         {
                           'added' => '1.6',
                           'argument' => {
                                         'function' => {
                                                       'type' => 'Function',
                                                       'desc' => 'The function whose context will be changed.'
                                                     },
                                         'context' => {
                                                      'type' => 'PlainObject',
                                                      'desc' => {
                                                                'content' => [
                                                                               'The object to which the context (',
                                                                               ') of the function should be set.'
                                                                             ],
                                                                'code' => 'this'
                                                              }
                                                    },
                                         'additionalArguments' => {
                                                                  'desc' => {
                                                                            'content' => [
                                                                                           'Any number of arguments to be passed to the function referenced in the ',
                                                                                           ' argument.'
                                                                                         ],
                                                                            'code' => 'function'
                                                                          },
                                                                  'optional' => 'true',
                                                                  'type' => 'Anything'
                                                                }
                                       }
                         },
                         {
                           'argument' => {
                                         'additionalArguments' => {
                                                                  'desc' => {
                                                                            'content' => [
                                                                                           'Any number of arguments to be passed to the function named in the ',
                                                                                           ' argument.'
                                                                                         ],
                                                                            'code' => 'name'
                                                                          },
                                                                  'type' => 'Anything',
                                                                  'optional' => 'true'
                                                                },
                                         'context' => {
                                                      'type' => 'PlainObject',
                                                      'desc' => 'The object to which the context of the function should be set.'
                                                    },
                                         'name' => {
                                                   'desc' => {
                                                             'content' => [
                                                                            'The name of the function whose context will be changed (should be a property of the ',
                                                                            ' object).'
                                                                          ],
                                                             'code' => 'context'
                                                           },
                                                   'type' => 'String'
                                                 }
                                       },
                           'added' => '1.6'
                         }
                       ],
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => 'jQuery.proxy()',
                                 'content' => [
                                                'This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from ',
                                                ' it will still unbind the correct function if passed the original.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Be aware, however, that jQuery\'s event binding subsystem assigns a unique id to each event handling function in order to track it when it is used to specify the function to be unbound. The function represented by ',
                                                ' is seen as a single function by the event subsystem, even when it is used to bind different contexts. To avoid unbinding the wrong handler, use a unique event namespace for binding and unbinding (e.g., ',
                                                ') rather than specifying the proxied function during unbinding.'
                                              ],
                                 'code' => [
                                           'jQuery.proxy()',
                                           '"click.myproxy1"'
                                         ]
                               },
                               {
                                 'content' => [
                                                ', any number of additional arguments may be supplied to ',
                                                ', and they will be passed to the function whose context will be changed.'
                                              ],
                                 'strong' => 'As of jQuery 1.6',
                                 'code' => '$.proxy()'
                               },
                               {
                                 'strong' => 'As of jQuery 1.9',
                                 'content' => [
                                                ', when the ',
                                                ' is ',
                                                ' or ',
                                                ' the proxied function will be called with the same ',
                                                ' object as the proxy was called with. This allows ',
                                                ' to be used to partially apply the arguments of a function without changing the context.'
                                              ],
                                 'code' => [
                                           'context',
                                           'null',
                                           'undefined',
                                           'this',
                                           '$.proxy()'
                                         ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'desc' => 'Change the context of functions bound to a click handler using the "function, context" signature. Unbind the first handler after first click.',
                         'html' => '
<p><button type="button" id="test">Test</button></p>
<div id="log"></div>
',
                         'code' => '
var me = {
  type: "zombie",
  test: function( event ) {
    // Without proxy, `this` would refer to the event target
    // use event.target to reference that element.
    var element = event.target;
    $( element ).css( "background-color", "red" );

    // With proxy, `this` refers to the me object encapsulating
    // this function.
    $( "#log" ).append( "Hello " + this.type + "<br>" );
    $( "#test" ).off( "click", this.test );
  }
};

var you = {
  type: "person",
  test: function( event ) {
    $( "#log" ).append( this.type + " " );
  }
};

// Execute you.test() in the context of the `you` object
// no matter where it is called
// i.e. the `this` keyword will refer to `you`
var youClick = $.proxy( you.test, you );

// attach click handlers to #test
$( "#test" )
  // this === "zombie"; handler unbound after first click
  .on( "click", $.proxy( me.test, me ) )

  // this === "person"
  .on( "click", youClick )

  // this === "zombie"
  .on( "click", $.proxy( you.test, me ) )

  // this === "<button> element"
  .on( "click", you.test );
'
                       },
                       {
                         'code' => '
var obj = {
  name: "John",
  test: function() {
    $( "#log" ).append( this.name );
    $( "#test" ).off( "click", obj.test );
  }
};
$( "#test" ).on( "click", jQuery.proxy( obj, "test" ) );
',
                         'desc' => 'Enforce the context of the function using the "context, function name" signature. Unbind the handler after first click.',
                         'html' => '
  <p><button id="test">Test</button></p>
  <p id="log"></p>
'
                       },
                       {
                         'code' => '
var me = {
  // I\'m a dog
  type: "dog",

  // Note that event comes *after* one and two
  test: function( one, two, event ) {
    $( "#log" )

      // `one` maps to `you`, the 1st additional
      // argument in the $.proxy function call
      .append( "<h3>Hello " + one.type + ":</h3>" )

      // The `this` keyword refers to `me`
      // (the 2nd, context, argument of $.proxy)
      .append( "I am a " + this.type + ", " )

      // `two` maps to `they`, the 2nd additional
      // argument in the $.proxy function call
      .append( "and they are " + two.type + ".<br>" )

      // The event type is "click"
      .append( "Thanks for " + event.type + "ing." )

      // The clicked element is `event.target`,
      // and its type is "button"
      .append( "the " + event.target.type + "." );
  }
};

var you = { type: "cat" };
var they = { type: "fish" };

// Set up handler to execute me.test() in the context
// of `me`, with `you` and `they` as additional arguments
var proxy = $.proxy( me.test, me, you, they );

$( "#test" )
  .on( "click", proxy );
',
                         'desc' => 'Change the context of a function bound to the click handler,
    ',
                         'html' => '
<p><button type="button" id="test">Test</button></p>
<div id="log"></div>
'
                       }
                     ],
          'type' => 'method',
          'name' => 'jQuery.proxy',
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.queue.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Show or manipulate the queue of functions to be executed on the matched element.',
          'entry' => {
                     'jQuery.queue' => {
                                       'type' => 'method',
                                       'example' => [
                                                    {
                                                      'css' => '
  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }
',
                                                      'html' => '
Click here...
<div></div>
',
                                                      'desc' => 'Queue a custom function.',
                                                      'code' => '
$( document.body ).click(function() {
  var divs = $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 2000 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).addClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.animate({ left: "-=200" }, 500 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).removeClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.slideUp();
});
'
                                                    },
                                                    {
                                                      'code' => '
$( "#start" ).click(function() {
  var divs = $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 5000 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).addClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.animate({ left: "-=200" }, 1500 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).removeClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.slideUp();
});
$( "#stop" ).click(function() {
  jQuery.queue( $( "div" )[ 0 ], "fx", [] );
  $( "div" ).stop();
});
',
                                                      'css' => '
  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }
',
                                                      'html' => '
<button id="start">Start</button>
<button id="stop">Stop</button>
<div></div>
',
                                                      'desc' => 'Set a queue array to delete the queue.'
                                                    }
                                                  ],
                                       'longdesc' => {
                                                     'p' => [
                                                            {
                                                              'code' => {
                                                                        'a' => {
                                                                               'href' => '/queue/',
                                                                               'content' => '.queue()'
                                                                             }
                                                                      },
                                                              'content' => [
                                                                             ' This is a low-level method, you should probably use ',
                                                                             ' instead.'
                                                                           ],
                                                              'strong' => 'Note:'
                                                            },
                                                            {
                                                              'code' => 'fx',
                                                              'content' => [
                                                                             'Every element can have one or more queues of functions attached to it by jQuery. In most applications, only one queue (called ',
                                                                             ') is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution.'
                                                                           ]
                                                            },
                                                            {
                                                              'content' => [
                                                                             'The ',
                                                                             ' method allows us to directly manipulate this queue of functions. Calling ',
                                                                             ' with a callback is particularly useful; it allows us to place a new function at the end of the queue.'
                                                                           ],
                                                              'code' => [
                                                                        'jQuery.queue()',
                                                                        'jQuery.queue()'
                                                                      ]
                                                            },
                                                            {
                                                              'content' => [
                                                                             'Note that when adding a function with ',
                                                                             ', we should ensure that ',
                                                                             ' is eventually called so that the next function in line executes.'
                                                                           ],
                                                              'code' => [
                                                                        'jQuery.queue()',
                                                                        'jQuery.dequeue()'
                                                                      ]
                                                            }
                                                          ]
                                                   },
                                       'category' => [
                                                     {
                                                       'slug' => 'data'
                                                     },
                                                     {
                                                       'slug' => 'utilities'
                                                     },
                                                     {
                                                       'slug' => 'version/1.3'
                                                     }
                                                   ],
                                       'signature' => [
                                                      {
                                                        'added' => '1.3',
                                                        'argument' => {
                                                                      'element' => {
                                                                                   'desc' => 'A DOM element where the array of queued functions is attached.',
                                                                                   'type' => 'Element'
                                                                                 },
                                                                      'newQueue' => {
                                                                                    'type' => 'Array',
                                                                                    'desc' => 'An array of functions to replace the current queue contents.'
                                                                                  },
                                                                      'queueName' => {
                                                                                     'type' => 'String',
                                                                                     'desc' => {
                                                                                               'content' => [
                                                                                                              'A string containing the name of the queue. Defaults to ',
                                                                                                              ', the standard effects queue.'
                                                                                                            ],
                                                                                               'code' => 'fx'
                                                                                             }
                                                                                   }
                                                                    }
                                                      },
                                                      {
                                                        'argument' => {
                                                                      'queueName' => {
                                                                                     'type' => 'String',
                                                                                     'desc' => {
                                                                                               'content' => [
                                                                                                              'A string containing the name of the queue. Defaults to ',
                                                                                                              ', the standard effects queue.'
                                                                                                            ],
                                                                                               'code' => 'fx'
                                                                                             }
                                                                                   },
                                                                      'element' => {
                                                                                   'type' => 'Element',
                                                                                   'desc' => 'A DOM element on which to add a queued function.'
                                                                                 },
                                                                      'callback' => {
                                                                                    'desc' => 'The new function to add to the queue.',
                                                                                    'type' => 'Function'
                                                                                  }
                                                                    },
                                                        'added' => '1.3'
                                                      }
                                                    ],
                                       'return' => 'jQuery',
                                       'desc' => 'Manipulate the queue of functions to be executed on the matched element.'
                                     }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.removeData.xml ####
Possible keys are: type name example longdesc category signature return title desc
$VAR1 = {
          'type' => 'method',
          'name' => 'jQuery.removeData',
          'example' => {
                       'code' => '
var div = $( "div" )[ 0 ];
$( "span:eq(0)" ).text( "" + $( "div" ).data( "test1" ) );
jQuery.data( div, "test1", "VALUE-1" );
jQuery.data( div, "test2", "VALUE-2" );
$( "span:eq(1)" ).text( "" + jQuery.data( div, "test1" ) );
jQuery.removeData( div, "test1" );
$( "span:eq(2)" ).text( "" + jQuery.data( div, "test1" ) );
$( "span:eq(3)" ).text( "" + jQuery.data( div, "test2" ) );
',
                       'html' => '
<div>value1 before creation: <span></span></div>
<div>value1 after creation: <span></span></div>
<div>value1 after removal: <span></span></div>
<div>value2 after removal: <span></span></div>
',
                       'desc' => 'Set a data store for 2 names then remove one of them.',
                       'css' => '
  div {
    margin: 2px;
    color: blue;
  }
  span {
    color: red;
  }
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => {
                                           'a' => {
                                                  'href' => '/removeData/',
                                                  'content' => '.removeData()'
                                                }
                                         },
                                 'strong' => 'Note:',
                                 'content' => [
                                                ' This is a low-level method, you should probably use ',
                                                ' instead.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'jQuery.removeData()',
                                           {
                                             'a' => {
                                                    'content' => 'jQuery.data()',
                                                    'href' => '/jQuery.data/'
                                                  }
                                           },
                                           'jQuery.removeData()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method allows us to remove values that were previously set using ',
                                                '. When called with the name of a key, ',
                                                ' deletes that particular value; when called with no arguments, all values are removed.'
                                              ]
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'data'
                        },
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.2.3'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'element' => {
                                                    'desc' => 'A DOM element from which to remove data.',
                                                    'type' => 'Element'
                                                  },
                                       'name' => {
                                                 'desc' => 'A string naming the piece of data to remove.',
                                                 'optional' => 'true',
                                                 'type' => 'String'
                                               }
                                     },
                         'added' => '1.2.3'
                       },
          'return' => 'jQuery',
          'title' => 'jQuery.removeData()',
          'desc' => 'Remove a previously-stored piece of data.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.speed.xml ####
Possible keys are: title return desc category longdesc type name signature
$VAR1 = {
          'title' => 'jQuery.speed',
          'return' => 'PlainObject',
          'desc' => 'Creates an object containing a set of properties ready to be used in the definition of custom animations.',
          'category' => [
                        {
                          'slug' => 'effects/custom-effects'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.1'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method provides a way to define properties, such as ',
                                                ', ',
                                                ', and ',
                                                ', to use in a custom animation. By using it, you don\'t have to implement the logic that deals with default values and optional parameters.'
                                              ],
                                 'code' => [
                                           '$.speed()',
                                           'duration',
                                           'easing',
                                           'queue'
                                         ]
                               },
                               {
                                 'content' => [
                                                'This method is meant for plugin developers who are creating new animation methods. Letting ',
                                                ' do all the parameter hockey and normalization for you, rather than duplicating the logic yourself, makes your work simpler. An example of use can be found in the animated form of ',
                                                ' of jQuery UI. '
                                              ],
                                 'code' => [
                                           '$.speed()',
                                           '.addClass()'
                                         ]
                               }
                             ]
                      },
          'type' => 'method',
          'name' => 'jQuery.speed',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'property' => {
                                                       'easing' => {
                                                                   'desc' => 'A string indicating which easing function to use for the transition.',
                                                                   'default' => 'swing',
                                                                   'optional' => 'true',
                                                                   'type' => 'String'
                                                                 },
                                                       'complete' => {
                                                                     'desc' => 'A function to call once the animation is complete.',
                                                                     'type' => 'Function',
                                                                     'optional' => 'true'
                                                                   }
                                                     },
                                         'type' => 'PlainObject',
                                         'name' => 'settings',
                                         'optional' => 'true'
                                       },
                           'xi:include' => {
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                           'href' => '../includes/duration-argument.xml'
                                         }
                         },
                         {
                           'added' => '1.1',
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'href' => '../includes/easing-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ]
                         },
                         {
                           'argument' => {
                                         'property' => {
                                                       'complete' => {
                                                                     'optional' => 'true',
                                                                     'type' => 'Function',
                                                                     'desc' => 'A function to call once the animation is complete.'
                                                                   },
                                                       'easing' => {
                                                                   'optional' => 'true',
                                                                   'type' => 'String',
                                                                   'desc' => 'A string indicating which easing function to use for the transition.',
                                                                   'default' => 'swing'
                                                                 },
                                                       'duration' => {
                                                                     'default' => '400',
                                                                     'desc' => 'A string or number determining how long the animation will run.',
                                                                     'type' => {
                                                                               'String' => {},
                                                                               'Number' => {}
                                                                             },
                                                                     'optional' => 'true'
                                                                   }
                                                     },
                                         'type' => 'PlainObject',
                                         'name' => 'settings'
                                       },
                           'added' => '1.1'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.sub.xml ####
Possible keys are: category name type example longdesc deprecated signature return title removed desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'core'
                        },
                        {
                          'slug' => 'version/1.5'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.7'
                        },
                        {
                          'slug' => 'removed'
                        }
                      ],
          'name' => 'jQuery.sub',
          'type' => 'method',
          'example' => [
                       {
                         'code' => '
(function(){
  var sub$ = jQuery.sub();
  sub$.fn.myCustomMethod = function() {
    return "just for me";
  };

  sub$( document ).ready(function() {
    sub$( "body" ).myCustomMethod() // "just for me"
  });
})();

typeof jQuery( "body" ).myCustomMethod // undefined
',
                         'desc' => 'Adding a method to a jQuery sub so that it isn\'t exposed externally:'
                       },
                       {
                         'desc' => 'Override some jQuery methods to provide new functionality.',
                         'code' => '
(function() {
  var myjQuery = jQuery.sub();

  myjQuery.fn.remove = function() {

    // New functionality: Trigger a remove event
    this.trigger( "remove" );

    // Be sure to call the original jQuery remove method
    return jQuery.fn.remove.apply( this, arguments );
  };

  myjQuery(function( $ ) {
    $( ".menu" ).click(function() {
      $( this ).find( ".submenu" ).remove();
    });

    // A new remove event is now triggered from this copy of jQuery
    $( document ).on( "remove", function( event ) {
      $( event.target ).parent().hide();
    });
  });
})();

// Regular jQuery doesn\'t trigger a remove event when removing an element
// This functionality is only contained within the modified \'myjQuery\'.
'
                       },
                       {
                         'desc' => 'Create a plugin that returns plugin-specific methods.',
                         'code' => '
(function() {

  // Create a new copy of jQuery using sub()
  var plugin = jQuery.sub();

  // Extend that copy with the new plugin methods
  plugin.fn.extend({
    open: function() {
      return this.show();
    },
    close: function() {
      return this.hide();
    }
  });

  // Add our plugin to the original jQuery
  jQuery.fn.myplugin = function() {
    this.addClass( "plugin" );

    // Make sure our plugin returns our special plugin version of jQuery
    return plugin( this );
  };
})();

$( document ).ready(function() {

  // Call the plugin, open method now exists
  $( "#main" ).myplugin().open();

  // Note: Calling just $( "#main" ).open() won\'t work as open doesn\'t exist!
});
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'strong' => 'This method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8.'
                               },
                               'There are two specific use cases for which jQuery.sub() was created. The first was for providing a painless way of overriding jQuery methods without completely destroying the original methods and another was for helping to do encapsulation and basic namespacing for jQuery plugins.',
                               'Note that jQuery.sub() doesn\'t attempt to do any sort of isolation - that\'s not its intention. All the methods on the sub\'d version of jQuery will still point to the original jQuery (events bound and triggered will still be through the main jQuery, data will be bound to elements through the main jQuery, Ajax queries and events will run through the main jQuery, etc.).',
                               {
                                 'i' => 'strongly',
                                 'a' => {
                                        'href' => 'http://blog.nemikor.com/2010/05/15/building-stateful-jquery-plugins/',
                                        'content' => 'Some examples of using the jQuery UI widget factory'
                                      },
                                 'content' => [
                                                'Note that if you\'re looking to use this for plugin development you should first ',
                                                ' consider using something like the jQuery UI widget factory which manages both state and plugin sub-methods. ',
                                                ' to build a plugin.'
                                              ]
                               },
                               'The particular use cases of this method can be best described through some examples.'
                             ]
                      },
          'deprecated' => '1.7',
          'signature' => {
                         'added' => '1.5'
                       },
          'return' => 'jQuery',
          'title' => 'jQuery.sub()',
          'removed' => '1.9',
          'desc' => 'Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.support.xml ####
Possible keys are: desc title return signature deprecated type name category
$VAR1 = {
          'desc' => {
                    'a' => {
                           'href' => 'http://modernizr.com',
                           'content' => 'Modernizr'
                         },
                    'code' => 'jQuery.support',
                    'content' => [
                                   'A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\'s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\'s feature-detection needs, we strongly recommend the use of an external library such as ',
                                   ' instead of dependency on properties in ',
                                   '.'
                                 ]
                  },
          'title' => 'jQuery.support',
          'return' => 'Object',
          'signature' => {
                         'added' => '1.3'
                       },
          'deprecated' => '1.9',
          'type' => 'property',
          'name' => 'jQuery.support',
          'category' => [
                        {
                          'slug' => 'properties/global-jquery-object-properties'
                        },
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.3'
                        },
                        {
                          'slug' => 'version/1.5.1'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.9'
                        }
                      ]
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.trim.xml ####
Possible keys are: title return desc example longdesc name type category signature
$VAR1 = {
          'title' => 'jQuery.trim()',
          'return' => 'String',
          'desc' => 'Remove the whitespace from the beginning and end of a string.',
          'example' => [
                       {
                         'html' => '
<pre id="original"></pre>
<pre id="trimmed"></pre>
',
                         'desc' => 'Remove the white spaces at the start and at the end of the string.',
                         'code' => '
var str = "         lots of spaces before and after         ";
$( "#original" ).html( "Original String: \'" + str + "\'" );
$( "#trimmed" ).html( "$.trim()\'ed: \'" + $.trim(str) + "\'" );
'
                       },
                       {
                         'results' => '
"hello, how are you?"
',
                         'code' => '
$.trim("    hello, how are you?    ");
',
                         'desc' => 'Remove the white spaces at the start and at the end of the string.'
                       }
                     ],
          'longdesc' => {
                        'p' => {
                               'code' => '$.trim()',
                               'content' => [
                                              'The ',
                                              ' function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.'
                                            ]
                             }
                      },
          'name' => 'jQuery.trim',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'name' => 'str',
                                       'type' => 'String',
                                       'desc' => 'The string to trim.'
                                     },
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.type.xml ####
Possible keys are: category name type example longdesc signature return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'name' => 'jQuery.type',
          'type' => 'method',
          'example' => {
                       'html' => '
Is it a RegExp? <b></b>
',
                       'desc' => 'Find out if the parameter is a RegExp.',
                       'code' => '
$( "b" ).append( "" + jQuery.type( /test/ ) );
'
                     },
          'longdesc' => {
                        'ul' => {
                                'li' => [
                                        {
                                          'ul' => {
                                                  'li' => [
                                                          'jQuery.type( undefined ) === "undefined"',
                                                          'jQuery.type() === "undefined"',
                                                          'jQuery.type( window.notDefined ) === "undefined"',
                                                          'jQuery.type( null ) === "null"'
                                                        ]
                                                },
                                          'content' => 'If the object is undefined or null, then "undefined" or "null" is returned accordingly.
        '
                                        },
                                        {
                                          'ul' => {
                                                  'li' => [
                                                          'jQuery.type( true ) === "boolean"',
                                                          'jQuery.type( new Boolean() ) === "boolean"',
                                                          'jQuery.type( 3 ) === "number"',
                                                          'jQuery.type( new Number(3) ) === "number"',
                                                          'jQuery.type( "test" ) === "string"',
                                                          'jQuery.type( new String("test") ) === "string"',
                                                          'jQuery.type( function(){} ) === "function"',
                                                          'jQuery.type( [] ) === "array"',
                                                          'jQuery.type( new Array() ) === "array"',
                                                          'jQuery.type( new Date() ) === "date"',
                                                          {
                                                            'content' => 'jQuery.type( new Error() ) === "error" // ',
                                                            'strong' => 'as of jQuery 1.9'
                                                          },
                                                          'jQuery.type( /test/ ) === "regexp"'
                                                        ]
                                                },
                                          'a' => {
                                                 'href' => 'http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/',
                                                 'content' => 'More details about this technique.'
                                               },
                                          'content' => [
                                                         'If the argument is either a primitive value or an instance of a standard built-in ECMAScript object, the [[Class]] internal property is used to determine the type. (',
                                                         ')
        '
                                                       ]
                                        },
                                        'Everything else returns "object" as its type.'
                                      ]
                              },
                        'p' => 'A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:'
                      },
          'signature' => {
                         'added' => '1.4.3',
                         'argument' => {
                                       'desc' => 'Object to get the internal JavaScript [[Class]] of.',
                                       'name' => 'obj',
                                       'type' => 'Anything'
                                     }
                       },
          'return' => 'String',
          'title' => 'jQuery.type()',
          'desc' => 'Determine the internal JavaScript [[Class]] of an object.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.unique.xml ####
Possible keys are: signature deprecated name type longdesc example category desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.1.3',
                         'argument' => {
                                       'name' => 'array',
                                       'type' => 'Array',
                                       'desc' => 'The Array of DOM elements.'
                                     }
                       },
          'deprecated' => '3.0',
          'name' => 'jQuery.unique',
          'type' => 'method',
          'longdesc' => {
                        'p' => [
                               {
                                 'strong' => {
                                             'code' => {
                                                       'a' => {
                                                              'href' => '/jQuery.uniqueSort/',
                                                              'content' => 'jQuery.uniqueSort()'
                                                            }
                                                     },
                                             'content' => [
                                                            'As of jQuery 3.0, this method is deprecated and just an alias of ',
                                                            '. Please use that method instead.'
                                                          ]
                                           }
                               },
                               {
                                 'em' => 'exact same',
                                 'content' => [
                                                'The ',
                                                ' function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the ',
                                                ' node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.'
                                              ],
                                 'code' => '$.unique()'
                               },
                               'As of jQuery 1.4 the results will always be returned in document order.'
                             ]
                      },
          'example' => {
                       'css' => '
  div {
    color: blue;
  }
',
                       'desc' => 'Removes any duplicate elements from the array of divs.',
                       'html' => '
<div>There are 6 divs in this document.</div>
<div></div>
<div class="dup"></div>
<div class="dup"></div>
<div class="dup"></div>
<div></div>
',
                       'code' => '
// unique() must take a native array
var divs = $( "div" ).get();

// Add 3 elements of class dup too (they are divs)
divs = divs.concat( $( ".dup" ).get() );
$( "div:eq(1)" ).text( "Pre-unique there are " + divs.length + " elements." );

divs = jQuery.unique( divs );
$( "div:eq(2)" ).text( "Post-unique there are " + divs.length + " elements." )
  .css( "color", "red" );
'
                     },
          'category' => [
                        {
                          'slug' => 'utilities'
                        },
                        {
                          'slug' => 'version/1.1.3'
                        }
                      ],
          'desc' => 'Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.',
          'return' => 'Array',
          'title' => 'jQuery.unique()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.uniqueSort.xml ####
Possible keys are: desc return title signature name type longdesc example category
$VAR1 = {
          'desc' => 'Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.',
          'return' => 'Array',
          'title' => 'jQuery.uniqueSort()',
          'signature' => {
                         'added' => '1.12/2.2',
                         'argument' => {
                                       'name' => 'array',
                                       'type' => 'Array',
                                       'desc' => 'The Array of DOM elements.'
                                     }
                       },
          'name' => 'jQuery.uniqueSort',
          'type' => 'method',
          'longdesc' => {
                        'p' => [
                               {
                                 'em' => 'exact same',
                                 'code' => '$.uniqueSort()',
                                 'content' => [
                                                'The ',
                                                ' function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the ',
                                                ' node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Prior to jQuery 3.0, this method was called ',
                                                '.'
                                              ],
                                 'code' => {
                                           'a' => {
                                                  'content' => 'jQuery.unique()',
                                                  'href' => '/jQuery.unique/'
                                                }
                                         }
                               },
                               'As of jQuery 1.4 the results will always be returned in document order.'
                             ]
                      },
          'example' => {
                       'code' => '
// unique() must take a native array
var divs = $( "div" ).get();

// Add 3 elements of class dup too (they are divs)
divs = divs.concat( $( ".dup" ).get() );
$( "div:eq(1)" ).text( "Pre-unique there are " + divs.length + " elements." );

divs = jQuery.uniqueSort( divs );
$( "div:eq(2)" ).text( "Post-unique there are " + divs.length + " elements." )
  .css( "color", "red" );
',
                       'css' => '
  div {
    color: blue;
  }
',
                       'desc' => 'Removes any duplicate elements from the array of divs.',
                       'html' => '
<div>There are 6 divs in this document.</div>
<div></div>
<div class="dup"></div>
<div class="dup"></div>
<div class="dup"></div>
<div></div>
'
                     },
          'category' => {
                        'slug' => 'utilities'
                      }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.when.xml ####
Possible keys are: return title desc type name example longdesc category signature
$VAR1 = {
          'return' => 'Promise',
          'title' => 'jQuery.when()',
          'desc' => {
                    'a' => {
                           'content' => 'Deferred',
                           'href' => '/category/deferred-object/'
                         },
                    'content' => [
                                   'Provides a way to execute callback functions based on zero or more objects, usually ',
                                   ' objects that represent asynchronous events.'
                                 ]
                  },
          'type' => 'method',
          'name' => 'jQuery.when',
          'example' => [
                       {
                         'desc' => 'Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).',
                         'code' => "
\$.when( \$.ajax( \"/page1.php\" ), \$.ajax( \"/page2.php\" ) ).done(function( a1, a2 ) {
  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.
  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]
  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = \"Whip\", a2[ 0 ] = \" It\"
  if ( /Whip It/.test( data\x{a0}) ) {
    alert( \"We got what we came for!\" );
  }
});
"
                       },
                       {
                         'desc' => {
                                   'content' => [
                                                  'Execute the function ',
                                                  ' when both ajax requests are successful, or ',
                                                  ' if either one has an error.'
                                                ],
                                   'code' => [
                                             'myFunc',
                                             'myFailure'
                                           ]
                                 },
                         'code' => '
$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) )
  .then( myFunc, myFailure );
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'If no arguments are passed to ',
                                                ', it will return a resolved Promise.'
                                              ],
                                 'code' => 'jQuery.when()'
                               },
                               {
                                 'code' => [
                                           'jQuery.when()',
                                           'jQuery.ajax()'
                                         ],
                                 'content' => [
                                                'If a single Deferred is passed to ',
                                                ', its Promise object (a subset of the Deferred methods) is returned by the method. Additional methods of the Promise object can be called to attach callbacks, such as ',
                                                '. When the Deferred is resolved or rejected, usually by the code that created the Deferred originally, the appropriate callbacks will be called. For example, the jqXHR object returned by ',
                                                ' is a Promise-compatible object and can be used this way:'
                                              ],
                                 'a' => {
                                        'href' => '/deferred.then/',
                                        'code' => 'deferred.then'
                                      }
                               },
                               {
                                 'code' => 'jQuery.when()',
                                 'content' => [
                                                'If a single argument is passed to ',
                                                ' and it is not a Deferred or a Promise, it will be treated as a resolved Deferred and any doneCallbacks attached will be executed immediately. The doneCallbacks are passed the original argument. In this case any failCallbacks you might set are never called since the Deferred is never rejected. For example:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'If you don\'t pass it any arguments at all, ',
                                                ' will return a resolved promise.'
                                              ],
                                 'code' => 'jQuery.when()'
                               },
                               {
                                 'content' => [
                                                'In the case where multiple Deferred objects are passed to ',
                                                ', the method returns the Promise from a new "master" Deferred object that tracks the aggregate state of all the Deferreds it has been passed. The method will resolve its master Deferred as soon as all the Deferreds resolve, or reject the master Deferred as soon as one of the Deferreds is rejected. If the master Deferred is resolved, the doneCallbacks for the master Deferred are executed. The arguments passed to the doneCallbacks provide the resolved values for each of the Deferreds, and matches the order the Deferreds were passed to ',
                                                '. For example:'
                                              ],
                                 'code' => [
                                           'jQuery.when()',
                                           'jQuery.when()'
                                         ]
                               },
                               'In the event a Deferred was resolved with no value, the corresponding doneCallback argument will be undefined. If a Deferred resolved to a single value, the corresponding argument will hold that value. In the case where a Deferred resolved to multiple values, the corresponding argument will be an array of those values. For example:',
                               {
                                 'code' => 'jQuery.when()',
                                 'content' => [
                                                'In the multiple-Deferreds case where one of the Deferreds is rejected, ',
                                                ' immediately fires the failCallbacks for its master Deferred. Note that some of the Deferreds may still be unresolved at that point. The arguments passed to the failCallbacks match the signature of the failCallback for the Deferred that was rejected. If you need to perform additional processing for this case, such as canceling any unfinished Ajax requests, you can keep references to the underlying jqXHR objects in a closure and inspect/cancel them in the failCallback.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$.when( $.ajax( "test.aspx" ) ).then(function( data, textStatus, jqXHR ) {
  alert( jqXHR.status ); // Alerts 200
});
    '
                                 },
                                 {
                                   'code' => '
$.when( { testing: 123 } ).done(function( x ) {
  alert( x.testing ); // Alerts "123"
});
    '
                                 },
                                 {
                                   'code' => '
$.when().then(function( x ) {
  alert( "I fired immediately" );
});
    '
                                 },
                                 {
                                   'code' => '
var d1 = $.Deferred();
var d2 = $.Deferred();

$.when( d1, d2 ).done(function ( v1, v2 ) {
    console.log( v1 ); // "Fish"
    console.log( v2 ); // "Pizza"
});

d1.resolve( "Fish" );
d2.resolve( "Pizza" );
    '
                                 },
                                 {
                                   'code' => '
var d1 = $.Deferred();
var d2 = $.Deferred();
var d3 = $.Deferred();

$.when( d1, d2, d3 ).done(function ( v1, v2, v3 ) {
    console.log( v1 ); // v1 is undefined
    console.log( v2 ); // v2 is "abc"
    console.log( v3 ); // v3 is an array [ 1, 2, 3, 4, 5 ]
});

d1.resolve();
d2.resolve( "abc" );
d3.resolve( 1, 2, 3, 4, 5 );
    '
                                 }
                               ]
                      },
          'category' => [
                        {
                          'slug' => 'core'
                        },
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.5'
                        }
                      ],
          'signature' => {
                         'added' => '1.5',
                         'argument' => {
                                       'desc' => 'Zero or more Deferred objects, or plain JavaScript objects.',
                                       'name' => 'deferreds',
                                       'type' => 'Deferred'
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/jQuery.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'jQuery' => {
                                 'desc' => 'Binds a function to be executed when the DOM has finished loading.',
                                 'return' => 'jQuery',
                                 'signature' => {
                                                'argument' => {
                                                              'desc' => 'The function to execute when the DOM is ready.',
                                                              'name' => 'callback',
                                                              'type' => 'Function'
                                                            },
                                                'added' => '1.0'
                                              },
                                 'category' => [
                                               {
                                                 'slug' => 'core'
                                               },
                                               {
                                                 'slug' => 'version/1.0'
                                               },
                                               {
                                                 'slug' => 'version/1.4'
                                               }
                                             ],
                                 'type' => 'method',
                                 'longdesc' => {
                                               'p' => {
                                                      'code' => [
                                                                '$( document ).ready()',
                                                                '$()'
                                                              ],
                                                      'content' => [
                                                                     'This function behaves just like ',
                                                                     ', in that it should be used to wrap other ',
                                                                     ' operations on your page that depend on the DOM being ready. While this function is, technically, chainable, there really isn\'t much use for chaining against it.'
                                                                   ]
                                                    }
                                             },
                                 'example' => [
                                              {
                                                'desc' => 'Execute the function when the DOM is ready to be used.',
                                                'code' => '
$(function() {
  // Document is ready
});
'
                                              },
                                              {
                                                'code' => '
jQuery(function( $ ) {
  // Your code using failsafe $ alias here...
});
',
                                                'desc' => 'Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.'
                                              }
                                            ]
                               }
                   },
          'desc' => 'Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/keydown.xml ####
Possible keys are: signature type name example longdesc category desc note return title
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'desc' => 'A function to execute each time the event is triggered.',
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     },
                                         'type' => 'Function',
                                         'name' => 'handler'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      },
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'type' => 'Function'
                                                    }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'type' => 'method',
          'name' => 'keydown',
          'example' => {
                       'desc' => 'Show the event object for the keydown handler when a key is pressed in the input.',
                       'html' => '
<form>
  <fieldset>
    <label for="target">Type Something:</label>
    <input id="target" type="text">
  </fieldset>
</form>
<button id="other">
  Trigger the handler
</button>
<script type="text/javascript" src="/resources/events.js"></script>
',
                       'css' => '
  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
',
                       'height' => '460',
                       'code' => '
var xTriggered = 0;
$( "#target" ).keydown(function( event ) {
  if ( event.which == 13 ) {
   event.preventDefault();
  }
  xTriggered++;
  var msg = "Handler for .keydown() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$( "#other" ).click(function() {
  $( "#target" ).keydown();
});
'
                     },
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<form>
  <input id="target" type="text" value="Hello there">
</form>
<div id="other">
  Trigger the handler
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).keydown(function() {
  alert( "Handler for .keydown() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).keydown();
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first and second variations, and ',
                                                ' in the third.'
                                              ],
                                 'code' => [
                                           '.on( "keydown", handler )',
                                           '.trigger( "keydown" )'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the user presses a key on the keyboard. If the key is kept pressed, the event is sent every time the operating system repeats the key. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.'
                                              ],
                                 'code' => 'keydown'
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to the input field:',
                               'Now when the insertion point is inside the field, pressing a key displays the alert:',
                               {
                                 'samp' => 'Handler for .keydown() called.'
                               },
                               {
                                 'code' => '.keydown()',
                                 'content' => [
                                                'To trigger the event manually, apply ',
                                                ' without an argument:'
                                              ]
                               },
                               {
                                 'samp' => 'Trigger the handler',
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also alert the message.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the ',
                                                ' object. Because of event bubbling, all key presses will make their way up the DOM to the ',
                                                ' object unless explicitly stopped.'
                                              ],
                                 'code' => [
                                           'document',
                                           'document'
                                         ]
                               },
                               {
                                 'code' => [
                                           '.which',
                                           '.keypress()'
                                         ],
                                 'content' => [
                                                'To determine which key was pressed, examine the ',
                                                ' that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the ',
                                                ' property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, ',
                                                ' may be a better choice.'
                                              ],
                                 'a' => {
                                        'content' => 'event object',
                                        'href' => '/category/events/event-object/'
                                      }
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'events/keyboard-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'desc' => 'Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'data-event' => 'keydown',
                    'type' => 'additional',
                    'id' => 'detach-shorthand'
                  },
          'return' => 'jQuery',
          'title' => '.keydown()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/keypress.xml ####
Possible keys are: title return desc note category example longdesc type name signature
$VAR1 = {
          'title' => '.keypress()',
          'return' => 'jQuery',
          'desc' => 'Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'data-event' => 'keypress',
                    'id' => 'detach-shorthand',
                    'type' => 'additional'
                  },
          'category' => [
                        {
                          'slug' => 'events/keyboard-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'example' => {
                       'css' => '
  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
',
                       'desc' => 'Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (http://api.jquery.com/resources/events.js) for the event object\'s output.',
                       'html' => '
<form>
  <fieldset>
    <label for="target">Type Something:</label>
    <input id="target" type="text">
  </fieldset>
</form>
<button id="other">
  Trigger the handler
</button>
<script src="/resources/events.js"></script>
',
                       'code' => '
var xTriggered = 0;
$( "#target" ).keypress(function( event ) {
  if ( event.which == 13 ) {
     event.preventDefault();
  }
  xTriggered++;
  var msg = "Handler for .keypress() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$( "#other" ).click(function() {
  $( "#target" ).keypress();
});
',
                       'height' => '460'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'strong' => 'Note:',
                                 'content' => [
                                                ' as the ',
                                                ' event isn\'t covered by any official specification, the actual behavior encountered when using it may differ across browsers, browser versions, and platforms.'
                                              ],
                                 'code' => 'keypress'
                               },
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ],
                                 'code' => [
                                           '.on( "keypress", handler )',
                                           '.trigger( "keypress" )'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the browser registers keyboard input. This is similar to the ',
                                                ' event, except that modifier and non-printing keys such as ',
                                                ', ',
                                                ', and ',
                                                ' trigger ',
                                                ' events but not ',
                                                ' events. Other differences between the two events may arise depending on platform and browser.'
                                              ],
                                 'kbd' => [
                                          'Shift',
                                          'Esc',
                                          'delete'
                                        ],
                                 'code' => [
                                           'keypress',
                                           'keydown',
                                           'keydown',
                                           'keypress'
                                         ]
                               },
                               {
                                 'code' => 'keypress',
                                 'content' => [
                                                'A ',
                                                ' event handler can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form controls can always get focus so are reasonable candidates for this event type.'
                                              ]
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to the input field:',
                               'Now when the insertion point is inside the field, pressing a key displays the log:',
                               {
                                 'samp' => 'Handler for .keypress() called.'
                               },
                               {
                                 'code' => '.keypress()',
                                 'content' => [
                                                'To trigger the event manually, apply ',
                                                ' without an argument:'
                                              ]
                               },
                               {
                                 'samp' => 'Trigger the handler',
                                 'content' => [
                                                'After this code executes, clicks on the ',
                                                ' div will also log the message.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'document',
                                           'document'
                                         ],
                                 'content' => [
                                                'If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the ',
                                                ' object. Because of event bubbling, all key presses will make their way up the DOM to the ',
                                                ' object unless explicitly stopped.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'event',
                                           '.which'
                                         ],
                                 'content' => [
                                                'To determine which character was entered, examine the ',
                                                ' object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the ',
                                                ' property so you can reliably use it to retrieve the character code.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'keydown',
                                           'keyup',
                                           'keypress',
                                           'keydown',
                                           'keyup',
                                           'keypress',
                                           '.keydown()',
                                           '.keyup()'
                                         ],
                                 'content' => [
                                                'Note that ',
                                                ' and ',
                                                ' provide a code indicating which key is pressed, while ',
                                                ' indicates which character was entered. For example, a lowercase "a" will be reported as 65 by ',
                                                ' and ',
                                                ', but as 97 by ',
                                                '. An uppercase "A" is reported as 65 by all events. Because of this distinction, when catching special keystrokes such as arrow keys, ',
                                                ' or ',
                                                ' is a better choice.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<form>
  <fieldset>
    <input id="target" type="text" value="Hello there">
  </fieldset>
</form>
<div id="other">
  Trigger the handler
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).keypress(function() {
  console.log( "Handler for .keypress() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).keypress();
});
    '
                                 }
                               ]
                      },
          'type' => 'method',
          'name' => 'keypress',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       }
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'type' => 'Function'
                                                    },
                                         'eventData' => {
                                                        'type' => 'Anything',
                                                        'optional' => 'true',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/keyup.xml ####
Possible keys are: signature longdesc example type name category desc note title return
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'desc' => 'A function to execute each time the event is triggered.',
                                         'name' => 'handler',
                                         'type' => 'Function',
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     }
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      },
                                         'handler' => {
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'type' => 'Function',
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "keyup", handler )',
                                           '.trigger( "keyup" )'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ]
                               },
                               {
                                 'code' => 'keyup',
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the user releases a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.'
                                              ]
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to the input field:',
                               'Now when the insertion point is inside the field and a key is pressed and released, the alert is displayed:',
                               {
                                 'samp' => 'Handler for .keyup() called.'
                               },
                               {
                                 'content' => [
                                                'To trigger the event manually, apply ',
                                                ' without arguments:'
                                              ],
                                 'code' => '.keyup()'
                               },
                               {
                                 'samp' => 'Trigger the handler',
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also alert the message.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'document',
                                           'document'
                                         ],
                                 'content' => [
                                                'If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the ',
                                                ' object. Because of event bubbling, all key presses will make their way up the DOM to the ',
                                                ' object unless explicitly stopped.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '.which',
                                           '.keypress()'
                                         ],
                                 'content' => [
                                                'To determine which key was pressed, examine the event object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the ',
                                                ' property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, ',
                                                ' may be a better choice.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<form>
  <input id="target" type="text" value="Hello there">
</form>
<div id="other">
  Trigger the handler
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).keyup(function() {
  alert( "Handler for .keyup() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).keyup();
});
    '
                                 }
                               ]
                      },
          'example' => {
                       'code' => '
var xTriggered = 0;
$( "#target" ).keyup(function( event ) {
  xTriggered++;
  var msg = "Handler for .keyup() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
}).keydown(function( event ) {
  if ( event.which == 13 ) {
    event.preventDefault();
  }
});

$( "#other").click(function() {
  $( "#target" ).keyup();
});
',
                       'height' => '460',
                       'css' => '
  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
',
                       'desc' => 'Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.',
                       'html' => '
<form>
  <fieldset>
    <label for="target">Type Something:</label>
    <input id="target" type="text">
  </fieldset>
</form>
<button id="other">
  Trigger the handler
</button>
<script type="text/javascript" src="/resources/events.js"></script>
'
                     },
          'type' => 'method',
          'name' => 'keyup',
          'category' => [
                        {
                          'slug' => 'events/keyboard-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'desc' => 'Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'id' => 'detach-shorthand',
                    'type' => 'additional',
                    'data-event' => 'keyup'
                  },
          'title' => '.keyup()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/lang-selector.xml ####
Possible keys are: desc title sample return signature category example longdesc name type
$VAR1 = {
          'desc' => 'Selects all elements of the specified language.',
          'title' => ':lang() Selector',
          'sample' => ':lang(language)',
          'return' => '',
          'signature' => {
                         'added' => '1.9',
                         'argument' => {
                                       'desc' => 'A language code.',
                                       'type' => 'String',
                                       'name' => 'language'
                                     }
                       },
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ],
          'example' => {
                       'code' => '
$( "div:lang(en-us)" ).addClass( "usa" );
$( "div:lang(es-es)" ).addClass( "spain" );
',
                       'html' => "
<h3>USA</h3>
<div lang=\"en-us\">red
  <div>white
    <div>and blue</div>
  </div>
</div>
<h3>Espa\x{f1}a</h3>
<div lang=\"es-es\">rojo
  <div>amarillo
    <div>y rojo</div>
  </div>
</div>
",
                       'desc' => 'Color div elements according to their language.',
                       'css' => '
  body {
    background-color: #ccc;
  }
  h3 {
    margin: .25em 0;
  }
  div {
    line-height: 1.5em
  }
  .usa {
    background-color: #f00;
    color: #fff;
  }
  .usa .usa {
    background-color: #fff;
    color: #000;
  }
  .usa .usa .usa {
    background-color: #00f;
    color: #fff;
  }
  .spain {
    background-color: #f00;
    color: #ff0;
  }
  .spain .spain {
    background-color: #ff0;
    color: #f00;
    line-height: 3em;
  }
  .spain .spain .spain {
    background-color: #f00;
    color: #ff0;
    line-height: 1.5em;
  }
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' selector matches elements that have a language value equal to the supplied language code or that start with the supplied language code immediately followed by "-". For example, the selector ',
                                                'will match ',
                                                ' and ',
                                                ' (and any of their descendant ',
                                                's), but not '
                                              ],
                                 'code' => [
                                           ':lang()',
                                           '$("div:lang(en)")',
                                           '<div lang="en">',
                                           '<div lang="en-us">',
                                           '<div>',
                                           '<div lang="fr">'
                                         ]
                               },
                               {
                                 'code' => [
                                           'lang',
                                           'meta'
                                         ],
                                 'content' => [
                                                'For HTML elements, the language value is determined by the ',
                                                ' attribute and possibly information from  ',
                                                ' elements or HTTP headers.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => 'http://www.w3.org/TR/css3-selectors/#lang-pseudo',
                                        'content' => 'W3C CSS specification'
                                      },
                                 'content' => [
                                                'Further discussion of this usage can be found in the ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'name' => 'lang',
          'type' => 'selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/last-child-selector.xml ####
Possible keys are: type name example longdesc category signature sample return title desc
$VAR1 = {
          'type' => 'selector',
          'name' => 'last-child',
          'example' => {
                       'code' => '
$( "div span:last-child" )
  .css({ color:"red", fontSize:"80%" })
  .hover(function() {
    $( this ).addClass( "solast" );
  }, function() {
    $( this ).removeClass( "solast" );
  });
',
                       'desc' => 'Find the last span in each matched div and add some css plus a hover state.',
                       'html' => '
<div>
  <span>John,</span>
  <span>Karl,</span>
  <span>Brandon,</span>
  <span>Sam</span>
</div>
<div>
  <span>Glen,</span>
  <span>Tane,</span>
  <span>Ralph,</span>
  <span>David</span>
</div>
',
                       'css' => '
  span.solast {
    text-decoration: line-through;
  }
'
                     },
          'longdesc' => {
                        'p' => {
                               'code' => ':last-child',
                               'content' => [
                                              'While ',
                                              ' matches only a single element, ',
                                              ' can match more than one: one for each parent.'
                                            ],
                               'a' => {
                                      'content' => ':last',
                                      'href' => '/last-selector/'
                                    }
                             }
                      },
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.1.4'
                        }
                      ],
          'signature' => {
                         'added' => '1.1.4'
                       },
          'sample' => ':last-child',
          'return' => '',
          'title' => ':last-child Selector',
          'desc' => 'Selects all elements that are the last child of their parent.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/last-of-type-selector.xml ####
Possible keys are: name type longdesc example category signature return sample title desc
$VAR1 = {
          'name' => 'last-of-type',
          'type' => 'selector',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The ',
                                              ' selector matches elements that have no other element with the same parent and the same element name coming after it in the document tree.'
                                            ],
                               'code' => ':last-of-type'
                             }
                      },
          'example' => {
                       'desc' => 'Find the last span in each matched div and add some css plus a hover state.',
                       'html' => "
<div>
  <span>Corey,</span>
  <span>Yehuda,</span>
  <span>Adam,</span>
  <span>Todd</span>
</div>
<div>
  <span>J\x{f6}rn,</span>
  <span>Scott,</span>
  <span>Timo,</span>
  <b>Nobody</b>
</div>
",
                       'css' => '
  span.solast {
    text-decoration: line-through;
  }
',
                       'code' => '
$( "span:last-of-type" )
  .css({ color:"red", fontSize:"80%" })
  .hover(function() {
    $( this ).addClass( "solast" );
  }, function() {
    $( this ).removeClass( "solast" );
  });
'
                     },
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ],
          'signature' => {
                         'added' => '1.9'
                       },
          'return' => '',
          'sample' => ':last-of-type',
          'title' => ':last-of-type Selector',
          'desc' => 'Selects all elements that are the last among siblings of the same element name.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/last-selector.xml ####
Possible keys are: desc note title sample return signature example longdesc name type category
$VAR1 = {
          'desc' => 'Selects the last matched element.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension',
                    'data-selector' => ':last'
                  },
          'title' => ':last Selector',
          'sample' => ':last',
          'return' => '',
          'signature' => {
                         'added' => '1.0'
                       },
          'example' => {
                       'code' => '
$( "tr:last" ).css({ backgroundColor: "yellow", fontWeight: "bolder" });
',
                       'html' => '
<table>
  <tr><td>First Row</td></tr>
  <tr><td>Middle Row</td></tr>
  <tr><td>Last Row</td></tr>
</table>
',
                       'desc' => 'Finds the last table row.'
                     },
          'longdesc' => {
                        'p' => {
                               'code' => ':last',
                               'content' => [
                                              'Note that ',
                                              ' selects a single element by filtering  the current jQuery collection and matching the last element within it.'
                                            ]
                             }
                      },
          'name' => 'last',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/last.xml ####
Possible keys are: desc return title signature name type example longdesc category
$VAR1 = {
          'desc' => 'Reduce the set of matched elements to the final one in the set.',
          'return' => 'jQuery',
          'title' => '.last()',
          'signature' => {
                         'added' => '1.4'
                       },
          'name' => 'last',
          'type' => 'method',
          'example' => {
                       'code' => '
$( "p span" ).last().addClass( "highlight" );
',
                       'html' => '
<p><span>Look:</span> <span>This is some text in a paragraph.</span> <span>This is a note about it.</span></p>
',
                       'desc' => 'Highlight the last span in a paragraph.',
                       'css' => '
  .highlight {
    background-color: yellow;
  }
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method constructs a new jQuery object from the last element in that set.'
                                              ],
                                 'code' => '.last()'
                               },
                               'Consider a page with a simple list on it:',
                               'We can apply this method to the set of list items:',
                               'The result of this call is a red background for the final item.'
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li>list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).last().css( "background-color", "red" );
    '
                                 }
                               ]
                      },
          'category' => [
                        {
                          'slug' => 'traversing/filtering'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/length.xml ####
Possible keys are: title return desc example longdesc type name category signature
$VAR1 = {
          'title' => '.length',
          'return' => 'Integer',
          'desc' => 'The number of elements in the jQuery object.',
          'example' => {
                       'desc' => 'Count the divs.  Click to add more.',
                       'html' => '<span></span>
  <div></div>',
                       'css' => '
  body {
    cursor: pointer;
  }
  div {
    width: 50px;
    height: 30px;
    margin: 5px;
    float: left;
    background: green;
  }
  span {
    color: red;
  }
',
                       'code' => '
$( document.body )
  .click(function() {
    $( document.body ).append( $( "<div>" ) );
    var n = $( "div" ).length;
    $( "span" ).text( "There are " + n + " divs." +
      "Click to add more.");
  })
  // Trigger the click to start
  .trigger( "click" );
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The number of elements currently matched. The .',
                                              ' method will return the same value.'
                                            ],
                               'a' => {
                                      'content' => 'size()',
                                      'href' => '/size/'
                                    }
                             }
                      },
          'type' => 'property',
          'name' => 'length',
          'category' => [
                        {
                          'slug' => 'properties/jquery-object-instance-properties'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0'
                       }
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/live.xml ####
Possible keys are: category longdesc example type name deprecated signature title return desc removed
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.3'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.7'
                        },
                        {
                          'slug' => 'removed'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$( selector ).live( events, data, handler );                // jQuery 1.3+
$( document ).delegate( selector, events, data, handler );  // jQuery 1.4.3+
$( document ).on( events, selector, data, handler );        // jQuery 1.7+
    '
                                 },
                                 {
                                   'code' => '
$( "a.offsite" ).live( "click", function() {
  alert( "Goodbye!" ); // jQuery 1.3+
});
$( document ).delegate( "a.offsite", "click", function() {
  alert( "Goodbye!" ); // jQuery 1.4.3+
});
$( document ).on( "click", "a.offsite", function() {
  alert( "Goodbye!" );  // jQuery 1.7+
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'a' => [
                                        {
                                          'code' => '.on()',
                                          'href' => '/on/'
                                        },
                                        {
                                          'href' => '/delegate/',
                                          'code' => '.delegate()'
                                        }
                                      ],
                                 'code' => [
                                           '.live()',
                                           '.live()'
                                         ],
                                 'content' => [
                                                ', the ',
                                                ' method is deprecated. Use ',
                                                ' to attach event handlers. Users of older versions of jQuery should use ',
                                                ' in preference to ',
                                                '.'
                                              ],
                                 'strong' => 'As of jQuery 1.7'
                               },
                               {
                                 'a' => {
                                        'code' => '.on()',
                                        'href' => '/on/'
                                      },
                                 'code' => 'document',
                                 'content' => [
                                                'This method provides a means to attach delegated event handlers to the ',
                                                ' element of a page, which simplifies the use of event handlers when content is dynamically added to a page. See the discussion of direct versus delegated events in the ',
                                                ' method for more information. '
                                              ]
                               },
                               {
                                 'code' => '.live()',
                                 'content' => [
                                                'Rewriting the ',
                                                ' method in terms of its successors is straightforward; these are templates for equivalent calls for all three event attachment methods:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' argument can either be a space-separated list of event type names and optional namespaces, or an object of event name strings and handlers. The ',
                                                ' argument is optional and can be omitted. For example, the following three method calls are functionally equivalent (but see below for more effective and performant ways to attach delegated event handlers):'
                                              ],
                                 'code' => [
                                           'events',
                                           'data'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Use of the ',
                                                ' method is no longer recommended since later versions of jQuery offer better methods that do not have its drawbacks. In particular, the following issues arise with the use of ',
                                                ':'
                                              ],
                                 'code' => [
                                           '.live()',
                                           '.live()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'For pages still using ',
                                                ', this list of version-specific differences may be helpful:'
                                              ],
                                 'code' => '.live()'
                               }
                             ],
                        'ul' => [
                                {
                                  'li' => [
                                          {
                                            'code' => '.live()',
                                            'content' => [
                                                           'jQuery attempts to retrieve the elements specified by the selector before calling the ',
                                                           ' method, which may be time-consuming on large documents.'
                                                         ]
                                          },
                                          {
                                            'em' => 'not',
                                            'content' => [
                                                           'Chaining methods is not supported. For example, ',
                                                           ' is ',
                                                           ' valid and does not work as expected.'
                                                         ],
                                            'code' => '$( "a" ).find( ".offsite, .external" ).live( ... ); '
                                          },
                                          {
                                            'content' => [
                                                           'Since all ',
                                                           ' events are attached at the ',
                                                           ' element, events take the longest and slowest possible path before they are handled.'
                                                         ],
                                            'code' => [
                                                      '.live()',
                                                      'document'
                                                    ]
                                          },
                                          {
                                            'content' => [
                                                           'On mobile iOS (iPhone, iPad and iPod Touch) the ',
                                                           ' event does not bubble to the document body for most elements and cannot be used with ',
                                                           ' without applying one of the following workarounds:
        '
                                                         ],
                                            'ol' => {
                                                    'li' => [
                                                            {
                                                              'code' => [
                                                                        'a',
                                                                        'button',
                                                                        'document'
                                                                      ],
                                                              'content' => [
                                                                             'Use natively clickable elements such as ',
                                                                             ' or ',
                                                                             ', as both of these do bubble to ',
                                                                             '.'
                                                                           ]
                                                            },
                                                            {
                                                              'content' => [
                                                                             'Use ',
                                                                             ' or ',
                                                                             ' attached to an element below the level of ',
                                                                             ', since mobile iOS does bubble within the body.'
                                                                           ],
                                                              'code' => [
                                                                        '.on()',
                                                                        '.delegate()',
                                                                        'document.body'
                                                                      ]
                                                            },
                                                            {
                                                              'code' => [
                                                                        'cursor:pointer',
                                                                        'document.documentElement'
                                                                      ],
                                                              'content' => [
                                                                             'Apply the CSS style ',
                                                                             ' to the element that needs to bubble clicks (or a parent including ',
                                                                             '). Note however, this will disable copy\\paste on the element and cause it to be highlighted when touched.'
                                                                           ]
                                                            }
                                                          ]
                                                  },
                                            'code' => [
                                                      'click',
                                                      '.live()'
                                                    ]
                                          },
                                          {
                                            'a' => {
                                                   'href' => '/event.stopPropagation/',
                                                   'code' => 'event.stopPropagation()'
                                                 },
                                            'code' => 'document',
                                            'content' => [
                                                           'Calling ',
                                                           ' in the event handler is ineffective in stopping event handlers attached lower in the document; the event has already propagated to ',
                                                           '.'
                                                         ]
                                          },
                                          {
                                            'code' => [
                                                      '.live()',
                                                      '$( document ).off( "click" )',
                                                      '.live()'
                                                    ],
                                            'content' => [
                                                           'The ',
                                                           ' method interacts with other event methods in ways that can be surprising, e.g., ',
                                                           ' removes all click handlers attached by any call to ',
                                                           '!'
                                                         ]
                                          }
                                        ]
                                },
                                {
                                  'li' => [
                                          {
                                            'code' => [
                                                      '.live()',
                                                      'false',
                                                      '.stopPropagation()'
                                                    ],
                                            'content' => [
                                                           'Before jQuery 1.7, to stop further handlers from executing after one bound using ',
                                                           ', the handler must return ',
                                                           '. Calling ',
                                                           ' will not accomplish this.'
                                                         ]
                                          },
                                          {
                                            'content' => [
                                                           'As of ',
                                                           ' the ',
                                                           ' method supports custom events as well as ',
                                                           '. It also supports certain events that don\'t bubble, including ',
                                                           ', ',
                                                           ', ',
                                                           ' and ',
                                                           '.'
                                                         ],
                                            'code' => [
                                                      '.live()',
                                                      'change',
                                                      'submit',
                                                      'focus',
                                                      'blur'
                                                    ],
                                            'b' => 'jQuery 1.4',
                                            'em' => 'all JavaScript events that bubble'
                                          },
                                          {
                                            'content' => [
                                                           'In ',
                                                           ' only the following JavaScript events could be bound: ',
                                                           ', ',
                                                           ', ',
                                                           ', ',
                                                           ', ',
                                                           ', ',
                                                           ', ',
                                                           ', ',
                                                           ', ',
                                                           ', and ',
                                                           '.'
                                                         ],
                                            'code' => [
                                                      'click',
                                                      'dblclick',
                                                      'keydown',
                                                      'keypress',
                                                      'keyup',
                                                      'mousedown',
                                                      'mousemove',
                                                      'mouseout',
                                                      'mouseover',
                                                      'mouseup'
                                                    ],
                                            'b' => 'jQuery 1.3.x'
                                          }
                                        ]
                                }
                              ]
                      },
          'example' => [
                       {
                         'code' => '
$( "a" ).live( "click", function() {
  return false;
});
',
                         'desc' => 'Cancel a default action and prevent it from bubbling up by returning false.'
                       },
                       {
                         'desc' => 'Cancel only the default action by using the preventDefault method.',
                         'code' => '
$( "a" ).live( "click", function( event ) {
  event.preventDefault();
});
'
                       },
                       {
                         'code' => '
$( "p" ).live( "myCustomEvent", function( event, myName, myValue ) {
  $( this ).text( "Hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent" );
});
',
                         'desc' => 'Bind custom events with .live().'
                       },
                       {
                         'code' => '
$( "p" ).live({
  click: function() {
    $( this ).after( "<p>Another paragraph!</p>" );
  },
  mouseover: function() {
    $( this ).addClass( "over" );
  },
  mouseout: function() {
    $( this ).removeClass( "over" );
  }
});
',
                         'desc' => 'Use an object to bind multiple live event handlers. Note that .live() calls the click, mouseover, and mouseout event handlers for all paragraphs--even new ones.'
                       }
                     ],
          'type' => 'method',
          'name' => 'live',
          'deprecated' => '1.7',
          'signature' => [
                         {
                           'added' => '1.3',
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'A function to execute at the time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  }
                                                    },
                                         'events' => {
                                                     'type' => 'String',
                                                     'desc' => 'A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.'
                                                   }
                                       }
                         },
                         {
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'A function to execute at the time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  }
                                                    },
                                         'data' => {
                                                   'desc' => 'An object containing data that will be passed to the event handler.',
                                                   'type' => 'PlainObject',
                                                   'optional' => 'true'
                                                 },
                                         'events' => {
                                                     'desc' => 'A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.',
                                                     'type' => 'String'
                                                   }
                                       },
                           'added' => '1.4'
                         },
                         {
                           'argument' => {
                                         'desc' => 'A plain object of one or more JavaScript event types and functions to execute for them.',
                                         'name' => 'events',
                                         'type' => 'PlainObject'
                                       },
                           'added' => '1.4.3'
                         }
                       ],
          'title' => '.live()',
          'return' => 'jQuery',
          'desc' => 'Attach an event handler for all elements which match the current selector, now and in the future.',
          'removed' => '1.9'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/load-event.xml ####
Possible keys are: category type name longdesc example deprecated signature return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/document-loading'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.8'
                        }
                      ],
          'type' => 'method',
          'name' => 'load',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                '.'
                                              ],
                                 'code' => '.on( "load", handler )'
                               },
                               {
                                 'code' => [
                                           'load',
                                           'window'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when it and all sub-elements have been completely loaded. This event can be sent to any element associated with a URL: images, scripts, frames, iframes, and the ',
                                                ' object.'
                                              ]
                               },
                               'For example, consider a page with a simple image:',
                               'The event handler can be bound to the image:',
                               'As soon as the image has been loaded, the handler is called.',
                               {
                                 'code' => '.ready()',
                                 'content' => [
                                                'In general, it is not necessary to wait for all images to be fully loaded. If code can be executed earlier, it is usually best to place it in a handler sent to the ',
                                                ' method.
    '
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<img src="book.png" alt="Book" id="book">
    '
                                 },
                                 {
                                   'code' => '
$( "#book" ).load(function() {
  // Handler for .load() called.
});
    '
                                 }
                               ],
                        'div' => [
                                 {
                                   'class' => 'warning',
                                   'p' => {
                                          'code' => {
                                                    'a' => {
                                                           'href' => '/load/',
                                                           'content' => '.load()'
                                                         }
                                                  },
                                          'content' => [
                                                         'The Ajax module also has a method named ',
                                                         '. Which one is fired depends on the set of arguments passed.'
                                                       ]
                                        }
                                 },
                                 {
                                   'p' => {
                                          'ul' => {
                                                  'li' => [
                                                          'It doesn\'t work consistently nor reliably cross-browser',
                                                          'It doesn\'t fire correctly in WebKit if the image src is set to the same src as before',
                                                          'It doesn\'t correctly bubble up the DOM tree',
                                                          'Can cease to fire for images that already live in the browser\'s cache'
                                                        ]
                                                },
                                          'b' => {
                                                 'code' => 'load',
                                                 'content' => [
                                                                'Caveats of the ',
                                                                ' event when used with images'
                                                              ]
                                               },
                                          'p' => {
                                                 'code' => '.load()',
                                                 'content' => [
                                                                'A common challenge developers attempt to solve using the ',
                                                                ' shortcut is to execute a function when an image (or collection of images) have completely loaded. There are several known caveats with this that should be noted. These are:'
                                                              ]
                                               }
                                        },
                                   'class' => 'warning'
                                 },
                                 {
                                   'p' => {
                                          'strong' => 'Note:',
                                          'content' => [
                                                         ' The ',
                                                         ' and ',
                                                         ' methods cannot be used to detect the ',
                                                         ' event of an iframe. The load event does not correctly bubble up the parent document and the event.target isn\'t set by Firefox, IE9 or Chrome, which is required to do event delegation.'
                                                       ],
                                          'code' => [
                                                    '.live()',
                                                    '.delegate()',
                                                    'load'
                                                  ]
                                        },
                                   'class' => 'warning'
                                 }
                               ]
                      },
          'example' => [
                       {
                         'code' => '
$( window ).load(function() {
  // Run code
});
',
                         'desc' => 'Run a function when the page is fully loaded including graphics.'
                       },
                       {
                         'desc' => 'Add the class bigImg to all images with height greater than 100 upon each image load.',
                         'code' => '
$( "img.userIcon" ).load(function() {
  if ( $( this ).height() > 100) {
    $( this ).addClass( "bigImg" );
  }
});
'
                       }
                     ],
          'deprecated' => '1.8',
          'signature' => [
                         {
                           'argument' => {
                                         'desc' => 'A function to execute when the event is triggered.',
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     }
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'handler' => {
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    },
                                         'eventData' => {
                                                        'optional' => 'true',
                                                        'type' => 'Anything',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      }
                                       }
                         }
                       ],
          'return' => 'jQuery',
          'title' => '.load()',
          'desc' => 'Bind an event handler to the "load" JavaScript event.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/load.xml ####
Possible keys are: desc note title return signature example longdesc name type category
$VAR1 = {
          'desc' => 'Load data from the server and place the returned HTML into the matched element.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'same-origin-policy'
                  },
          'title' => '.load()',
          'return' => 'jQuery',
          'signature' => {
                         'argument' => {
                                       'data' => {
                                                 'type' => {
                                                           'String' => {},
                                                           'PlainObject' => {}
                                                         },
                                                 'optional' => 'true',
                                                 'desc' => 'A plain object or string that is sent to the server with the request.'
                                               },
                                       'url' => {
                                                'desc' => 'A string containing the URL to which the request is sent.',
                                                'type' => 'String'
                                              },
                                       'complete' => {
                                                     'desc' => 'A callback function that is executed when the request completes.',
                                                     'type' => 'Function',
                                                     'argument' => {
                                                                   'responseText' => {
                                                                                     'type' => 'String'
                                                                                   },
                                                                   'textStatus' => {
                                                                                   'type' => 'String'
                                                                                 },
                                                                   'jqXHR' => {
                                                                              'type' => 'jqXHR'
                                                                            }
                                                                 },
                                                     'optional' => 'true'
                                                   }
                                     },
                         'added' => '1.0'
                       },
          'example' => [
                       {
                         'css' => '
  body {
    font-size: 12px;
    font-family: Arial;
  }
',
                         'desc' => 'Load another page\'s list items into an ordered list.',
                         'html' => '
<b>Projects:</b>
<ol id="new-projects"></ol>
',
                         'code' => '
$( "#new-projects" ).load( "/resources/load.html #projects li" );
'
                       },
                       {
                         'css' => '
  body {
    font-size: 12px;
    font-family: Arial;
  }
',
                         'desc' => 'Display a notice if the Ajax request encounters an error.',
                         'html' => '
<b>Successful Response (should be blank):</b>
<div id="success"></div>
<b>Error Response:</b>
<div id="error"></div>
',
                         'code' => '
$( "#success" ).load( "/not-here.php", function( response, status, xhr ) {
  if ( status == "error" ) {
    var msg = "Sorry but there was an error: ";
    $( "#error" ).html( msg + xhr.status + " " + xhr.statusText );
  }
});
'
                       },
                       {
                         'results' => '
<div id="feeds"><b>45</b> feeds found.</div>
',
                         'code' => '
$( "#feeds" ).load( "feeds.html" );
',
                         'desc' => 'Load the feeds.html file into the div with the ID of feeds.'
                       },
                       {
                         'desc' => 'pass arrays of data to the server.',
                         'code' => '
$( "#objectID" ).load( "test.php", { "choices[]": [ "Jon", "Susan" ] } );
'
                       },
                       {
                         'code' => '
$( "#feeds" ).load( "feeds.php", { limit: 25 }, function() {
  alert( "The last 25 entries in the feed have been loaded" );
});
',
                         'desc' => 'Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.'
                       }
                     ],
          'longdesc' => {
                        'div' => {
                                 'p' => {
                                        'code' => {
                                                  'a' => {
                                                         'href' => '/load-event/',
                                                         'content' => '.load()'
                                                       }
                                                },
                                        'content' => [
                                                       'Note: The event handling suite also has a method named ',
                                                       '. jQuery determines which method to fire based on the set of arguments passed to it.'
                                                     ]
                                      },
                                 'class' => 'warning'
                               },
                        'h4' => {
                                'loading-page-fragments' => {
                                                            'content' => 'Loading Page Fragments'
                                                          },
                                'request-method' => {
                                                    'content' => 'Request Method'
                                                  },
                                'callback-function' => {
                                                       'content' => 'Callback Function'
                                                     },
                                'script-execution' => {
                                                      'content' => 'Script Execution'
                                                    }
                              },
                        'p' => [
                               {
                                 'code' => [
                                           '$.get(url, data, success)',
                                           'textStatus',
                                           '.load()'
                                         ],
                                 'content' => [
                                                'This method is the simplest way to fetch data from the server. It is roughly equivalent to ',
                                                ' except that it is a method rather than global function and it has an implicit callback function.  When a successful response is detected (i.e. when ',
                                                ' is "success" or "notmodified"), ',
                                                ' sets the HTML contents of the matched element to the returned data. This means that most uses of the method can be quite simple:'
                                              ]
                               },
                               {
                                 'content' => [
                                                "If no element is matched by the selector \x{2014} in this case, if the document does not contain an element with id=\"result\" \x{2014} the Ajax request will ",
                                                ' be sent.'
                                              ],
                                 'em' => 'not'
                               },
                               {
                                 'content' => [
                                                'If a "complete" callback is provided, it is executed after post-processing and HTML insertion has been performed. The callback is fired once for each element in the jQuery collection, and ',
                                                ' is set to each DOM element in turn.'
                                              ],
                                 'code' => 'this'
                               },
                               {
                                 'content' => [
                                                'In the two examples above, if the current document does not contain an element with an ID of "result," the ',
                                                ' method is not executed.'
                                              ],
                                 'code' => '.load()'
                               },
                               'The POST method is used if data is provided as an object; otherwise, GET is assumed.',
                               {
                                 'code' => [
                                           '.load()',
                                           {
                                             'a' => {
                                                    'content' => '$.get()',
                                                    'href' => '/jQuery.get/'
                                                  }
                                           },
                                           'url'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method, unlike ',
                                                ', allows us to specify a portion of the remote document to be inserted. This is achieved with a special syntax for the ',
                                                ' parameter. If one or more space characters are included in the string, the portion of the string following the first space is assumed to be a jQuery selector that determines the content to be loaded.   '
                                              ]
                               },
                               'We could modify the example above to use only part of the document that is fetched:',
                               {
                                 'code' => [
                                           'ajax/test.html',
                                           'container',
                                           'result'
                                         ],
                                 'content' => [
                                                'When this method executes, it retrieves the content of ',
                                                ', but then jQuery parses the returned document to find the element with an ID of ',
                                                '. This element, along with its contents, is inserted into the element with an ID of ',
                                                ', and the rest of the retrieved document is discarded.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '.innerHTML',
                                           '<html>',
                                           '<title>',
                                           '<head>',
                                           '.load()'
                                         ],
                                 'content' => [
                                                'jQuery uses the browser\'s ',
                                                ' property to parse the retrieved document and insert it into the current document. During this process, browsers often filter elements from the document such as ',
                                                ', ',
                                                ', or ',
                                                ' elements. As a result, the elements retrieved by ',
                                                ' may not be exactly the same as if the document were retrieved directly by the browser.'
                                              ]
                               },
                               {
                                 'content' => [
                                                ' When calling ',
                                                ' using a URL without a suffixed selector expression, the content is passed to ',
                                                ' prior to scripts being removed. This executes the script blocks before they are discarded. If ',
                                                ' is called with a selector expression appended to the URL, however, the scripts are stripped out prior to the DOM being updated, and thus are ',
                                                ' executed. An example of both cases can be seen below:'
                                              ],
                                 'code' => [
                                           '.load()',
                                           '.html()',
                                           '.load()'
                                         ],
                                 'em' => 'not'
                               },
                               {
                                 'code' => '#a',
                                 'content' => [
                                                'Here, any JavaScript loaded into ',
                                                ' as a part of the document will successfully execute.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'However, in the following case, script blocks in the document being loaded into ',
                                                ' are stripped out and not executed:'
                                              ],
                                 'code' => '#b'
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$( "#result" ).load( "ajax/test.html" );
    '
                                 },
                                 {
                                   'code' => '
$( "#result" ).load( "ajax/test.html", function() {
  alert( "Load was performed." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#result" ).load( "ajax/test.html #container" );
    '
                                 },
                                 {
                                   'code' => '
$( "#a" ).load( "article.html" );
    '
                                 },
                                 {
                                   'code' => '
$( "#b" ).load( "article.html #target" );
    '
                                 }
                               ]
                      },
          'name' => 'load',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'ajax/shorthand-methods'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/lt-selector.xml ####
Possible keys are: signature category longdesc example name type desc note title return
$VAR1 = {
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'desc' => 'Zero-based index.',
                                         'name' => 'index',
                                         'type' => 'Number'
                                       },
                           'sample' => ':lt(index)'
                         },
                         {
                           'sample' => ':lt(-index)',
                           'argument' => {
                                         'desc' => 'Zero-based index, counting backwards from the last element. ',
                                         'type' => 'Integer',
                                         'name' => 'indexFromEnd'
                                       },
                           'added' => '1.8'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               {
                                 'strong' => 'index-related selectors'
                               },
                               {
                                 'code' => '.myclass',
                                 'content' => [
                                                'The index-related selectors (including this "less than" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (',
                                                ') and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Note that since JavaScript arrays use ',
                                                ', these selectors reflect that fact. This is why ',
                                                ' selects the first element in the document with the class ',
                                                ', rather than selecting no elements. In contrast, ',
                                                ' uses ',
                                                ' to conform to the CSS specification.'
                                              ],
                                 'code' => [
                                           '$( ".myclass:lt(1)" )',
                                           'myclass',
                                           ':nth-child(n)'
                                         ],
                                 'em' => [
                                         '0-based indexing',
                                         '1-based indexing'
                                       ]
                               },
                               {
                                 'em' => 'not',
                                 'code' => [
                                           ':lt(index)',
                                           'index'
                                         ],
                                 'content' => [
                                                'Prior to jQuery 1.8, the ',
                                                ' selector did ',
                                                ' accept a negative value for '
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'desc' => 'Give TDs less than the one with the 4th index (TD#4) a yellow background and TDs less than the one with -2nd index a red text color.',
                       'html' => '
<table border="1">
  <tr><td>TD #0</td><td>TD #1</td><td>TD #2</td></tr>
  <tr><td>TD #3</td><td>TD #4</td><td>TD #5</td></tr>
  <tr><td>TD #6</td><td>TD #7</td><td>TD #8</td></tr>
</table>
',
                       'code' => '
$( "td:lt(4)" ).css( "backgroundColor", "yellow" );
$( "td:lt(-2)" ).css( "color", "red" );
'
                     },
          'name' => 'lt',
          'type' => 'selector',
          'desc' => {
                    'content' => [
                                   'Select all elements at an index less than ',
                                   ' within the matched set.'
                                 ],
                    'code' => 'index'
                  },
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension-alt',
                    'data-selector' => ':lt()',
                    'data-alt' => '$("your-pure-css-selector").slice(0, index)'
                  },
          'title' => ':lt() Selector',
          'return' => ''
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/map.xml ####
Possible keys are: desc return title signature type name example longdesc category
$VAR1 = {
          'desc' => 'Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.',
          'return' => 'jQuery',
          'title' => '.map()',
          'signature' => {
                         'argument' => {
                                       'argument' => {
                                                     'index' => {
                                                                'type' => 'Integer'
                                                              },
                                                     'domElement' => {
                                                                     'type' => 'Element'
                                                                   }
                                                   },
                                       'return' => {
                                                   'type' => 'Object'
                                                 },
                                       'type' => 'Function',
                                       'name' => 'callback',
                                       'desc' => 'A function object that will be invoked for each element in the current set.'
                                     },
                         'added' => '1.2'
                       },
          'type' => 'method',
          'name' => 'map',
          'example' => [
                       {
                         'code' => '
$( "p" )
  .append( $( "input" ).map(function() {
    return $( this ).val();
  })
  .get()
  .join( ", " ) );
',
                         'css' => '
  p {
    color: red;
  }
',
                         'desc' => 'Build a list of all the values within a form.',
                         'html' => '
<p><b>Values: </b></p>
<form>
  <input type="text" name="name" value="John">
  <input type="text" name="password" value="password">
  <input type="text" name="url" value="http://ejohn.org/">
</form>
'
                       },
                       {
                         'code' => '
var mappedItems = $( "li" ).map(function( index ) {
  var replacement = $( "<li>" ).text( $( this ).text() ).get( 0 );
  if ( index === 0 ) {

    // Make the first item all caps
    $( replacement ).text( $( replacement ).text().toUpperCase() );
  } else if ( index === 1 || index === 3 ) {

    // Delete the second and fourth items
    replacement = null;
  } else if ( index === 2 ) {

    // Make two of the third item and add some text
    replacement = [ replacement, $( "<li>" ).get( 0 ) ];
    $( replacement[ 0 ] ).append( "<b> - A</b>" );
    $( replacement[ 1 ] ).append( "Extra <b> - B</b>" );
  }

  // Replacement will be a dom element, null,
  // or an array of dom elements
  return replacement;
});
$( "#results" ).append( mappedItems );
',
                         'html' => '
<ul>
  <li>First</li>
  <li>Second</li>
  <li>Third</li>
  <li>Fourth</li>
  <li>Fifth</li>
</ul>
<ul id="results">
</ul>
',
                         'desc' => 'A contrived example to show some functionality.',
                         'css' => '
  body {
    font-size: 16px;
  }
  ul {
    float: left;
    margin: 0 30px;
    color: blue;
  }
  #results {
    color: red;
  }
'
                       },
                       {
                         'code' => '
$.fn.equalizeHeights = function() {
  var maxHeight = this.map(function( i, e ) {
    return $( e ).height();
  }).get();
  return this.height( Math.max.apply( this, maxHeight ) );
};

$( "input" ).click(function() {
  $( "div" ).equalizeHeights();
});
',
                         'css' => '
  div {
    width: 40px;
    float: left;
  }
  input {
    clear: left;
  }
',
                         'html' => '
<input type="button" value="equalize div heights">
<div style="background: red; height: 40px; "></div>
<div style="background: green; height: 70px;"></div>
<div style="background: blue; height: 50px; "></div>
',
                         'desc' => 'Equalize the heights of the divs.'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'If you wish to process a plain array or object, use the ',
                                                ' instead. '
                                              ],
                                 'a' => {
                                        'href' => '/jQuery.map/',
                                        'content' => 'jQuery.map()'
                                      }
                               },
                               {
                                 'code' => '.get()',
                                 'content' => [
                                                'As the return value is a jQuery object, which contains an array, it\'s very common to call ',
                                                ' on the result to work with a basic array.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' method is particularly useful for getting or setting the value of a collection of elements. Consider a form with a set of checkboxes in it:'
                                              ],
                                 'code' => '.map()'
                               },
                               {
                                 'content' => [
                                                'To get a comma-separated list of checkbox ',
                                                's:'
                                              ],
                                 'code' => 'ID'
                               },
                               {
                                 'content' => [
                                                'The result of this call is the string, ',
                                                '.'
                                              ],
                                 'code' => '"two,four,six,eight"'
                               },
                               {
                                 'content' => [
                                                'Within the callback function, ',
                                                ' refers to the current DOM element for each iteration. The function can return an individual data item or an array of data items to be inserted into the resulting set. If an array is returned, the elements inside the array are inserted into the set. If the function returns ',
                                                ' or ',
                                                ', no element will be inserted.'
                                              ],
                                 'code' => [
                                           'this',
                                           'null',
                                           'undefined'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<form method="post" action="">
  <fieldset>
    <div>
      <label for="two">2</label>
      <input type="checkbox" value="2" id="two" name="number[]">
    </div>
    <div>
      <label for="four">4</label>
      <input type="checkbox" value="4" id="four" name="number[]">
    </div>
    <div>
      <label for="six">6</label>
      <input type="checkbox" value="6" id="six" name="number[]">
    </div>
    <div>
      <label for="eight">8</label>
      <input type="checkbox" value="8" id="eight" name="number[]">
    </div>
  </fieldset>
</form>
    '
                                 },
                                 {
                                   'code' => '
$( ":checkbox" )
  .map(function() {
    return this.id;
  })
  .get()
  .join();
    '
                                 }
                               ]
                      },
          'category' => [
                        {
                          'slug' => 'traversing/filtering'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/mousedown.xml ####
Possible keys are: title return desc note longdesc example type name category signature
$VAR1 = {
          'title' => '.mousedown()',
          'return' => 'jQuery',
          'desc' => 'Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'data-event' => 'mousedown',
                    'type' => 'additional',
                    'id' => 'detach-shorthand'
                  },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "mousedown", handler)',
                                           '.trigger( "mousedown" )'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first variation, and ',
                                                ' in the second.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed. Any HTML element can receive this event.'
                                              ],
                                 'code' => 'mousedown'
                               },
                               'For example, consider the HTML:',
                               {
                                 'content' => [
                                                'The event handler can be bound to any ',
                                                ':'
                                              ],
                                 'code' => '<div>'
                               },
                               'Now if we click on this element, the alert is displayed:',
                               {
                                 'samp' => 'Handler for .mousedown() called.'
                               },
                               'We can also trigger the event when a different element is clicked:',
                               {
                                 'samp' => 'Trigger the handler',
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also alert the message.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'mousedown',
                                           'which ',
                                           'which'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' event is sent when any mouse button is clicked. To act only on specific buttons, we can use the event object\'s ',
                                                'property. Not all browsers support this property (Internet Explorer uses button instead), but jQuery normalizes the property so that it is safe to use in any browser. The value of ',
                                                ' will be 1 for the left button, 2 for the middle button, or 3 for the right button.'
                                              ]
                               },
                               'This event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.',
                               {
                                 'code' => [
                                           'mousedown',
                                           'click',
                                           'mousedown'
                                         ],
                                 'content' => [
                                                'If the user clicks on an element, drags away from it, and releases the button, this is still counted as a ',
                                                ' event. This sequence of actions is treated as a "canceling" of the button press in most user interfaces, so it is usually better to use the ',
                                                ' event unless we know that the ',
                                                ' event is preferable for a particular situation.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '<div id="target">
  Click here
</div>
<div id="other">
  Trigger the handler
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).mousedown(function() {
  alert( "Handler for .mousedown() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).mousedown();
});
    '
                                 }
                               ],
                        'figure' => {
                                    'figcaption' => 'Figure 1 - Illustration of the rendered HTML',
                                    'img' => {
                                             'src' => '/resources/0042_05_01.png',
                                             'alt' => ''
                                           }
                                  }
                      },
          'example' => {
                       'code' => '
$( "p" )
  .mouseup(function() {
    $( this ).append( "<span style=\'color:#f00;\'>Mouse up.</span>" );
  })
  .mousedown(function() {
    $( this ).append( "<span style=\'color:#00f;\'>Mouse down.</span>" );
  });
',
                       'html' => '
<p>Press mouse and release here.</p>
',
                       'desc' => 'Show texts when mouseup and mousedown event triggering.'
                     },
          'type' => 'method',
          'name' => 'mousedown',
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'signature' => [
                         {
                           'argument' => {
                                         'name' => 'handler',
                                         'type' => 'Function',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      },
                                         'handler' => {
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/mouseenter.xml ####
Possible keys are: title return desc note longdesc example name type category signature
$VAR1 = {
          'title' => '.mouseenter()',
          'return' => 'jQuery',
          'desc' => 'Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.',
          'note' => {
                    'data-event' => 'mouseenter',
                    'type' => 'additional',
                    'id' => 'detach-shorthand'
                  },
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div id="outer">
  Outer
  <div id="inner">
    Inner
  </div>
</div>
<div id="other">
  Trigger the handler
</div>
<div id="log"></div>'
                                 },
                                 {
                                   'code' => '
$( "#outer" ).mouseenter(function() {
  $( "#log" ).append( "<div>Handler for .mouseenter() called.</div>" );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#outer" ).mouseenter();
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "mouseenter", handler )',
                                           '.trigger( "mouseenter" )'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' JavaScript event is proprietary to Internet Explorer. Because of the event\'s general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.'
                                              ],
                                 'code' => 'mouseenter'
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to any element:',
                               {
                                 'content' => [
                                                'Now when the mouse pointer moves over the ',
                                                ', the message is appended to ',
                                                '. You can also trigger the event when another element is clicked:'
                                              ],
                                 'code' => [
                                           '<div>',
                                           '<div id="log">'
                                         ],
                                 'samp' => 'Outer'
                               },
                               {
                                 'samp' => 'Trigger the handler',
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also append the message.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event differs from ',
                                                ' in the way it handles event bubbling. If ',
                                                ' were used in this example, then when the mouse pointer moved over the ',
                                                ' element, the handler would be triggered. This is usually undesirable behavior. The ',
                                                ' event, on the other hand, only triggers its handler when the mouse enters the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse enters the ',
                                                ' element, but not the ',
                                                ' element.'
                                              ],
                                 'samp' => [
                                           'Inner',
                                           'Outer',
                                           'Inner'
                                         ],
                                 'code' => [
                                           'mouseenter',
                                           'mouseover',
                                           'mouseover',
                                           'mouseenter'
                                         ]
                               }
                             ],
                        'figure' => {
                                    'img' => {
                                             'src' => '/resources/0042_05_08.png',
                                             'alt' => ''
                                           },
                                    'figcaption' => 'Figure 1 - Illustration of the rendered HTML'
                                  }
                      },
          'example' => {
                       'code' => '
var i = 0;
$( "div.overout" )
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
    $( "p:last", this ).text( ++i );
  })
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
    $( "p:last", this ).text( ++n );
  })
  .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
  });
',
                       'desc' => {
                                 'code' => [
                                           'mouseover',
                                           'mouseenter'
                                         ],
                                 'content' => [
                                                'Show texts when mouseenter and mouseout event triggering.
    ',
                                                ' fires when the pointer moves into the child element as well, while ',
                                                ' fires only when the pointer moves into the bound element.'
                                              ]
                               },
                       'html' => '
<div class="out overout">
  <p>move your mouse</p>
  <div class="in overout"><p>move your mouse</p><p>0</p></div>
  <p>0</p>
</div>

<div class="out enterleave">
  <p>move your mouse</p>
  <div class="in enterleave"><p>move your mouse</p><p>0</p></div>
  <p>0</p>
</div>
',
                       'css' => '
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }
'
                     },
          'name' => 'mouseenter',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'name' => 'handler',
                                         'type' => 'Function',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       }
                         },
                         {
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  }
                                                    },
                                         'eventData' => {
                                                        'optional' => 'true',
                                                        'type' => 'Anything',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/mouseleave.xml ####
Possible keys are: signature category name type longdesc example note desc return title
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'argument' => {
                                         'handler' => {
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    },
                                         'eventData' => {
                                                        'optional' => 'true',
                                                        'type' => 'Anything',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'name' => 'mouseleave',
          'type' => 'method',
          'longdesc' => {
                        'figure' => {
                                    'figcaption' => 'Figure 1 - Illustration of the rendered HTML',
                                    'img' => {
                                             'src' => '/resources/0042_05_09.png',
                                             'alt' => ''
                                           }
                                  },
                        'pre' => [
                                 {
                                   'code' => '
<div id="outer">
  Outer
  <div id="inner">
    Inner
  </div>
</div>
<div id="other">
  Trigger the handler
</div>
<div id="log"></div>'
                                 },
                                 {
                                   'code' => '
$( "#outer" ).mouseleave(function() {
  $( "#log" ).append( "<div>Handler for .mouseleave() called.</div>" );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#outer" ).mouseleave();
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.on(\'mouseleave\', handler)',
                                           '.trigger(\'mouseleave\')'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' JavaScript event is proprietary to Internet Explorer. Because of the event\'s general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.'
                                              ],
                                 'code' => 'mouseleave'
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to any element:',
                               {
                                 'content' => [
                                                'Now when the mouse pointer moves out of the ',
                                                ', the message is appended to ',
                                                '. You can also trigger the event when another element is clicked:'
                                              ],
                                 'code' => [
                                           '<div>',
                                           '<div id="log">'
                                         ],
                                 'samp' => 'Outer'
                               },
                               {
                                 'samp' => 'Trigger the handler',
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also append the message.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event differs from ',
                                                ' in the way it handles event bubbling. If ',
                                                ' were used in this example, then when the mouse pointer moved out of the ',
                                                ' element, the handler would be triggered. This is usually undesirable behavior. The ',
                                                ' event, on the other hand, only triggers its handler when the mouse leaves the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse leaves the ',
                                                ' element, but not the ',
                                                ' element.'
                                              ],
                                 'samp' => [
                                           'Inner',
                                           'Outer',
                                           'Inner'
                                         ],
                                 'code' => [
                                           'mouseleave',
                                           'mouseout',
                                           'mouseout',
                                           'mouseleave'
                                         ]
                               }
                             ]
                      },
          'example' => {
                       'desc' => {
                                 'content' => [
                                                'Show number of times mouseout and mouseleave events are triggered. ',
                                                ' fires when the pointer moves out of child element as well, while ',
                                                ' fires only when the pointer moves out of the bound element.'
                                              ],
                                 'code' => [
                                           'mouseout',
                                           'mouseleave'
                                         ]
                               },
                       'html' => '
<div class="out overout">
  <p>move your mouse</p>
  <div class="in overout"><p>move your mouse</p><p>0</p></div>
  <p>0</p>
</div>
<div class="out enterleave">
  <p>move your mouse</p>
  <div class="in enterleave"><p>move your mouse</p><p>0</p></div>
  <p>0</p>
</div>
',
                       'css' => '
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }
',
                       'code' => '
var i = 0;
$( "div.overout" )
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
  })
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
  })
  .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
  });
'
                     },
          'note' => {
                    'type' => 'additional',
                    'id' => 'detach-shorthand',
                    'data-event' => 'mouseleave'
                  },
          'desc' => 'Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.',
          'return' => 'jQuery',
          'title' => '.mouseleave()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/mousemove.xml ####
Possible keys are: return title desc note type name example longdesc category signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.mousemove()',
          'desc' => 'Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'data-event' => 'mousemove',
                    'id' => 'detach-shorthand',
                    'type' => 'additional'
                  },
          'type' => 'method',
          'name' => 'mousemove',
          'example' => {
                       'html' => '
<p>
  <span>Move the mouse over the div.</span>
  <span>&nbsp;</span>
</p>
<div></div>
',
                       'desc' => 'Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.',
                       'css' => '
  div {
    width: 220px;
    height: 170px;
    margin: 10px 50px 10px 10px;
    background: yellow;
    border: 2px groove;
    float: right;
  }
  p {
    margin: 0;
    margin-left: 10px;
    color: red;
    width: 220px;
    height: 120px;
    padding-top: 70px;
    float: left;
    font-size: 14px;
  }
  span {
    display: block;
  }
',
                       'height' => '300',
                       'code' => '
$( "div" ).mousemove(function( event ) {
  var pageCoords = "( " + event.pageX + ", " + event.pageY + " )";
  var clientCoords = "( " + event.clientX + ", " + event.clientY + " )";
  $( "span:first" ).text( "( event.pageX, event.pageY ) : " + pageCoords );
  $( "span:last" ).text( "( event.clientX, event.clientY ) : " + clientCoords );
});
'
                     },
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div id="target">
  Move here
</div>
<div id="other">
  Trigger the handler
</div>
<div id="log"></div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).mousemove(function( event ) {
  var msg = "Handler for .mousemove() called at ";
  msg += event.pageX + ", " + event.pageY;
  $( "#log" ).append( "<div>" + msg + "</div>" );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).mousemove();
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "mousemove", handler )',
                                           '.trigger( "mousemove" )'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ]
                               },
                               {
                                 'code' => 'mousemove',
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the mouse pointer moves inside the element. Any HTML element can receive this event.'
                                              ]
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to the target:',
                               'Now when the mouse pointer moves within the target button, the messages are appended to <div id="log">:',
                               {
                                 'samp' => [
                                           'Handler for .mousemove() called at (399, 48)',
                                           'Handler for .mousemove() called at (398, 46)',
                                           'Handler for .mousemove() called at (397, 44)',
                                           'Handler for .mousemove() called at (396, 42)'
                                         ],
                                 'br' => [
                                         {},
                                         {},
                                         {},
                                         {}
                                       ]
                               },
                               {
                                 'code' => '.mousemove()',
                                 'content' => [
                                                'To trigger the event manually, apply ',
                                                ' without an argument:'
                                              ]
                               },
                               'After this code executes, clicks on the Trigger button will also append the message:',
                               {
                                 'samp' => 'Handler for .mousemove() called at (undefined, undefined)'
                               },
                               {
                                 'code' => [
                                           '.clientX',
                                           '.offsetX',
                                           '.pageX',
                                           '.pageX',
                                           '.pageY'
                                         ],
                                 'content' => [
                                                'When tracking mouse movement, you usually need to know the actual position of the mouse pointer. The event object that is passed to the handler contains some information about the mouse coordinates. Properties such as ',
                                                ', ',
                                                ', and ',
                                                ' are available, but support for them differs between browsers. Fortunately, jQuery normalizes the ',
                                                ' and ',
                                                ' properties so that they can be used in all browsers. These properties provide the X and Y coordinates of the mouse pointer relative to the top-left corner of the document, as illustrated in the example output above.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'mousemove',
                                           'mousemove '
                                         ],
                                 'content' => [
                                                'Keep in mind that the ',
                                                ' event is triggered whenever the mouse pointer moves, even for a pixel. This means that hundreds of events can be generated over a very small amount of time. If the handler has to do any significant processing, or if multiple handlers for the event exist, this can be a serious performance drain on the browser. It is important, therefore, to optimize ',
                                                'handlers as much as possible, and to unbind them as soon as they are no longer needed.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'mousemove',
                                           'mousedown',
                                           'mouseup',
                                           'mouseup',
                                           'mousemove',
                                           'mouseup',
                                           '<body>'
                                         ],
                                 'content' => [
                                                'A common pattern is to bind the ',
                                                ' handler from within a ',
                                                ' hander, and to unbind it from a corresponding ',
                                                ' handler. If implementing this sequence of events, remember that the ',
                                                ' event might be sent to a different HTML element than the ',
                                                ' event was. To account for this, the ',
                                                ' handler should typically be bound to an element high up in the DOM tree, such as ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'signature' => [
                         {
                           'argument' => {
                                         'desc' => 'A function to execute each time the event is triggered.',
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     }
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'handler' => {
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'type' => 'Function',
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    },
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/mouseout.xml ####
Possible keys are: desc note title return signature longdesc example type name category
$VAR1 = {
          'desc' => 'Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'id' => 'detach-shorthand',
                    'type' => 'additional',
                    'data-event' => 'mouseout'
                  },
          'title' => '.mouseout()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'argument' => {
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  }
                                                    },
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "mouseout", handler )',
                                           '.trigger( "mouseout" )'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variation, and ',
                                                ' in the third.'
                                              ]
                               },
                               {
                                 'code' => 'mouseout',
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.'
                                              ]
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to any element:',
                               {
                                 'content' => [
                                                'Now when the mouse pointer moves out of the ',
                                                ', the message is appended to ',
                                                '. To trigger the event manually, apply ',
                                                ' without an argument::'
                                              ],
                                 'samp' => 'Outer',
                                 'code' => [
                                           '<div>',
                                           '<div id="log">',
                                           '.mouseout()'
                                         ]
                               },
                               {
                                 'samp' => 'Trigger the handler',
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also append the message.'
                                              ]
                               },
                               {
                                 'samp' => [
                                           'Inner',
                                           'Outer'
                                         ],
                                 'code' => [
                                           'mouseout',
                                           'mouseout',
                                           {
                                             'content' => [
                                                            '.',
                                                            '()'
                                                          ],
                                             'a' => {
                                                    'href' => '/mouseleave/',
                                                    'content' => 'mouseleave'
                                                  }
                                           }
                                         ],
                                 'content' => [
                                                'This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves out of the ',
                                                ' element in this example, a ',
                                                ' event will be sent to that, then trickle up to ',
                                                '. This can trigger the bound ',
                                                ' handler at inopportune times. See the discussion for ',
                                                ' for a useful alternative.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div id="outer">
  Outer
  <div id="inner">
    Inner
  </div>
</div>
<div id="other">
  Trigger the handler
</div>
<div id="log"></div>
    '
                                 },
                                 {
                                   'code' => '
$( "#outer" ).mouseout(function() {
  $( "#log" ).append( "Handler for .mouseout() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#outer" ).mouseout();
});
    '
                                 }
                               ],
                        'figure' => {
                                    'img' => {
                                             'src' => '/resources/0042_05_07.png',
                                             'alt' => ''
                                           },
                                    'figcaption' => 'Figure 1 - Illustration of the rendered HTML'
                                  }
                      },
          'example' => {
                       'css' => '
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }
',
                       'html' => '
<div class="out overout">
  <p>move your mouse</p>
  <div class="in overout"><p>move your mouse</p><p>0</p></div>
  <p>0</p>
</div>

<div class="out enterleave">
  <p>move your mouse</p>
  <div class="in enterleave"><p>move your mouse</p><p>0</p></div>
  <p>0</p>
</div>
',
                       'desc' => {
                                 'code' => [
                                           'mouseout',
                                           'mouseleave'
                                         ],
                                 'content' => [
                                                'Show the number of times mouseout and mouseleave events are triggered.
  ',
                                                ' fires when the pointer moves out of the child element as well, while ',
                                                ' fires only when the pointer moves out of the bound element.'
                                              ]
                               },
                       'code' => '
var i = 0;
$( "div.overout" )
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
  })
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
  });

var n = 0;
$( "div.enterleave" )
  .on( "mouseenter", function() {
    $( "p:first", this ).text( "mouse enter" );
  })
  .on( "mouseleave", function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
  });
'
                     },
          'type' => 'method',
          'name' => 'mouseout',
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/mouseover.xml ####
Possible keys are: signature category name type example longdesc desc note return title
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'desc' => 'A function to execute each time the event is triggered.',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'type' => 'Function',
                                         'name' => 'handler'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'argument' => {
                                         'eventData' => {
                                                        'optional' => 'true',
                                                        'type' => 'Anything',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      },
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'type' => 'Function'
                                                    }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'name' => 'mouseover',
          'type' => 'method',
          'example' => {
                       'code' => '
var i = 0;
$( "div.overout" )
  .mouseover(function() {
    i += 1;
    $( this ).find( "span" ).text( "mouse over x " + i );
  })
  .mouseout(function() {
    $( this ).find( "span" ).text( "mouse out " );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    n += 1;
    $( this ).find( "span" ).text( "mouse enter x " + n );
  })
  .mouseleave(function() {
    $( this ).find( "span" ).text( "mouse leave" );
  });
',
                       'desc' => {
                                 'code' => [
                                           'mouseover',
                                           'mouseenter'
                                         ],
                                 'content' => [
                                                'Show the number of times mouseover and mouseenter events are triggered.
',
                                                ' fires when the pointer moves into the child element as well, while ',
                                                ' fires only when the pointer moves into the bound element.'
                                              ]
                               },
                       'html' => '
<div class="out overout">
  <span>move your mouse</span>
  <div class="in">
  </div>
</div>

<div class="out enterleave">
  <span>move your mouse</span>
  <div class="in">
  </div>
</div>
',
                       'css' => '
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }
'
                     },
          'longdesc' => {
                        'figure' => {
                                    'figcaption' => 'Figure 1 - Illustration of the rendered HTML',
                                    'img' => {
                                             'alt' => '',
                                             'src' => '/resources/0042_05_06.png'
                                           }
                                  },
                        'pre' => [
                                 {
                                   'code' => '
<div id="outer">
  Outer
  <div id="inner">
    Inner
  </div>
</div>
<div id="other">
  Trigger the handler
</div>
<div id="log"></div>
    '
                                 },
                                 {
                                   'code' => '
$( "#outer" ).mouseover(function() {
  $( "#log" ).append( "<div>Handler for .mouseover() called.</div>" );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#outer" ).mouseover();
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ],
                                 'code' => [
                                           '.on( "mouseover", handler )',
                                           '.trigger( "mouseover" )'
                                         ]
                               },
                               {
                                 'code' => 'mouseover',
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.'
                                              ]
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to any element:',
                               {
                                 'content' => [
                                                'Now when the mouse pointer moves over the ',
                                                ', the message is appended to ',
                                                '. We can also trigger the event when another element is clicked:'
                                              ],
                                 'samp' => 'Outer',
                                 'code' => [
                                           '<div>',
                                           '<div id="log">'
                                         ]
                               },
                               {
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also append the message.'
                                              ],
                                 'samp' => 'Trigger the handler'
                               },
                               {
                                 'samp' => [
                                           'Inner',
                                           'Outer'
                                         ],
                                 'code' => [
                                           'mouseover',
                                           'mouseover',
                                           '.mouseenter()'
                                         ],
                                 'content' => [
                                                'This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the ',
                                                ' element in this example, a ',
                                                ' event will be sent to that, then trickle up to ',
                                                '. This can trigger our bound ',
                                                ' handler at inopportune times. See the discussion for ',
                                                ' for a useful alternative.'
                                              ]
                               }
                             ]
                      },
          'desc' => 'Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'data-event' => 'mouseover',
                    'type' => 'additional',
                    'id' => 'detach-shorthand'
                  },
          'return' => 'jQuery',
          'title' => '.mouseover()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/mouseup.xml ####
Possible keys are: category example longdesc name type signature title return desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'example' => {
                       'html' => '
<p>Press mouse and release here.</p>
',
                       'desc' => 'Show texts when mouseup and mousedown event triggering.',
                       'code' => '
$( "p" )
  .mouseup(function() {
    $( this ).append( "<span style=\'color:#f00;\'>Mouse up.</span>" );
  })
  .mousedown(function() {
    $( this ).append( "<span style=\'color:#00f;\'>Mouse down.</span>" );
  });
'
                     },
          'longdesc' => {
                        'figure' => {
                                    'figcaption' => 'Figure 1 - Illustration of the rendered HTML',
                                    'img' => {
                                             'src' => '/resources/0042_05_02.png',
                                             'alt' => ''
                                           }
                                  },
                        'pre' => [
                                 {
                                   'code' => '
<div id="target">
  Click here
</div>
<div id="other">
  Trigger the handler
</div>
'
                                 },
                                 {
                                   'code' => '
$( "#target" ).mouseup(function() {
  alert( "Handler for .mouseup() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).mouseup();
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.on(\'mouseup\', handler)',
                                           '.trigger(\'mouseup\')'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first variation, and ',
                                                ' in the second.'
                                              ]
                               },
                               {
                                 'code' => 'mouseup',
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.'
                                              ]
                               },
                               'For example, consider the HTML:',
                               {
                                 'code' => '<div>',
                                 'content' => [
                                                'The event handler can be bound to any ',
                                                ':'
                                              ]
                               },
                               'Now if we click on this element, the alert is displayed:',
                               {
                                 'samp' => 'Handler for .mouseup() called.'
                               },
                               'We can also trigger the event when a different element is clicked:',
                               {
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also alert the message.'
                                              ],
                                 'samp' => 'Trigger the handler'
                               },
                               {
                                 'content' => [
                                                'If the user clicks outside an element, drags onto it, and releases the button, this is still counted as a ',
                                                ' event. This sequence of actions is not treated as a button press in most user interfaces, so it is usually better to use the ',
                                                ' event unless we know that the ',
                                                ' event is preferable for a particular situation.'
                                              ],
                                 'code' => [
                                           'mouseup',
                                           'click',
                                           'mouseup'
                                         ]
                               }
                             ]
                      },
          'name' => 'mouseup',
          'type' => 'method',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'desc' => 'A function to execute each time the event is triggered.',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'type' => 'Function',
                                         'name' => 'handler'
                                       }
                         },
                         {
                           'argument' => {
                                         'eventData' => {
                                                        'type' => 'Anything',
                                                        'optional' => 'true',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      },
                                         'handler' => {
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'type' => 'Function',
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'title' => '.mouseup()',
          'return' => 'jQuery',
          'desc' => 'Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'detach-shorthand',
                    'data-event' => 'mouseup'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/multiple-attribute-selector.xml ####
Possible keys are: desc sample return title signature category type name example longdesc
$VAR1 = {
          'desc' => 'Matches elements that match all of the specified attribute filters.',
          'sample' => '[attributeFilter1][attributeFilter2][attributeFilterN]',
          'return' => '',
          'title' => 'Multiple Attribute Selector [name="value"][name2="value2"]',
          'signature' => {
                         'argument' => {
                                       'attributeFilter1' => {
                                                             'desc' => 'An attribute filter.',
                                                             'type' => 'Selector'
                                                           },
                                       'attributeFilterN' => {
                                                             'optional' => 'true',
                                                             'type' => 'Selector',
                                                             'desc' => 'As many more attribute filters as necessary'
                                                           },
                                       'attributeFilter2' => {
                                                             'type' => 'Selector',
                                                             'desc' => 'Another attribute filter, reducing the selection even more'
                                                           }
                                     },
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/attribute-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'selector',
          'name' => 'attributeMultiple',
          'example' => {
                       'code' => '
$( "input[id][name$=\'man\']" ).val( "only this one" );
',
                       'desc' => 'Finds all inputs that have an id attribute and whose name attribute ends with man and sets the value.',
                       'html' => '
<input id="man-news" name="man-news">
<input name="milkman">
<input id="letterman" name="new-letterman">
<input name="newmilk">
'
                     },
          'longdesc' => {}
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/multiple-selector.xml ####
Possible keys are: type name longdesc example category signature sample return title desc
$VAR1 = {
          'type' => 'selector',
          'name' => 'multiple',
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'You can specify any number of selectors to combine into a single result.  This multiple expression combinator is an efficient way to select disparate elements. The order of the DOM elements in the returned jQuery object may not be identical, as they will be in document order. An alternative to this combinator is the .',
                                              ' method.'
                                            ],
                               'a' => {
                                      'href' => '/add/',
                                      'content' => 'add()'
                                    }
                             }
                      },
          'example' => [
                       {
                         'code' => '
$( "div, span, p.myClass" ).css( "border", "3px solid red" );
',
                         'css' => '
  div, span, p {
    width: 126px;
    height: 60px;
    float: left;
    padding: 3px;
    margin: 2px;
    background-color: #eee;
    font-size: 14px;
  }
',
                         'html' => '
<div>div</div>
<p class="myClass">p class="myClass"</p>
<p class="notMyClass">p class="notMyClass"</p>
<span>span</span>
',
                         'desc' => 'Finds the elements that match any of these three selectors.'
                       },
                       {
                         'desc' => 'Show the order in the jQuery object.',
                         'html' => '
<span>span</span>
<p>p</p>
<p>p</p>
<div>div</div>
<span>span</span>
<p>p</p>
<div>div</div>
<b></b>
',
                         'css' => '
  b {
    color: red;
    font-size: 16px;
    display: block;
    clear:left;
  }
  div, span, p {
    width: 40px;
    height: 40px;
    float: left;
    margin: 10px;
    background-color: blue;
    padding: 3px;
    color: white;
  }
',
                         'code' => '
var list = $( "div, p, span" )
  .map( function() {
    return this.tagName;
  })
  .get()
  .join( ", " );
$( "b" ).append( document.createTextNode( list ) );
'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'selectors/basic-css-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'selector1' => {
                                                      'type' => 'Selector',
                                                      'desc' => 'Any valid selector.'
                                                    },
                                       'selector2' => {
                                                      'desc' => 'Another valid selector.',
                                                      'type' => 'Selector'
                                                    },
                                       'selectorN' => {
                                                      'desc' => 'As many more valid selectors as you like.',
                                                      'type' => 'Selector',
                                                      'optional' => 'true'
                                                    }
                                     }
                       },
          'sample' => 'selector1, selector2, selectorN',
          'return' => '',
          'title' => 'Multiple Selector ("selector1, selector2, selectorN")',
          'desc' => 'Selects the combined results of all the specified selectors.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/next-adjacent-selector.xml ####
Possible keys are: signature category longdesc example type name desc title sample return
$VAR1 = {
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'prev' => {
                                                 'type' => 'Selector',
                                                 'desc' => 'Any valid selector.'
                                               },
                                       'next' => {
                                                 'desc' => 'A selector to match the element that is next to the first selector.',
                                                 'type' => 'Selector'
                                               }
                                     }
                       },
          'category' => [
                        {
                          'slug' => 'selectors/hierarchy-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'longdesc' => {
                        'p' => {
                               'code' => [
                                         'prev + next',
                                         'prev ~ siblings'
                                       ],
                               'content' => [
                                              'One important point to consider with both the next adjacent sibling selector (',
                                              ') and the general sibling selector (',
                                              ') is that the elements on either side of the combinator must share the same parent.'
                                            ]
                             }
                      },
          'example' => {
                       'desc' => 'Finds all inputs that are next to a label.',
                       'html' => '
<form>
  <label for="name">Name:</label>
  <input name="name" id="name">
  <fieldset>
    <label for="newsletter">Newsletter:</label>
    <input name="newsletter" id="newsletter">
  </fieldset>
</form>
<input name="none">
',
                       'code' => '
$( "label + input" ).css( "color", "blue" ).val( "Labeled!" );
'
                     },
          'type' => 'selector',
          'name' => 'next adjacent',
          'desc' => 'Selects all next elements matching "next" that are immediately preceded by a sibling "prev".',
          'title' => 'Next Adjacent Selector ("prev + next")',
          'sample' => 'prev + next',
          'return' => ''
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/next-siblings-selector.xml ####
Possible keys are: signature category name type example longdesc desc sample return title
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'prev' => {
                                                 'type' => 'Selector',
                                                 'desc' => 'Any valid selector.'
                                               },
                                       'siblings' => {
                                                     'desc' => 'A selector to filter elements that are the following siblings of the first selector.',
                                                     'type' => 'Selector'
                                                   }
                                     },
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/hierarchy-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'next siblings',
          'type' => 'selector',
          'example' => {
                       'code' => '
$( "#prev ~ div" ).css( "border", "3px groove blue" );
',
                       'css' => '
  div, span {
    display: block;
    width: 80px;
    height: 80px;
    margin: 5px;
    background: #bfa;
    float: left;
    font-size: 14px;
  }
  div#small {
    width: 60px;
    height: 25px;
    font-size: 12px;
    background: #fab;
  }
',
                       'html' => '
<div>div (doesn\'t match since before #prev)</div>
<span id="prev">span#prev</span>
<div>div sibling</div>
<div>div sibling <div id="small">div niece</div></div>
<span>span sibling (not div)</span>
<div>div sibling</div>
',
                       'desc' => 'Finds all divs that are siblings after the element with #prev as its id.  Notice the span isn\'t selected since it is not a div and the "niece" isn\'t selected since it is a child of a sibling, not an actual sibling.'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The notable difference between (',
                                              ') and (',
                                              ') is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.'
                                            ],
                               'code' => [
                                         'prev + next',
                                         'prev ~ siblings'
                                       ]
                             }
                      },
          'desc' => 'Selects all sibling elements that follow after the "prev" element, have the same parent, and match the filtering "siblings" selector.',
          'sample' => 'prev ~ siblings',
          'return' => '',
          'title' => 'Next Siblings Selector ("prev ~ siblings")'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/next.xml ####
Possible keys are: desc return title signature name type longdesc example category
$VAR1 = {
          'desc' => 'Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.',
          'return' => 'jQuery',
          'title' => '.next()',
          'signature' => {
                         'argument' => {
                                       'desc' => 'A string containing a selector expression to match elements against.',
                                       'name' => 'selector',
                                       'type' => 'Selector',
                                       'optional' => 'true'
                                     },
                         'added' => '1.0'
                       },
          'name' => 'next',
          'type' => 'method',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li class="third-item">list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.third-item" ).next().css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method allows us to search through the immediately following sibling of these elements in the DOM tree and construct a new jQuery object from the matching elements.'
                                              ],
                                 'code' => '.next()'
                               },
                               {
                                 'code' => '$()',
                                 'content' => [
                                                'The method optionally accepts a selector expression of the same type that we can pass to the ',
                                                ' function. If the immediately following sibling matches the selector, it remains in the newly constructed jQuery object; otherwise, it is excluded.'
                                              ]
                               },
                               'Consider a page with a simple list on it:',
                               'If we begin at the third item, we can find the element which comes just after it:',
                               'The result of this call is a red background behind item 4. Since we do not supply a selector expression, this following element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.'
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "button[disabled]" ).next().text( "this button is disabled" );
',
                         'desc' => 'Find the very next sibling of each disabled button and change its text "this button is disabled".',
                         'html' => '
<div><button disabled="disabled">First</button> - <span></span></div>
<div><button>Second</button> - <span></span></div>
<div><button disabled="disabled">Third</button> - <span></span></div>
',
                         'css' => '
  span {
    color: blue;
    font-weight: bold;
  }
  button {
    width: 100px;
  }
'
                       },
                       {
                         'desc' => 'Find the very next sibling of each paragraph. Keep only the ones with a class "selected".',
                         'html' => '
<p>Hello</p>
<p class="selected">Hello Again</p>
<div><span>And Again</span></div>
',
                         'code' => '
$( "p" ).next( ".selected" ).css( "background", "yellow" );
'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/nextAll.xml ####
Possible keys are: return title desc type name example longdesc category signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.nextAll()',
          'desc' => 'Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.',
          'type' => 'method',
          'name' => 'nextAll',
          'example' => [
                       {
                         'height' => '150',
                         'code' => '
$( "div:first" ).nextAll().addClass( "after" );
',
                         'desc' => 'Locate all the divs after the first and give them a class.',
                         'html' => '
<div>first</div>
<div>sibling<div>child</div></div>
<div>sibling</div>
<div>sibling</div>',
                         'css' => '
  div {
    width: 80px;
    height: 80px;
    background: #abc;
    border: 2px solid black;
    margin: 10px;
    float: left;
  }
  div.after {
    border-color: red;
  }
'
                       },
                       {
                         'css' => '
  div, p {
    width: 60px;
    height: 60px;
    background: #abc;
    border: 2px solid black;
    margin: 10px;
    float: left;
  }
  .after {
    border-color: red;
  }
',
                         'html' => '
<p>p</p>
<div>div</div>
<p>p</p>
<p>p</p>
<div>div</div>
<p>p</p>
<div>div</div>
',
                         'desc' => 'Locate all the paragraphs after the second child in the body and give them a class.',
                         'code' => '
$( ":nth-child(1)" ).nextAll( "p" ).addClass( "after" );
',
                         'height' => '200'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li class="third-item">list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.third-item" ).nextAll().css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => '.nextAll()',
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method allows us to search through the successors of these elements in the DOM tree and construct a new jQuery object from the matching elements.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The method optionally accepts a selector expression of the same type that we can pass to the ',
                                                ' function. If the selector is supplied, the elements will be filtered by testing whether they match it.'
                                              ],
                                 'code' => '$()'
                               },
                               'Consider a page with a simple list on it:',
                               'If we begin at the third item, we can find the elements which come after it:',
                               'The result of this call is a red background behind items 4 and 5. Since we do not supply a selector expression, these following elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.'
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'signature' => {
                         'added' => '1.2',
                         'argument' => {
                                       'desc' => 'A string containing a selector expression to match elements against.',
                                       'type' => 'String',
                                       'name' => 'selector',
                                       'optional' => 'true'
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/nextUntil.xml ####
Possible keys are: signature category type name longdesc example desc return title
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'selector' => {
                                                       'desc' => 'A string containing a selector expression to indicate where to stop matching following sibling elements.',
                                                       'optional' => 'true',
                                                       'type' => 'Selector'
                                                     },
                                         'filter' => {
                                                     'optional' => 'true',
                                                     'type' => 'Selector',
                                                     'desc' => 'A string containing a selector expression to match elements against.'
                                                   }
                                       },
                           'added' => '1.4'
                         },
                         {
                           'added' => '1.6',
                           'argument' => {
                                         'element' => {
                                                      'desc' => 'A DOM node or jQuery object indicating where to stop matching following sibling elements.',
                                                      'optional' => 'true',
                                                      'type' => {
                                                                'Element' => {},
                                                                'jQuery' => {}
                                                              }
                                                    },
                                         'filter' => {
                                                     'type' => 'Selector',
                                                     'optional' => 'true',
                                                     'desc' => 'A string containing a selector expression to match elements against.'
                                                   }
                                       }
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.4'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ],
          'type' => 'method',
          'name' => 'nextUntil',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.nextUntil()',
                                           '.nextUntil()'
                                         ],
                                 'content' => [
                                                'Given a selector expression that represents a set of DOM elements, the ',
                                                ' method searches through the successors of these elements in the DOM tree, stopping when it reaches an element matched by the method\'s argument. The new jQuery object that is returned contains all following siblings up to but not including the one matched by the ',
                                                ' argument.'
                                              ]
                               },
                               {
                                 'code' => '.nextAll()',
                                 'content' => [
                                                'If the selector is not matched or is not supplied, all following siblings will be selected; in these cases it selects the same elements as the ',
                                                ' method does when no filter selector is provided.'
                                              ]
                               },
                               {
                                 'strong' => 'As of jQuery 1.6',
                                 'content' => [
                                                ', A DOM node or jQuery object, instead of a selector, may be passed to the ',
                                                ' method.'
                                              ],
                                 'code' => '.nextUntil()'
                               },
                               'The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.'
                             ]
                      },
          'example' => {
                       'desc' => 'Find the siblings that follow <dt id="term-2"> up to the next <dt> and give them a red background color. Also, find <dd> siblings that follow <dt id="term-1"> up to <dt id="term-3"> and give them a green text color. ',
                       'html' => '
<dl>
  <dt id="term-1">term 1</dt>
  <dd>definition 1-a</dd>
  <dd>definition 1-b</dd>
  <dd>definition 1-c</dd>
  <dd>definition 1-d</dd>
  <dt id="term-2">term 2</dt>
  <dd>definition 2-a</dd>
  <dd>definition 2-b</dd>
  <dd>definition 2-c</dd>
  <dt id="term-3">term 3</dt>
  <dd>definition 3-a</dd>
  <dd>definition 3-b</dd>
</dl>
',
                       'height' => '250px',
                       'code' => '
$( "#term-2" )
  .nextUntil( "dt" )
    .css( "background-color", "red" );
var term3 = document.getElementById( "term-3" );
$( "#term-1" )
  .nextUntil( term3, "dd" )
    .css( "color", "green" );
'
                     },
          'desc' => 'Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.',
          'return' => 'jQuery',
          'title' => '.nextUntil()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/not-selector.xml ####
Possible keys are: category name type longdesc example signature sample return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'not',
          'type' => 'selector',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'All selectors are accepted inside ',
                                                ',  for example: ',
                                                ' and ',
                                                '.'
                                              ],
                                 'code' => [
                                           ':not()',
                                           ':not(div a)',
                                           ':not(div,a)'
                                         ]
                               },
                               {
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/not/',
                                                    'content' => '.not()'
                                                  }
                                           },
                                           ':not()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method will end up providing you with more readable selections than pushing complex selectors or variables into a ',
                                                ' selector filter. In most cases, it is a better choice.'
                                              ]
                               }
                             ],
                        'h3' => 'Additional Notes'
                      },
          'example' => {
                       'desc' => 'Finds all inputs that are not checked and highlights the next sibling span.  Notice there is no change when clicking the checkboxes since no click events have been linked.',
                       'html' => '
<div>
  <input type="checkbox" name="a">
  <span>Mary</span>
</div>
<div>
  <input type="checkbox" name="b">
  <span>lcm</span>
</div>
<div>
  <input type="checkbox" name="c" checked="checked">
  <span>Peter</span>
</div>
',
                       'code' => '
$( "input:not(:checked) + span" ).css( "background-color", "yellow" );
$( "input").attr( "disabled", "disabled" );
'
                     },
          'signature' => {
                         'argument' => {
                                       'name' => 'selector',
                                       'type' => 'Selector',
                                       'desc' => 'A selector with which to filter by.'
                                     },
                         'added' => '1.0'
                       },
          'sample' => ':not(selector)',
          'return' => '',
          'title' => ':not() Selector',
          'desc' => 'Selects all elements that do not match the given selector.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/not.xml ####
Possible keys are: desc title return signature longdesc example type name category
$VAR1 = {
          'desc' => 'Remove elements from the set of matched elements.',
          'title' => '.not()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'argument' => {
                                         'name' => 'selector',
                                         'type' => {
                                                   'Element' => {},
                                                   'Selector' => {},
                                                   'Array' => {}
                                                 },
                                         'desc' => 'A string containing a selector expression, a DOM element, or an array of elements to match against the set.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'desc' => {
                                                   'content' => [
                                                                  'A function used as a test for each element in the set. It accepts two arguments, ',
                                                                  ', which is the element\'s index in the jQuery collection, and ',
                                                                  ', which is the DOM element. Within the function, ',
                                                                  ' refers to the current DOM element.'
                                                                ],
                                                   'code' => [
                                                             'index',
                                                             'element',
                                                             'this'
                                                           ]
                                                 },
                                         'type' => 'Function',
                                         'return' => {
                                                     'type' => 'Boolean'
                                                   },
                                         'name' => 'function',
                                         'argument' => {
                                                       'element' => {
                                                                    'type' => 'Element'
                                                                  },
                                                       'index' => {
                                                                  'type' => 'Integer'
                                                                }
                                                     }
                                       }
                         },
                         {
                           'argument' => {
                                         'name' => 'selection',
                                         'type' => 'jQuery',
                                         'desc' => 'An existing jQuery object to match the current set of elements against.'
                                       },
                           'added' => '1.4'
                         }
                       ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don\'t match the selector will be included in the result.'
                                              ],
                                 'code' => '.not()'
                               },
                               'Consider a page with a simple list on it:',
                               'We can apply this method to the set of list items:',
                               'The result of this call is a red background for items 2 and 4, as they do not match the selector (recall that :even and :odd use 0-based indexing).',
                               {
                                 'content' => [
                                                'The second version of the ',
                                                ' method allows us to remove elements from the matched set, assuming we have found those elements previously by some other means. For example, suppose our list had an id applied to one of its items:'
                                              ],
                                 'code' => '.not()'
                               },
                               {
                                 'code' => 'getElementById()',
                                 'content' => [
                                                'We can fetch the third list item using the native JavaScript ',
                                                ' function, then remove it from a jQuery object:'
                                              ]
                               },
                               'This statement changes the color of items 1, 2, 4, and 5. We could have accomplished the same thing with a simpler jQuery expression, but this technique can be useful when, for example, other libraries provide references to plain DOM nodes.',
                               {
                                 'content' => [
                                                'As of jQuery 1.4, the ',
                                                ' method can take a function as its argument in the same way that ',
                                                ' does. Elements for which the function returns ',
                                                ' are excluded from the filtered set; all other elements are included.'
                                              ],
                                 'code' => [
                                           '.not()',
                                           '.filter()',
                                           'true'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li>list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).not( ":even" ).css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li id="notli">list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).not( document.getElementById( "notli" ) )
  .css( "background-color", "red" );
    '
                                 }
                               ],
                        'h4' => 'Removing Specific Elements'
                      },
          'example' => [
                       {
                         'code' => '
$( "div" ).not( ".green, #blueone" )
  .css( "border-color", "red" );
',
                         'desc' => 'Adds a border to divs that are not green or blue.',
                         'html' => '
<div></div>
<div id="blueone"></div>
<div></div>
<div class="green"></div>
<div class="green"></div>
<div class="gray"></div>
<div></div>
',
                         'css' => '
  div {
    width: 50px;
    height: 50px;
    margin: 10px;
    float: left;
    background: yellow;
    border: 2px solid white;
  }
  .green {
    background: #8f8;
  }
  .gray {
    background: #ccc;
  }
  #blueone {
    background: #99f;
  }
'
                       },
                       {
                         'desc' => 'Removes the element with the ID "selected" from the set of all paragraphs.',
                         'code' => '
$( "p" ).not( $( "#selected" )[ 0 ] );
'
                       },
                       {
                         'desc' => 'Removes the element with the ID "selected" from the set of all paragraphs.',
                         'code' => '
$( "p" ).not( "#selected" );
'
                       },
                       {
                         'desc' => 'Removes all elements that match "div p.selected" from the total set of all paragraphs.',
                         'code' => '
$( "p" ).not( $( "div p.selected" ) );
'
                       }
                     ],
          'type' => 'method',
          'name' => 'not',
          'category' => [
                        {
                          'slug' => 'traversing/filtering'
                        },
                        {
                          'slug' => 'traversing/miscellaneous-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/nth-child-selector.xml ####
Possible keys are: title return sample desc example longdesc name type category signature
$VAR1 = {
          'title' => ':nth-child() Selector',
          'return' => '',
          'sample' => ':nth-child(index/even/odd/equation)',
          'desc' => 'Selects all elements that are the nth-child of their parent.',
          'example' => [
                       {
                         'css' => '
  div {
    float: left;
  }
  span {
    color: blue;
  }
',
                         'html' => '
<div>
  <ul>
    <li>John</li>
    <li>Karl</li>
    <li>Brandon</li>
  </ul>
</div>
<div>
  <ul>
    <li>Sam</li>
  </ul>
</div>
<div>
  <ul>
    <li>Glen</li>
    <li>Tane</li>
    <li>Ralph</li>
    <li>David</li>
  </ul>
</div>
',
                         'desc' => 'Find the second li in each matched ul and note it.',
                         'code' => '
$( "ul li:nth-child(2)" ).append( "<span> - 2nd!</span>" );
'
                       },
                       {
                         'html' => '
<div>
  <button>:nth-child(even)</button>
  <button>:nth-child(odd)</button>
  <button>:nth-child(3n)</button>
  <button>:nth-child(2)</button>
</div>
<div>
  <button>:nth-child(3n+1)</button>
  <button>:nth-child(3n+2)</button>
  <button>:even</button>
  <button>:odd</button>
</div>

<div>
  <table>
    <tr><td>John</td></tr>
    <tr><td>Karl</td></tr>
    <tr><td>Brandon</td></tr>
    <tr><td>Benjamin</td></tr>
  </table>
</div>
<div>
  <table>
    <tr><td>Sam</td></tr>
  </table>
</div>
<div>
  <table>
    <tr><td>Glen</td></tr>
    <tr><td>Tane</td></tr>
    <tr><td>Ralph</td></tr>
    <tr><td>David</td></tr>
    <tr><td>Mike</td></tr>
    <tr><td>Dan</td></tr>
  </table>
</div>

<span>tr<span id="inner"></span></span>
',
                         'desc' => 'This is a playground to see how the selector works with different strings.  Notice that this is different from the :even and :odd which have no regard for parent and just filter the list of elements to every other one.  The :nth-child, however, counts the index of the child to its particular parent.  In any case, it\'s easier to see than explain so...',
                         'css' => '
  button {
    display: block;
    font-size: 12px;
    width: 100px;
  }
  div {
    float: left;
    margin: 10px;
    font-size: 10px;
    border: 1px solid black;
  }
  span {
    color: blue;
    font-size: 18px;
  }
  #inner {
    color: red;
  }
  td {
    width: 50px;
    text-align: center;
  }
',
                         'code' => '
$( "button" ).click(function() {
  var str = $( this ).text();
  $( "tr" ).css( "background", "white" );
  $( "tr" + str ).css( "background", "#ff0000" );
  $( "#inner" ).text( str );
});
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Because jQuery\'s implementation of ',
                                                ' selectors is strictly derived from the CSS specification, the value of ',
                                                ' is "1-indexed", meaning that the counting starts at 1. For other selector expressions such as ',
                                                ' or ',
                                                ' jQuery follows JavaScript\'s "0-indexed" counting. Given a single ',
                                                ' containing two ',
                                                's, ',
                                                ' selects the first ',
                                                ' while  ',
                                                ' selects the second.'
                                              ],
                                 'code' => [
                                           ':nth-',
                                           'n',
                                           ':eq()',
                                           ':even',
                                           '<ul>',
                                           '<li>',
                                           '$( "li:nth-child(1)" )',
                                           '<li>',
                                           '$( "li:eq(1)" )'
                                         ]
                               },
                               {
                                 'code' => [
                                           ':nth-child(n)',
                                           ':eq(n)',
                                           ':nth-child(n)',
                                           ':eq(n)'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' pseudo-class is easily confused with ',
                                                ', even though the two can result in dramatically different matched elements. With ',
                                                ', all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With ',
                                                ' only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'content' => 'W3C CSS specification',
                                        'href' => 'http://www.w3.org/TR/css3-selectors/#nth-child-pseudo'
                                      },
                                 'content' => [
                                                'Further discussion of this unusual usage can be found in the ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'name' => 'nth-child',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.1.4'
                        }
                      ],
          'signature' => {
                         'added' => '1.1.4',
                         'argument' => {
                                       'type' => 'Number/String',
                                       'name' => 'index',
                                       'desc' => {
                                                 'code' => [
                                                           '1',
                                                           'even',
                                                           'odd',
                                                           ':nth-child(even)',
                                                           ':nth-child(4n)'
                                                         ],
                                                 'content' => [
                                                                'The index of each child to match, starting with ',
                                                                ', the string ',
                                                                ' or ',
                                                                ', or an equation ( eg. ',
                                                                ', ',
                                                                ' )'
                                                              ]
                                               }
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/nth-last-child-selector.xml ####
Possible keys are: category type name longdesc example signature sample return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ],
          'type' => 'selector',
          'name' => 'nth-last-child',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Because jQuery\'s implementation of ',
                                                ' selectors is strictly derived from the CSS specification, the value of ',
                                                ' is "1-indexed", meaning that the counting starts at 1. For other selector expressions such as ',
                                                ' or ',
                                                ' jQuery follows JavaScript\'s "0-indexed" counting. Given a single ',
                                                ' containing three ',
                                                's, ',
                                                ' selects the third, last, ',
                                                '.'
                                              ],
                                 'code' => [
                                           ':nth-',
                                           'n',
                                           ':eq()',
                                           ':even',
                                           '<ul>',
                                           '<li>',
                                           '$( "li:nth-last-child(1)" )',
                                           '<li>'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Further discussion of this usage can be found in the ',
                                                '.'
                                              ],
                                 'a' => {
                                        'href' => 'http://www.w3.org/TR/css3-selectors/#nth-last-child-pseudo',
                                        'content' => 'W3C CSS specification'
                                      }
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "ul li:nth-last-child(2)" ).append( "<span> - 2nd to last!</span>" );
',
                         'html' => '
<div>
  <ul>
    <li>John</li>
    <li>Karl</li>
    <li>Adam</li>
  </ul>
</div>
<div>
  <ul>
    <li>Dan</li>
  </ul>
</div>
<div>
  <ul>
    <li>Dave</li>
    <li>Rick</li>
    <li>Timmy</li>
    <li>Gibson</li>
  </ul>
</div>',
                         'desc' => 'Find the second to last li in each matched ul and note it.',
                         'css' => '
  div {
    float: left;
  }
  span {
    color: blue;
  }
'
                       },
                       {
                         'html' => '
<div>
  <button>:nth-last-child(even)</button>
  <button>:nth-last-child(odd)</button>
  <button>:nth-last-child(3n)</button>
  <button>:nth-last-child(2)</button>
</div>
<div>
  <button>:nth-last-child(3n+1)</button>
  <button>:nth-last-child(3n+2)</button>
</div>
<div>
  <table>
    <tr><td>John</td></tr>
    <tr><td>Karl</td></tr>
    <tr><td>Brandon</td></tr>
    <tr><td>Benjamin</td></tr>
  </table>
</div>
<div>
  <table>
    <tr><td>Sam</td></tr>
  </table>
</div>
<div>
  <table>
    <tr><td>Glen</td></tr>
    <tr><td>Tane</td></tr>
    <tr><td>Ralph</td></tr>
    <tr><td>David</td></tr>
    <tr><td>Mike</td></tr>
    <tr><td>Dan</td></tr>
  </table>
</div>
<span>tr<span id="inner"></span></span>
',
                         'desc' => 'This is a playground to see how the selector works with different strings. ',
                         'css' => '
  button {
    display: block;
    font-size: 12px;
    width: 100px;
  }
  div {
    float: left;
    margin: 10px;
    font-size: 10px;
    border: 1px solid black;
  }
  span {
    color: blue;
    font-size:18px;
  }
  #inner {
    color: red;
  }
  td {
    width: 50px;
    text-align: center;
  }
',
                         'code' => '
$( "button" ).click(function() {
  var str = $( this ).text();
  $( "tr" ).css( "background", "white" );
  $( "tr" + str ).css( "background", "#ff0000" );
  $( "#inner" ).text(str);
});
'
                       }
                     ],
          'signature' => {
                         'added' => '1.9',
                         'argument' => {
                                       'type' => 'Number/String',
                                       'name' => 'index',
                                       'desc' => {
                                                 'content' => [
                                                                'The index of each child to match, starting with the last one (',
                                                                '), the string ',
                                                                ' or ',
                                                                ', or an equation ( eg. ',
                                                                ', ',
                                                                ' )'
                                                              ],
                                                 'code' => [
                                                           '1',
                                                           'even',
                                                           'odd',
                                                           ':nth-last-child(even)',
                                                           ':nth-last-child(4n)'
                                                         ]
                                               }
                                     }
                       },
          'sample' => ':nth-last-child(index/even/odd/equation)',
          'return' => '',
          'title' => ':nth-last-child() Selector',
          'desc' => 'Selects all elements that are the nth-child of their parent, counting from the last element to the first.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/nth-last-of-type-selector.xml ####
Possible keys are: signature longdesc example name type category desc title sample return
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'name' => 'index',
                                       'type' => 'Number/String',
                                       'desc' => {
                                                 'code' => [
                                                           '1',
                                                           'even',
                                                           'odd',
                                                           ':nth-last-of-type(even)',
                                                           ':nth-last-of-type(4n)'
                                                         ],
                                                 'content' => [
                                                                'The index of each child to match, starting with the last one (',
                                                                '), the string ',
                                                                ' or ',
                                                                ', or an equation ( eg. ',
                                                                ', ',
                                                                ' )'
                                                              ]
                                               }
                                     },
                         'added' => '1.9'
                       },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Because jQuery\'s implementation of ',
                                                ' selectors is strictly derived from the CSS specification, the value of ',
                                                ' is "1-indexed", meaning that the counting starts at 1. For other selector expressions such as ',
                                                ' or ',
                                                ' jQuery follows JavaScript\'s "0-indexed" counting. Given a single ',
                                                ' containing three ',
                                                's, ',
                                                ' selects the third, last, ',
                                                '.'
                                              ],
                                 'code' => [
                                           ':nth-',
                                           'n',
                                           ':eq()',
                                           ':even',
                                           '<ul>',
                                           '<li>',
                                           '$(\'li:nth-last-of-type(1)\')',
                                           '<li>'
                                         ]
                               },
                               {
                                 'a' => {
                                        'href' => 'http://www.w3.org/TR/css3-selectors/#nth-last-of-type-pseudo',
                                        'content' => 'W3C CSS specification'
                                      },
                                 'content' => [
                                                'Further discussion of this usage can be found in the ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'css' => '
  div {
    float: left;
  }
  span {
    color: blue;
  }
',
                         'desc' => 'Find the second to last li in each matched ul and note it.',
                         'html' => '
<div>
  <ul>
    <li>John</li>
    <li>Karl</li>
    <li>Adam</li>
  </ul>
</div>
<div>
  <ul>
    <li>Dan</li>
  </ul>
</div>
<div>
  <ul>
    <li>Dave</li>
    <li>Rick</li>
    <li>Timmy</li>
    <li>Gibson</li>
  </ul>
</div>
',
                         'code' => '
$( "ul li:nth-last-of-type(2)" ).append( "<span> - 2nd to last!</span>" );
'
                       },
                       {
                         'code' => '
$( "button" ).click(function() {
  var str = $( this ).text();
  $( "tr" ).css( "background", "white" );
  $( "tr" + str ).css( "background", "#ff0000" );
  $( "#inner" ).text( str );
});
',
                         'css' => '
  button {
    display: block;
    font-size: 12px;
    width: 100px;
  }
  div {
    float: left;
    margin: 10px;
    font-size: 10px;
    border: 1px solid black;
  }
  span {
    color: blue;
    font-size: 18px;
  }
  #inner {
    color: red;
  }
  td {
    width: 50px;
    text-align: center;
  }
',
                         'html' => '
<div>
  <button>:nth-last-of-type(even)</button>
  <button>:nth-last-of-type(odd)</button>
  <button>:nth-last-of-type(3n)</button>
  <button>:nth-last-of-type(2)</button>
</div>
<div>
  <button>:nth-last-of-type(3n+1)</button>
  <button>:nth-last-of-type(3n+2)</button>
</div>

<div>
  <table>
    <tr><td>John</td></tr>
    <tr><td>Karl</td></tr>
    <tr><td>Brandon</td></tr>
    <tr><td>Benjamin</td></tr>
  </table>
</div>
<div>
  <table>
    <tr><td>Sam</td></tr>
  </table>
</div>
<div>
  <table>
    <tr><td>Glen</td></tr>
    <tr><td>Tane</td></tr>
    <tr><td>Ralph</td></tr>
    <tr><td>David</td></tr>
    <tr><td>Mike</td></tr>
    <tr><td>Dan</td></tr>
  </table>
</div>

<span>tr<span id="inner"></span></span>
',
                         'desc' => 'This is a playground to see how the selector works with different strings. '
                       }
                     ],
          'name' => 'nth-last-of-type',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ],
          'desc' => 'Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.',
          'title' => ':nth-last-of-type() Selector',
          'sample' => ':nth-last-of-type(index/even/odd/equation)',
          'return' => ''
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/nth-of-type-selector.xml ####
Possible keys are: signature category name type example longdesc desc sample return title
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'desc' => {
                                                 'content' => [
                                                                'The index of each child to match, starting with ',
                                                                ', the string ',
                                                                ' or ',
                                                                ', or an equation ( eg. ',
                                                                ', ',
                                                                ' )'
                                                              ],
                                                 'code' => [
                                                           '1',
                                                           'even',
                                                           'odd',
                                                           ':nth-of-type(even)',
                                                           ':nth-of-type(4n)'
                                                         ]
                                               },
                                       'type' => 'Number/String',
                                       'name' => 'index'
                                     },
                         'added' => '1.9'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ],
          'name' => 'nth-of-type',
          'type' => 'selector',
          'example' => {
                       'code' => '
$( "span:nth-of-type(2)" )
  .append( "<span> is 2nd sibling span</span>" )
  .addClass( "nth" );
',
                       'css' => '
  .nth {
    color: red;
  }
',
                       'html' => '
<div>
  <span>John</span>,
  <b>Kim</b>,
  <span>Adam</span>,
  <b>Rafael</b>,
  <span>Oleg</span>
</div>
<div>
  <b>Dave</b>,
  <span>Ann</span>
</div>
<div>
  <i><span>Maurice</span></i>,
  <span>Richard</span>,
  <span>Ralph</span>,
  <span>Jason</span>
</div>
',
                       'desc' => 'Find each span that is second in relation to its sibling spans.'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Because jQuery\'s implementation of ',
                                                ' selectors is strictly derived from the CSS specification, the value of ',
                                                ' is "1-indexed", meaning that the counting starts at 1. For other selector expressions such as ',
                                                ' or ',
                                                ' jQuery follows JavaScript\'s "0-indexed" counting. '
                                              ],
                                 'code' => [
                                           ':nth-',
                                           'n',
                                           ':eq()',
                                           ':even'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Further discussion of this usage can be found in the ',
                                                '.'
                                              ],
                                 'a' => {
                                        'href' => 'http://www.w3.org/TR/css3-selectors/#nth-of-type-pseudo',
                                        'content' => 'W3C CSS specification'
                                      }
                               }
                             ]
                      },
          'desc' => 'Selects all elements that are the nth child of their parent in relation to siblings with the same element name.',
          'sample' => ':nth-of-type(index/even/odd/equation)',
          'return' => '',
          'title' => ':nth-of-type() Selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/odd-selector.xml ####
Possible keys are: desc note sample return title signature type name example longdesc category
$VAR1 = {
          'desc' => {
                    'a' => {
                           'href' => '/even-selector/',
                           'content' => 'even'
                         },
                    'content' => [
                                   'Selects odd elements, zero-indexed.  See also ',
                                   '.'
                                 ]
                  },
          'note' => {
                    'document-order' => {
                                        'type' => 'additional'
                                      },
                    'jquery-selector-extension' => {
                                                   'type' => 'additional',
                                                   'data-selector' => ':odd'
                                                 }
                  },
          'sample' => ':odd',
          'return' => '',
          'title' => ':odd Selector',
          'signature' => {
                         'added' => '1.0'
                       },
          'type' => 'selector',
          'name' => 'odd',
          'example' => {
                       'code' => '
$( "tr:odd" ).css( "background-color", "#bbbbff" );
',
                       'desc' => 'Finds odd table rows, matching the second, fourth and so on (index 1, 3, 5 etc.).',
                       'html' => '
<table border="1">
  <tr><td>Row with Index #0</td></tr>
  <tr><td>Row with Index #1</td></tr>
  <tr><td>Row with Index #2</td></tr>
  <tr><td>Row with Index #3</td></tr>
</table>
',
                       'css' => '
  table {
    background: #f3f7f5;
  }
'
                     },
          'longdesc' => {
                        'p' => {
                               'em' => '0-based indexing',
                               'code' => ':odd',
                               'content' => [
                                              'In particular, note that the ',
                                              ' means that, counter-intuitively, ',
                                              ' selects the second element, fourth element, and so on within the matched set.'
                                            ]
                             }
                      },
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/off.xml ####
Possible keys are: desc title return signature example longdesc type name category
$VAR1 = {
          'desc' => 'Remove an event handler.',
          'title' => '.off()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'added' => '1.7',
                           'argument' => {
                                         'selector' => {
                                                       'optional' => 'true',
                                                       'type' => 'String',
                                                       'desc' => {
                                                                 'code' => '.on()',
                                                                 'content' => [
                                                                                'A selector which should match the one originally passed to ',
                                                                                ' when attaching event handlers.'
                                                                              ]
                                                               }
                                                     },
                                         'events' => {
                                                     'type' => 'String',
                                                     'desc' => 'One or more space-separated event types and optional namespaces, or just namespaces, such as "click", "keydown.myPlugin", or ".myPlugin".'
                                                   },
                                         'handler' => {
                                                      'desc' => {
                                                                'content' => [
                                                                               'A handler function previously attached for the event(s), or the special value ',
                                                                               '.'
                                                                             ],
                                                                'code' => 'false'
                                                              },
                                                      'optional' => 'true',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'type' => 'Function'
                                                    }
                                       }
                         },
                         {
                           'argument' => {
                                         'events' => {
                                                     'type' => 'PlainObject',
                                                     'desc' => 'An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).'
                                                   },
                                         'selector' => {
                                                       'desc' => {
                                                                 'code' => '.on()',
                                                                 'content' => [
                                                                                'A selector which should match the one originally passed to ',
                                                                                ' when attaching event handlers.'
                                                                              ]
                                                               },
                                                       'type' => 'String',
                                                       'optional' => 'true'
                                                     }
                                       },
                           'added' => '1.7'
                         },
                         {
                           'added' => '1.7',
                           'argument' => {
                                         'type' => 'Event',
                                         'name' => 'event',
                                         'desc' => {
                                                   'content' => [
                                                                  'A ',
                                                                  ' object.'
                                                                ],
                                                   'a' => {
                                                          'code' => 'jQuery.Event',
                                                          'href' => '/category/events/event-object/'
                                                        }
                                                 }
                                       }
                         },
                         {
                           'added' => '1.7'
                         }
                       ],
          'example' => [
                       {
                         'code' => '
function flash() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .on( "click", "#theone", flash )
    .find( "#theone" )
      .text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .off( "click", "#theone", flash )
    .find( "#theone" )
      .text( "Does nothing..." );
});
',
                         'css' => '
  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }
',
                         'html' => '
<button id="theone">Does nothing...</button>
<button id="bind">Add Click</button>
<button id="unbind">Remove Click</button>
<div style="display:none;">Click!</div>
',
                         'desc' => 'Add and remove event handlers on the colored button.'
                       },
                       {
                         'desc' => 'Remove all event handlers from all paragraphs:',
                         'code' => '
$( "p" ).off();
'
                       },
                       {
                         'desc' => 'Remove all delegated click handlers from all paragraphs:',
                         'code' => '
$( "p" ).off( "click", "**" );
'
                       },
                       {
                         'code' => '
var foo = function() {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).on( "click", "p", foo );

// ... Foo will no longer be called.
$( "body" ).off( "click", "p", foo );
',
                         'desc' => 'Remove just one previously bound handler by passing it as the third argument:'
                       },
                       {
                         'desc' => 'Unbind all delegated event handlers by their namespace:',
                         'code' => '
var validate = function() {
  // Code to validate form entries
};

// Delegate events under the ".validator" namespace
$( "form" ).on( "click.validator", "button", validate );

$( "form" ).on( "keypress.validator", "input[type=\'text\']", validate );

// Remove event handlers in the ".validator" namespace
$( "form" ).off( ".validator" );
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.off()',
                                           '.off()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method removes event handlers that were attached with ',
                                                '. See the discussion of delegated and directly bound events on that page for more information. Calling ',
                                                ' with no arguments removes all handlers attached to the elements. Specific event handlers can be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. '
                                              ],
                                 'strong' => 'When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.',
                                 'a' => {
                                        'code' => '.on()',
                                        'href' => '/on/'
                                      }
                               },
                               {
                                 'em' => 'all',
                                 'content' => [
                                                'If a simple event name such as ',
                                                ' is provided, ',
                                                ' events of that type (both direct and delegated) are removed from the elements in the jQuery set. When writing code that will be used as a plugin, or simply when working with a large code base, best practice is to attach and remove events using namespaces so that the code will not inadvertently remove event handlers attached by other code. All events of all types in a specific namespace can be removed from an element by providing just a namespace, such as ',
                                                '. At minimum, either a namespace or event name must be provided.'
                                              ],
                                 'code' => [
                                           '"click"',
                                           '".myPlugin"'
                                         ]
                               },
                               {
                                 'code' => [
                                           'selector',
                                           '.on()',
                                           '"**"'
                                         ],
                                 'content' => [
                                                'To remove specific delegated event handlers, provide a ',
                                                ' argument. The selector string must exactly match the one passed to ',
                                                ' when the event handler was attached. To remove all delegated events from an element without removing non-delegated events, use the special value ',
                                                '.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'handler',
                                           '.off'
                                         ],
                                 'content' => [
                                                'A handler can also be removed by specifying the function name in the ',
                                                ' argument. When jQuery attaches an event handler, it assigns a unique id to the handler function. Handlers proxied by ',
                                                ' or a similar mechanism will all have the same unique id (the proxy function), so passing proxied handlers to ',
                                                ' may remove more handlers than intended. In those situations it is better to attach and remove event handlers using namespaces.'
                                              ],
                                 'a' => {
                                        'href' => '/jQuery.proxy/',
                                        'code' => 'jQuery.proxy()'
                                      }
                               },
                               {
                                 'content' => [
                                                'As with ',
                                                ', you can pass ',
                                                ' as an object instead of specifying an ',
                                                ' string and ',
                                                ' function as separate arguments. The keys for the ',
                                                ' object are events and/or namespaces; the values are handler functions or the special value ',
                                                '.'
                                              ],
                                 'code' => [
                                           '.on()',
                                           'events',
                                           'events',
                                           'handler',
                                           'events',
                                           'false'
                                         ]
                               }
                             ]
                      },
          'type' => 'method',
          'name' => 'off',
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/offset.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document.',
          'entry' => {
                     'offset' => {
                                 'desc' => 'Set the current coordinates of every element in the set of matched elements, relative to the document.',
                                 'return' => 'jQuery',
                                 'signature' => [
                                                {
                                                  'added' => '1.4',
                                                  'argument' => {
                                                                'type' => 'PlainObject',
                                                                'name' => 'coordinates',
                                                                'desc' => {
                                                                          'code' => [
                                                                                    'top',
                                                                                    'left'
                                                                                  ],
                                                                          'content' => [
                                                                                         'An object containing the properties ',
                                                                                         ' and ',
                                                                                         ', which are numbers indicating the new top and left coordinates for the elements.'
                                                                                       ]
                                                                        }
                                                              }
                                                },
                                                {
                                                  'argument' => {
                                                                'argument' => {
                                                                              'coords' => {
                                                                                          'type' => 'PlainObject'
                                                                                        },
                                                                              'index' => {
                                                                                         'type' => 'Integer'
                                                                                       }
                                                                            },
                                                                'name' => 'function',
                                                                'return' => {
                                                                            'type' => 'PlainObject'
                                                                          },
                                                                'type' => 'Function',
                                                                'desc' => {
                                                                          'code' => [
                                                                                    'top',
                                                                                    'left'
                                                                                  ],
                                                                          'content' => [
                                                                                         'A function to return the coordinates to set. Receives the index of the element in the collection as the first argument and the current coordinates as the second argument. The function should return an object with the new ',
                                                                                         ' and ',
                                                                                         ' properties.'
                                                                                       ]
                                                                        }
                                                              },
                                                  'added' => '1.4'
                                                }
                                              ],
                                 'type' => 'method',
                                 'example' => {
                                              'code' => '
$( "p:last" ).offset({ top: 10, left: 30 });
',
                                              'css' => '
  p {
    margin-left: 10px;
  }
',
                                              'desc' => 'Set the offset of the second paragraph:',
                                              'html' => '
<p>Hello</p><p>2nd Paragraph</p>
'
                                            },
                                 'longdesc' => {
                                               'p' => {
                                                      'em' => 'relative to the document',
                                                      'code' => [
                                                                '.offset()',
                                                                'position',
                                                                'static',
                                                                'relative'
                                                              ],
                                                      'content' => [
                                                                     'The ',
                                                                     ' setter method allows us to reposition an element. The element\'s position is specified ',
                                                                     '. If the element\'s ',
                                                                     ' style property is currently ',
                                                                     ', it will be set to ',
                                                                     ' to allow for this repositioning.'
                                                                   ]
                                                    }
                                             },
                                 'category' => [
                                               {
                                                 'slug' => 'css'
                                               },
                                               {
                                                 'slug' => 'offset'
                                               },
                                               {
                                                 'slug' => 'manipulation/style-properties'
                                               },
                                               {
                                                 'slug' => 'version/1.2'
                                               },
                                               {
                                                 'slug' => 'version/1.4'
                                               }
                                             ]
                               }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/offsetParent.xml ####
Possible keys are: desc title return signature category example longdesc type name
$VAR1 = {
          'desc' => 'Get the closest ancestor element that is positioned.',
          'title' => '.offsetParent()',
          'return' => 'jQuery',
          'signature' => {
                         'added' => '1.2.6'
                       },
          'category' => [
                        {
                          'slug' => 'offset'
                        },
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.2.6'
                        }
                      ],
          'example' => {
                       'html' => '
<ul class="level-1">
  <li class="item-i">I</li>
  <li class="item-ii" style="position: relative;">II
    <ul class="level-2">
      <li class="item-a">A</li>
      <li class="item-b">B
        <ul class="level-3">
          <li class="item-1">1</li>
          <li class="item-2">2</li>
          <li class="item-3">3</li>
        </ul>
      </li>
      <li class="item-c">C</li>
    </ul>
  </li>
  <li class="item-iii">III</li>
</ul>
',
                       'desc' => 'Find the offsetParent of item "A."',
                       'code' => '$( "li.item-a" ).offsetParent().css( "background-color", "red" );',
                       'height' => '250'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.offsetParent()',
                                           'relative',
                                           'absolute',
                                           'fixed'
                                         ],
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object wrapped around the closest positioned ancestor. An element is said to be positioned if it has a CSS position attribute of ',
                                                ', ',
                                                ', or ',
                                                '. This information is useful for calculating offsets for performing animations and placing objects on the page.'
                                              ]
                               },
                               'Consider a page with a basic nested list on it, with a positioned element:',
                               'If we begin at item A, we can find its positioned ancestor:',
                               'This will change the color of list item II, which is positioned.'
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<ul class="level-1">
  <li class="item-i">I</li>
  <li class="item-ii" style="position: relative;">II
    <ul class="level-2">
      <li class="item-a">A</li>
      <li class="item-b">B
        <ul class="level-3">
          <li class="item-1">1</li>
          <li class="item-2">2</li>
          <li class="item-3">3</li>
        </ul>
      </li>
      <li class="item-c">C</li>
    </ul>
  </li>
  <li class="item-iii">III</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.item-a" ).offsetParent().css( "background-color", "red" );
    '
                                 }
                               ]
                      },
          'type' => 'method',
          'name' => 'offsetParent'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/on.xml ####
Possible keys are: desc return title signature category name type example longdesc
$VAR1 = {
          'desc' => 'Attach an event handler function for one or more events to the selected elements.',
          'return' => 'jQuery',
          'title' => '.on()',
          'signature' => [
                         {
                           'argument' => {
                                         'data' => {
                                                   'type' => 'Anything',
                                                   'optional' => 'true',
                                                   'desc' => {
                                                             'content' => [
                                                                            'Data to be passed to the handler in ',
                                                                            ' when an event is triggered.'
                                                                          ],
                                                             'a' => {
                                                                    'href' => '/event.data/',
                                                                    'code' => 'event.data'
                                                                  }
                                                           }
                                                 },
                                         'events' => {
                                                     'type' => 'String',
                                                     'desc' => 'One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".'
                                                   },
                                         'selector' => {
                                                       'desc' => {
                                                                 'code' => 'null',
                                                                 'content' => [
                                                                                'A selector string to filter the descendants of the selected elements that trigger the event. If the selector is ',
                                                                                ' or omitted, the event is always triggered when it reaches the selected element.'
                                                                              ]
                                                               },
                                                       'optional' => 'true',
                                                       'type' => 'String'
                                                     },
                                         'handler' => {
                                                      'desc' => {
                                                                'content' => [
                                                                               'A function to execute when the event is triggered. The value ',
                                                                               ' is also allowed as a shorthand for a function that simply does ',
                                                                               '.'
                                                                             ],
                                                                'code' => [
                                                                          'false',
                                                                          'return false'
                                                                        ]
                                                              },
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'eventObject' => {
                                                                                     'type' => 'Event'
                                                                                   },
                                                                    'extraParameter' => {
                                                                                        'rest' => 'true',
                                                                                        'type' => 'Anything',
                                                                                        'optional' => 'true'
                                                                                      }
                                                                  }
                                                    }
                                       },
                           'added' => '1.7'
                         },
                         {
                           'added' => '1.7',
                           'argument' => {
                                         'data' => {
                                                   'optional' => 'true',
                                                   'type' => 'Anything',
                                                   'desc' => {
                                                             'content' => [
                                                                            'Data to be passed to the handler in ',
                                                                            ' when an event occurs.'
                                                                          ],
                                                             'a' => {
                                                                    'code' => 'event.data',
                                                                    'href' => '/event.data/'
                                                                  }
                                                           }
                                                 },
                                         'selector' => {
                                                       'optional' => 'true',
                                                       'type' => 'String',
                                                       'desc' => 'A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.'
                                                     },
                                         'events' => {
                                                     'desc' => 'An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).',
                                                     'type' => 'PlainObject'
                                                   }
                                       }
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'name' => 'on',
          'type' => 'method',
          'example' => [
                       {
                         'code' => '
$( "p" ).on( "click", function() {
  alert( $( this ).text() );
});
',
                         'desc' => 'Display a paragraph\'s text in an alert when it is clicked:'
                       },
                       {
                         'code' => '
function myHandler( event ) {
  alert( event.data.foo );
}
$( "p" ).on( "click", { foo: "bar" }, myHandler );
',
                         'desc' => 'Pass data to the event handler, which is specified here by name:'
                       },
                       {
                         'code' => '
$( "form" ).on( "submit", false );
',
                         'desc' => {
                                   'code' => 'false',
                                   'content' => [
                                                  'Cancel a form submit action and prevent the event from bubbling up by returning ',
                                                  ':'
                                                ]
                                 }
                       },
                       {
                         'code' => '
$( "form" ).on( "submit", function( event ) {
  event.preventDefault();
});
',
                         'desc' => {
                                   'content' => [
                                                  'Cancel only the default action by using ',
                                                  '.'
                                                ],
                                   'code' => '.preventDefault()'
                                 }
                       },
                       {
                         'code' => '
$( "form" ).on( "submit", function( event ) {
  event.stopPropagation();
});
',
                         'desc' => {
                                   'content' => [
                                                  'Stop submit events from bubbling without preventing form submit, using ',
                                                  '.'
                                                ],
                                   'code' => '.stopPropagation()'
                                 }
                       },
                       {
                         'code' => '
$( "div" ).on( "click", function( event, person ) {
  alert( "Hello, " + person.name );
});
$( "div" ).trigger( "click", { name: "Jim" } );
',
                         'desc' => {
                                   'content' => 'Pass data to the event handler using the second argument to ',
                                   'code' => '.trigger()'
                                 }
                       },
                       {
                         'code' => '
$( "div" ).on( "click", function( event, salutation, name ) {
  alert( salutation + ", " + name );
});
$( "div" ).trigger( "click", [ "Goodbye", "Jim" ] );
',
                         'desc' => {
                                   'code' => '.trigger()',
                                   'content' => [
                                                  'Use the the second argument of ',
                                                  ' to pass an array of data to the event handler'
                                                ]
                                 }
                       },
                       {
                         'css' => '
  p {
    color: red;
  }
  span {
    color: blue;
  }
',
                         'html' => '
<p>Has an attached custom event.</p>
<button>Trigger custom event</button>
<span style="display:none;"></span>
',
                         'desc' => 'Attach and trigger custom (non-browser) events.',
                         'code' => '
$( "p" ).on( "myCustomEvent", function( event, myName ) {
  $( this ).text( myName + ", hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
});
$( "button" ).click(function () {
  $( "p" ).trigger( "myCustomEvent", [ "John" ] );
});
'
                       },
                       {
                         'code' => '
$( "div.test" ).on({
  click: function() {
    $( this ).toggleClass( "active" );
  }, mouseenter: function() {
    $( this ).addClass( "inside" );
  }, mouseleave: function() {
    $( this ).removeClass( "inside" );
  }
});
',
                         'css' => '
  .test {
    color: #000;
    padding: .5em;
    border: 1px solid #444;
  }
  .active {
    color: #900;
  }
  .inside {
    background-color: aqua;
  }
',
                         'html' => '
<div class="test">test div</div>
',
                         'desc' => 'Attach multiple event handlers simultaneously using a plain object.'
                       },
                       {
                         'css' => '
  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
    background: #ccc;
  }
  span {
    color: red;
  }
',
                         'desc' => {
                                   'content' => [
                                                  'Click any paragraph to add another after it. Note that ',
                                                  ' allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.'
                                                ],
                                   'code' => '.on()'
                                 },
                         'html' => '
<p>Click me!</p>
<span></span>
',
                         'code' => '
var count = 0;
$( "body" ).on( "click", "p", function() {
  $( this ).after( "<p>Another paragraph! " + (++count) + "</p>" );
});
'
                       },
                       {
                         'code' => '
$( "body" ).on( "click", "p", function() {
  alert( $( this ).text() );
});
',
                         'desc' => 'Display each paragraph\'s text in an alert box whenever it is clicked:'
                       },
                       {
                         'code' => '
$( "body" ).on( "click", "a", function( event ) {
  event.preventDefault();
});
',
                         'desc' => {
                                   'content' => [
                                                  'Cancel a link\'s default action using the ',
                                                  ' method:'
                                                ],
                                   'code' => '.preventDefault()'
                                 }
                       },
                       {
                         'code' => '
$( "#cart" ).on( "mouseenter mouseleave", function( event ) {
  $( this ).toggleClass( "active" );
});
',
                         'desc' => {
                                   'code' => [
                                             'mouseenter',
                                             'mouseleave'
                                           ],
                                   'content' => [
                                                  "Attach multiple events\x{2014}one on ",
                                                  ' and one on ',
                                                  ' to the same element:'
                                                ]
                                 }
                       }
                     ],
          'longdesc' => {
                        'h2' => {
                                'additional-notes' => {
                                                      'content' => 'Additional notes'
                                                    },
                                'event-performance' => {
                                                       'content' => 'Event performance'
                                                     },
                                'event-handler' => {
                                                   'content' => 'The event handler and its environment'
                                                 },
                                'direct-and-delegated-events' => {
                                                                 'content' => 'Direct and delegated events'
                                                               },
                                'event-names' => {
                                                 'content' => 'Event names and namespaces'
                                               },
                                'passing-data' => {
                                                  'content' => 'Passing data to the handler'
                                                }
                              },
                        'p' => [
                               {
                                 'code' => [
                                           '.on()',
                                           '.on()',
                                           '.on()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the ',
                                                ' method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see ',
                                                ',  ',
                                                ', and ',
                                                '. To remove events bound with ',
                                                ', see ',
                                                '. To attach an event that runs only once and then removes itself, see '
                                              ],
                                 'a' => [
                                        {
                                          'href' => '/bind/',
                                          'code' => '.bind()'
                                        },
                                        {
                                          'code' => '.delegate()',
                                          'href' => '/delegate/'
                                        },
                                        {
                                          'href' => '/live/',
                                          'code' => '.live()'
                                        },
                                        {
                                          'href' => '/off/',
                                          'code' => '.off()'
                                        },
                                        {
                                          'href' => '/one/',
                                          'code' => '.one()'
                                        }
                                      ]
                               },
                               {
                                 'a' => {
                                        'code' => '.trigger()',
                                        'href' => '/trigger/'
                                      },
                                 'code' => [
                                           'events',
                                           'handler',
                                           'click'
                                         ],
                                 'content' => [
                                                'Any event names can be used for the ',
                                                ' argument. jQuery will pass through the browser\'s standard JavaScript event types, calling the ',
                                                ' function when the browser generates events due to user actions such as ',
                                                '. In addition, the ',
                                                ' method can trigger both standard browser event names and custom event names to call attached handlers. Event names should only contain alphanumerics, underscore, and colon characters.'
                                              ]
                               },
                               {
                                 'em' => 'event namespaces',
                                 'code' => [
                                           '"click.myPlugin.simple"',
                                           '.off("click.myPlugin")',
                                           '.off("click.simple")'
                                         ],
                                 'content' => [
                                                'An event name can be qualified by ',
                                                ' that simplify removing or triggering the event. For example, ',
                                                ' defines both the myPlugin and simple namespaces for this particular click event. A click event handler attached via that string could be removed with ',
                                                ' or ',
                                                ' without disturbing other click handlers attached to the elements. Namespaces are similar to CSS classes in that they are not hierarchical; only one name needs to match. Namespaces beginning with an underscore are reserved for jQuery\'s use.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '.on()',
                                           'events',
                                           'events',
                                           'false',
                                           'handler'
                                         ],
                                 'content' => [
                                                'In the second form of ',
                                                ', the ',
                                                ' argument is a plain object. The keys are strings in the same form as the ',
                                                ' argument with space-separated event type names and optional namespaces. The value for each key is a function (or ',
                                                ' value) that is used as the ',
                                                ' instead of the final argument to the method. In other respects, the two forms are identical in their behavior as described below.'
                                              ]
                               },
                               {
                                 'em' => [
                                         'bubble',
                                         'propagate'
                                       ],
                                 'strong' => 'event target',
                                 'content' => [
                                                'The majority of browser events ',
                                                ', or ',
                                                ', from the deepest, innermost element (the ',
                                                ') in the document where they occur all the way up to the body and the ',
                                                ' element. In Internet Explorer 8 and lower, a few events such as ',
                                                ' and ',
                                                ' do not natively bubble but jQuery patches these to bubble and create consistent cross-browser behavior.'
                                              ],
                                 'code' => [
                                           'document',
                                           'change',
                                           'submit'
                                         ]
                               },
                               {
                                 'code' => 'selector',
                                 'content' => [
                                                'If ',
                                                ' is omitted or is null, the event handler is referred to as ',
                                                ' or ',
                                                '. The handler is called every time an event occurs on the selected elements, whether it occurs directly on the element or bubbles from a descendant (inner) element.'
                                              ],
                                 'em' => [
                                         'direct',
                                         'directly-bound'
                                       ]
                               },
                               {
                                 'code' => 'selector',
                                 'content' => [
                                                'When a ',
                                                ' is provided, the event handler is referred to as ',
                                                '. The handler is not called when the event occurs directly on the bound element, but only for descendants (inner elements) that match the selector. jQuery bubbles the event from the event target up to the element where the handler is attached (i.e., innermost to outermost element) and runs the handler for any elements along that path matching the selector.'
                                              ],
                                 'em' => 'delegated'
                               },
                               {
                                 'content' => '. To ensure the elements are present and can be selected, place scripts after the elements in the HTML markup or perform event binding inside a document ready handler. Alternatively, use delegated events to attach event handlers.',
                                 'strong' => {
                                             'code' => '.on()',
                                             'content' => 'Event handlers are bound only to the currently selected elements; they must exist at the time your code makes the call to '
                                           }
                               },
                               {
                                 'content' => [
                                                ' have the advantage that they can process events from ',
                                                ' that are added to the document at a later time. By picking an element that is guaranteed to be present at the time the delegated event handler is attached, you can use delegated events to avoid the need to frequently attach and remove event handlers. This element could be the container element of a view in a Model-View-Controller design, for example, or ',
                                                ' if the event handler wants to monitor all bubbling events in the document. The ',
                                                ' element is available in the ',
                                                ' of the document before loading any other HTML, so it is safe to attach events there without waiting for the document to be ready.'
                                              ],
                                 'strong' => 'Delegated events',
                                 'code' => [
                                           'document',
                                           'document',
                                           'head'
                                         ],
                                 'em' => 'descendant elements'
                               },
                               {
                                 'content' => [
                                                'In addition to their ability to handle events on descendant elements not yet created, another advantage of delegated events is their potential for much lower overhead when many elements must be monitored. On a data table with 1,000 rows in its ',
                                                ', this example attaches a handler to 1,000 elements:'
                                              ],
                                 'code' => 'tbody'
                               },
                               {
                                 'code' => [
                                           'tr',
                                           'tbody'
                                         ],
                                 'content' => [
                                                'An event-delegation approach attaches an event handler to only one element, the tbody, and the event only needs to bubble up one level (from the clicked ',
                                                ' to ',
                                                '):'
                                              ]
                               },
                               {
                                 'content' => ' Delegated events do not work for SVG.',
                                 'strong' => 'Note:'
                               },
                               {
                                 'code' => [
                                           'handler',
                                           'false',
                                           'events',
                                           '.on()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' argument is a function (or the value ',
                                                ', see below), and is required unless you pass an object for the ',
                                                ' argument. You can provide an anonymous handler function at the point of the ',
                                                ' call, as the examples have done above, or declare a named function and pass its name:'
                                              ]
                               },
                               {
                                 'a' => [
                                        {
                                          'href' => '/category/events/event-object/',
                                          'code' => 'Event'
                                        },
                                        {
                                          'code' => 'event.type',
                                          'href' => '/event.type/'
                                        },
                                        {
                                          'href' => '/event.target/',
                                          'code' => 'event.target'
                                        }
                                      ],
                                 'em' => 'normalized subset',
                                 'code' => [
                                           '.trigger()',
                                           'event.originalEvent'
                                         ],
                                 'content' => [
                                                'When the browser triggers an event or other JavaScript calls jQuery\'s ',
                                                ' method, jQuery passes the handler an ',
                                                ' object it can use to analyze and change the status of the event. This object is a ',
                                                ' of data provided by the browser; the browser\'s unmodified native event object is available in ',
                                                '. For example, ',
                                                ' contains the event name (e.g., "resize") and ',
                                                ' indicates the deepest (innermost) element where the event occurred.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'By default, most events bubble up from the original event target to the ',
                                                ' element. At each element along the way, jQuery calls any matching event handlers that have been attached. A handler can prevent the event from bubbling further up the document tree (and thus prevent handlers on those elements from running) by calling ',
                                                '. Any other handlers attached on the current element ',
                                                ' run however. To prevent that, call ',
                                                '. (Event handlers bound to an element are called in the same order that they were bound.)'
                                              ],
                                 'code' => [
                                           'document',
                                           'event.stopPropagation()',
                                           'event.stopImmediatePropagation()'
                                         ],
                                 'em' => 'will'
                               },
                               {
                                 'a' => {
                                        'href' => 'http://www.w3.org/TR/DOM-Level-3-Events/#event-types-list',
                                        'content' => 'W3C Events Specification'
                                      },
                                 'code' => [
                                           'event.preventDefault()',
                                           'click'
                                         ],
                                 'content' => [
                                                'Similarly, a handler can call ',
                                                ' to cancel any default action that the browser may have for this event; for example, the default action on a ',
                                                ' event is to follow the link. Not all browser events have default actions, and not all default actions can be canceled. See the ',
                                                ' for details.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'false',
                                           'event.stopPropagation()',
                                           'event.preventDefault()',
                                           'false',
                                           'handler',
                                           'function(){ return false; }',
                                           '$( "a.disabled" ).on( "click", false );'
                                         ],
                                 'content' => [
                                                'Returning ',
                                                ' from an event handler will automatically call ',
                                                ' and ',
                                                '. A ',
                                                ' value can also be passed for the ',
                                                ' as a shorthand for ',
                                                '. So, ',
                                                ' attaches an event handler to all links with class "disabled" that prevents them from being followed when they are clicked and also stops the event from bubbling. '
                                              ]
                               },
                               {
                                 'code' => [
                                           'this',
                                           'selector',
                                           'this',
                                           'event.target',
                                           '$( this )'
                                         ],
                                 'content' => [
                                                'When jQuery calls a handler, the ',
                                                ' keyword is a reference to the element where the event is being delivered; for directly bound events this is the element where the event was attached and for delegated events this is an element matching ',
                                                '. (Note that ',
                                                ' may not be equal to ',
                                                ' if the event has bubbled from a descendant element.) To create a jQuery object from the element so that it can be used with jQuery methods, use ',
                                                '.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => '/event.data/',
                                        'code' => 'event.data'
                                      },
                                 'content' => [
                                                'If a ',
                                                ' argument is provided to ',
                                                ' and is not ',
                                                ' or ',
                                                ', it is passed to the handler in the ',
                                                ' property each time an event is triggered. The ',
                                                ' argument can be any type, but if a string is used the ',
                                                ' must either be provided or explicitly passed as ',
                                                ' so that the data is not mistaken for a selector. Best practice is to use a plain object so that multiple values can be passed as properties.'
                                              ],
                                 'code' => [
                                           'data',
                                           '.on()',
                                           'null',
                                           'undefined',
                                           'data',
                                           'selector',
                                           'null'
                                         ]
                               },
                               {
                                 'code' => 'event.data',
                                 'content' => [
                                                'As of jQuery 1.4, the same event handler can be bound to an element multiple times. This is especially useful when the ',
                                                ' feature is being used, or when other unique data resides in a closure around the event handler function. For example:'
                                              ]
                               },
                               'The above code will generate two different alerts when the button is clicked.',
                               {
                                 'content' => [
                                                'As an alternative or in addition to the ',
                                                ' argument provided to the ',
                                                ' method, you can also pass data to an event handler using a second argument to ',
                                                ' or ',
                                                '. Data provided this way is passed to the event handler as further parameters after the ',
                                                ' object. If an array was passed to the second argument of ',
                                                ' or ',
                                                ', each element in the array will be presented to the event handler as an individual parameter.'
                                              ],
                                 'code' => [
                                           'data',
                                           '.on()',
                                           'Event',
                                           '.trigger()',
                                           '.triggerHandler()'
                                         ],
                                 'a' => [
                                        {
                                          'code' => '.trigger()',
                                          'href' => '/trigger/'
                                        },
                                        {
                                          'href' => '/triggerHandler/',
                                          'code' => '.triggerHandler()'
                                        }
                                      ]
                               },
                               {
                                 'content' => [
                                                'In most cases, an event such as ',
                                                ' occurs infrequently and performance is not a significant concern. However, high frequency events such as ',
                                                ' or ',
                                                ' can fire dozens of times per second, and in those cases it becomes more important to use events judiciously. Performance can be increased by reducing the amount of work done in the handler itself, caching information needed by the handler rather than recalculating it, or by rate-limiting the number of actual page updates using ',
                                                '.'
                                              ],
                                 'code' => [
                                           'click',
                                           'mousemove',
                                           'scroll',
                                           'setTimeout'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Attaching many delegated event handlers near the top of the document tree can degrade performance. Each time the event occurs, jQuery must compare all selectors of all attached events of that type to every element in the path from the event target up to the top of the document. For best performance, attach delegated events at a document location as close as possible to the target elements. Avoid excessive use of ',
                                                ' or ',
                                                ' for delegated events on large documents.'
                                              ],
                                 'code' => [
                                           'document',
                                           'document.body'
                                         ]
                               },
                               {
                                 'content' => [
                                                'jQuery can process simple selectors of the form ',
                                                ' very quickly when they are used to filter delegated events. So, ',
                                                ', ',
                                                ', and ',
                                                ' are all fast selectors. Delegated events that use more complex selectors, particularly hierarchical ones, can be several times slower--although they are still fast enough for most applications. Hierarchical selectors can often be avoided simply by attaching the handler to a more appropriate point in the document. For example, instead of ',
                                                ' use ',
                                                '.'
                                              ],
                                 'code' => [
                                           'tag#id.class',
                                           '"#myForm"',
                                           '"a.external"',
                                           '"button"',
                                           '$( "body" ).on( "click", "#commentForm .addNew", addComment )',
                                           '$( "#commentForm" ).on( "click", ".addNew", addComment )'
                                         ]
                               },
                               {
                                 'a' => [
                                        {
                                          'code' => '.click()',
                                          'href' => '/click/'
                                        },
                                        {
                                          'content' => 'events category',
                                          'href' => '/category/events/'
                                        }
                                      ],
                                 'content' => [
                                                'There are shorthand methods for some events such as ',
                                                ' that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the ',
                                                '.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'code' => '.hover()',
                                        'href' => '/hover/'
                                      },
                                 'em' => [
                                         'Deprecated in jQuery 1.8, removed in 1.9:',
                                         'single event handler',
                                         'one or two'
                                       ],
                                 'code' => [
                                           '"hover"',
                                           '"mouseenter mouseleave"',
                                           'event.type',
                                           'mouseenter',
                                           'mouseleave'
                                         ],
                                 'content' => [
                                                ' The name ',
                                                ' used as a shorthand for the string ',
                                                '. It attaches a ',
                                                ' for those two events, and the handler must examine ',
                                                ' to determine whether the event is ',
                                                ' or ',
                                                '. Do not confuse the "hover" pseudo-event-name with the ',
                                                ' method, which accepts ',
                                                ' functions.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'object',
                                           'embed',
                                           'applet'
                                         ],
                                 'content' => [
                                                'jQuery\'s event system requires that a DOM element allow attaching data via a property on the element, so that events can be tracked and delivered. The ',
                                                ', ',
                                                ', and ',
                                                ' elements cannot attach data, and therefore cannot have jQuery events bound to them.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                ' events are specified by the W3C to not bubble, but jQuery defines cross-browser ',
                                                ' and ',
                                                ' events that do bubble. When ',
                                                ' and ',
                                                ' are used to attach delegated event handlers, jQuery maps the names and delivers them as ',
                                                ' and ',
                                                ' respectively. For consistency and clarity, use the bubbling event type names.'
                                              ],
                                 'code' => [
                                           'focus',
                                           'blur',
                                           'focusin',
                                           'focusout',
                                           'focus',
                                           'blur',
                                           'focusin',
                                           'focusout'
                                         ]
                               },
                               {
                                 'content' => [
                                                'In all browsers, the ',
                                                ', ',
                                                ', and ',
                                                ' events (e.g., on an ',
                                                ' element) do not bubble. In Internet Explorer 8 and lower, the ',
                                                ' and ',
                                                ' events do not bubble. Such events are not supported for use with delegation, but they ',
                                                ' be used when the event handler is directly attached to the element generating the event.'
                                              ],
                                 'code' => [
                                           'load',
                                           'scroll',
                                           'error',
                                           '<img>',
                                           'paste',
                                           'reset'
                                         ],
                                 'em' => 'can'
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event on the ',
                                                ' object uses nonstandard arguments and return value conventions, so it is not supported by jQuery. Instead, assign a handler function directly to the ',
                                                ' property.'
                                              ],
                                 'code' => [
                                           'error',
                                           'window',
                                           'window.onerror'
                                         ]
                               },
                               {
                                 'a' => {
                                        'content' => 'W3C events specification',
                                        'href' => 'http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-removeEventListener'
                                      },
                                 'code' => 'event.stopImmediatePropagation()',
                                 'content' => [
                                                'The handler list for an element is set when the event is first delivered. Adding or removing event handlers on the current element won\'t take effect until the next time the event is handled. To prevent any further event handlers from executing on an element within an event handler, call ',
                                                '. This behavior goes against the ',
                                                '. To better understand this case, consider the following code:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'In the code above, ',
                                                ' will be executed anyway the first time even if it\'s removed using ',
                                                '. However, the handler will not be executed the following times the ',
                                                ' event is triggered.'
                                              ],
                                 'code' => [
                                           'handler2',
                                           'click'
                                         ],
                                 'a' => {
                                        'code' => '.off()',
                                        'href' => '/off/'
                                      }
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$( "#dataTable tbody tr" ).on( "click", function() {
  console.log( $( this ).text() );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#dataTable tbody" ).on( "click", "tr", function() {
  console.log( $( this ).text() );
});
    '
                                 },
                                 {
                                   'code' => '
function notify() {
  alert( "clicked" );
}
$( "button" ).on( "click", notify );
    '
                                 },
                                 {
                                   'code' => '
function greet( event ) {
  alert( "Hello " + event.data.name );
}
$( "button" ).on( "click", {
  name: "Karl"
}, greet );
$( "button" ).on( "click", {
  name: "Addy"
}, greet );
    '
                                 },
                                 {
                                   'code' => 'var $test = $( "#test" );

function handler1() {
  console.log( "handler1" );
  $test.off( "click", handler2 );
}

function handler2() {
  console.log( "handler2" );
}

$test.on( "click", handler1 );
$test.on( "click", handler2 );'
                                 }
                               ]
                      }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/one.xml ####
Possible keys are: signature longdesc example name type category desc title return
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'events' => {
                                                     'type' => 'String',
                                                     'desc' => 'A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.'
                                                   },
                                         'data' => {
                                                   'desc' => 'An object containing data that will be passed to the event handler.',
                                                   'optional' => 'true',
                                                   'type' => 'PlainObject'
                                                 },
                                         'handler' => {
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'type' => 'Function',
                                                      'desc' => 'A function to execute at the time the event is triggered.'
                                                    }
                                       },
                           'added' => '1.1'
                         },
                         {
                           'argument' => {
                                         'handler' => {
                                                      'desc' => {
                                                                'content' => [
                                                                               'A function to execute when the event is triggered. The value ',
                                                                               ' is also allowed as a shorthand for a function that simply does ',
                                                                               '.'
                                                                             ],
                                                                'code' => [
                                                                          'false',
                                                                          'return false'
                                                                        ]
                                                              },
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  }
                                                    },
                                         'events' => {
                                                     'desc' => 'One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".',
                                                     'type' => 'String'
                                                   },
                                         'data' => {
                                                   'desc' => {
                                                             'a' => {
                                                                    'code' => 'event.data',
                                                                    'href' => '/event.data/'
                                                                  },
                                                             'content' => [
                                                                            'Data to be passed to the handler in ',
                                                                            ' when an event is triggered.'
                                                                          ]
                                                           },
                                                   'type' => 'Anything',
                                                   'optional' => 'true'
                                                 },
                                         'selector' => {
                                                       'type' => 'String',
                                                       'optional' => 'true',
                                                       'desc' => {
                                                                 'code' => 'null',
                                                                 'content' => [
                                                                                'A selector string to filter the descendants of the selected elements that trigger the event. If the selector is ',
                                                                                ' or omitted, the event is always triggered when it reaches the selected element.'
                                                                              ]
                                                               }
                                                     }
                                       },
                           'added' => '1.7'
                         },
                         {
                           'added' => '1.7',
                           'argument' => {
                                         'data' => {
                                                   'type' => 'Anything',
                                                   'optional' => 'true',
                                                   'desc' => {
                                                             'content' => [
                                                                            'Data to be passed to the handler in ',
                                                                            ' when an event occurs.'
                                                                          ],
                                                             'a' => {
                                                                    'href' => '/event.data/',
                                                                    'code' => 'event.data'
                                                                  }
                                                           }
                                                 },
                                         'events' => {
                                                     'desc' => 'An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).',
                                                     'type' => 'PlainObject'
                                                   },
                                         'selector' => {
                                                       'desc' => 'A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.',
                                                       'type' => 'String',
                                                       'optional' => 'true'
                                                     }
                                       }
                         }
                       ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$( "#foo" ).one( "click", function() {
  alert( "This will be displayed only once." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).on( "click", function( event ) {
  alert( "This will be displayed only once." );
  $( this ).off( event );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).one( "click mouseover", function() {
  alert( "The " + event.type + " event happened!" );
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method is identical to ',
                                                ', except that the handler for a given element and event type is unbound after its first invocation. For example:'
                                              ],
                                 'code' => [
                                           '.one()',
                                           '.on()'
                                         ]
                               },
                               {
                                 'content' => [
                                                'After the code is executed, a click on the element with ID ',
                                                ' will display the alert. Subsequent clicks will do nothing. This code is equivalent to:'
                                              ],
                                 'code' => 'foo'
                               },
                               {
                                 'content' => [
                                                'In other words, explicitly calling ',
                                                ' from within a regularly-bound handler has exactly the same effect.'
                                              ],
                                 'code' => '.off()'
                               },
                               {
                                 'content' => [
                                                'If the first argument contains more than one space-separated event types, the event handler is called ',
                                                '.'
                                              ],
                                 'em' => 'once for each event type'
                               },
                               {
                                 'em' => 'two',
                                 'content' => [
                                                'In the example above the alert could be displayed twice due to the ',
                                                ' event types (',
                                                ' and ',
                                                ').'
                                              ],
                                 'code' => [
                                           'click',
                                           'mouseover'
                                         ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
var n = 0;
$( "div" ).one( "click", function() {
  var index = $( "div" ).index( this );
  $( this ).css({
    borderStyle: "inset",
    cursor: "auto"
  });
  $( "p" ).text( "Div at index #" + index + " clicked." +
    " That\'s " + (++n) + " total clicks." );
});
',
                         'html' => '
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<p>Click a green square...</p>
',
                         'desc' => 'Tie a one-time click to each div.',
                         'css' => '
  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    background: green;
    border: 10px outset;
    cursor:pointer;
  }
  p {
    color: red;
    margin: 0;
    clear: left;
  }
'
                       },
                       {
                         'desc' => 'To display the text of all paragraphs in an alert box the first time each of them is clicked:',
                         'code' => '
$( "p" ).one( "click", function() {
  alert( $( this ).text() );
});
'
                       },
                       {
                         'code' => '
var n = 0;
$(".target").one("click mouseenter", function() {
  $(".count").html(++n);
});
',
                         'html' => '
<div class="count">0</div>
<div class="target">Hover/click me</div>
',
                         'desc' => 'Event handlers will trigger once per element per event type'
                       }
                     ],
          'name' => 'one',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.1'
                        }
                      ],
          'desc' => 'Attach a handler to an event for the elements. The handler is executed at most once per element per event type.',
          'title' => '.one()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/only-child-selector.xml ####
Possible keys are: type name longdesc example category signature sample return title desc
$VAR1 = {
          'type' => 'selector',
          'name' => 'only-child',
          'longdesc' => {
                        'p' => 'If the parent has other child elements, nothing is matched.'
                      },
          'example' => {
                       'code' => '
$( "div button:only-child" ).text( "Alone" ).css( "border", "2px blue solid" );
',
                       'desc' => 'Change the text and add a border for each button that is the only child of its parent.',
                       'html' => '
<div>
  <button>Sibling!</button>
  <button>Sibling!</button>
</div>

<div>
  <button>Sibling!</button>
</div>

<div>
  None
</div>

<div>
  <button>Sibling!</button>
  <button>Sibling!</button>
  <button>Sibling!</button>
</div>

<div>
  <button>Sibling!</button>
</div>
',
                       'css' => '
  div {
    width: 100px;
    height: 80px;
    margin: 5px;
    float: left;
    background: #b9e;
  }
'
                     },
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.1.4'
                        }
                      ],
          'signature' => {
                         'added' => '1.1.4'
                       },
          'sample' => ':only-child',
          'return' => '',
          'title' => ':only-child Selector',
          'desc' => 'Selects all elements that are the only child of their parent.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/only-of-type-selector.xml ####
Possible keys are: desc title sample return signature longdesc example type name category
$VAR1 = {
          'desc' => 'Selects all elements that have no siblings with the same element name.',
          'title' => ':only-of-type Selector',
          'sample' => ':only-of-type',
          'return' => '',
          'signature' => {
                         'added' => '1.9'
                       },
          'longdesc' => {
                        'p' => 'If the parent has other child elements with the same element name, nothing is matched.'
                      },
          'example' => {
                       'code' => '
  $( "button:only-of-type" ).text( "Alone" ).css( "border", "2px blue solid" );
',
                       'desc' => 'Change the text and add a border for each button that is the only child button of its parent.',
                       'html' => '
<div>
  <button>Sibling!</button>
  <button>Sibling!</button>
</div>

<div>
  <button>Sibling!</button>
</div>
<div>
  None
</div>

<div>
  <button>Sibling!</button>
  <span>Sibling!</span>
  <span>Sibling!</span>
</div>

<div>
  <button>Sibling!</button>
</div>
',
                       'css' => '
  div {
    width: 100px;
    height: 80px;
    margin: 5px;
    float: left;
    background: #b9e;
  }
  span {
    padding: 2px;
    margin: 3px;
    line-height: 1.4;
    border: 1px solid #000;
  }
'
                     },
          'type' => 'selector',
          'name' => 'only-of-type',
          'category' => [
                        {
                          'slug' => 'selectors/child-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/outerHeight.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'outerHeight' => {
                                      'signature' => [
                                                     {
                                                       'argument' => {
                                                                     'desc' => 'A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).',
                                                                     'name' => 'value',
                                                                     'type' => {
                                                                               'Number' => {},
                                                                               'String' => {}
                                                                             }
                                                                   },
                                                       'added' => '1.8.0'
                                                     },
                                                     {
                                                       'argument' => {
                                                                     'name' => 'function(index, height)',
                                                                     'type' => 'Function',
                                                                     'desc' => {
                                                                               'content' => [
                                                                                              'A function returning the outer height to set. Receives the index position of the element in the set and the old outer height as arguments. Within the function, ',
                                                                                              ' refers to the current element in the set.'
                                                                                            ],
                                                                               'code' => 'this'
                                                                             }
                                                                   },
                                                       'added' => '1.8.0'
                                                     }
                                                   ],
                                      'type' => 'method',
                                      'longdesc' => {
                                                    'p' => {
                                                           'content' => [
                                                                          'When calling ',
                                                                          ', the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used (such as ',
                                                                          ', ',
                                                                          ', or ',
                                                                          ').'
                                                                        ],
                                                           'code' => [
                                                                     '.outerHeight(value)',
                                                                     '100px',
                                                                     '50%',
                                                                     'auto'
                                                                   ]
                                                         }
                                                  },
                                      'example' => {
                                                   'css' => '
  div {
    width: 50px;
    padding: 10px;
    height: 60px;
    float: left;
    margin: 5px;
    background: red;
    cursor: pointer;
  }
  .mod {
    background: blue;
    cursor: default;
  }
',
                                                   'html' => '
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
',
                                                   'desc' => 'Change the outer height of each div the first time it is clicked (and change its color).',
                                                   'code' => '
var modHeight = 60;
$( "div" ).one( "click", function() {
  $( this ).outerHeight( modHeight ).addClass( "mod" );
  modHeight -= 8;
});
'
                                                 },
                                      'category' => [
                                                    {
                                                      'slug' => 'css'
                                                    },
                                                    {
                                                      'slug' => 'dimensions'
                                                    },
                                                    {
                                                      'slug' => 'manipulation/style-properties'
                                                    },
                                                    {
                                                      'slug' => 'version/1.8'
                                                    }
                                                  ],
                                      'desc' => 'Set the CSS outer Height of each element in the set of matched elements.',
                                      'return' => 'jQuery'
                                    }
                   },
          'desc' => 'Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without "px") representation of the value or null if called on an empty set of elements.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/outerWidth.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'outerWidth' => {
                                     'signature' => [
                                                    {
                                                      'added' => '1.8.0',
                                                      'argument' => {
                                                                    'type' => {
                                                                              'Number' => {},
                                                                              'String' => {}
                                                                            },
                                                                    'name' => 'value',
                                                                    'desc' => 'A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).'
                                                                  }
                                                    },
                                                    {
                                                      'argument' => {
                                                                    'desc' => {
                                                                              'content' => [
                                                                                             'A function returning the outer width to set. Receives the index position of the element in the set and the old outer width as arguments. Within the function, ',
                                                                                             ' refers to the current element in the set.'
                                                                                           ],
                                                                              'code' => 'this'
                                                                            },
                                                                    'type' => 'Function',
                                                                    'name' => 'function(index, width)'
                                                                  },
                                                      'added' => '1.8.0'
                                                    }
                                                  ],
                                     'category' => [
                                                   {
                                                     'slug' => 'css'
                                                   },
                                                   {
                                                     'slug' => 'dimensions'
                                                   },
                                                   {
                                                     'slug' => 'manipulation/style-properties'
                                                   },
                                                   {
                                                     'slug' => 'version/1.8'
                                                   }
                                                 ],
                                     'example' => {
                                                  'code' => '
var modWidth = 60;
$( "div" ).one( "click", function() {
  $( this ).outerWidth( modWidth ).addClass( "mod" );
  modWidth -= 8;
});
',
                                                  'html' => '
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
',
                                                  'desc' => 'Change the outer width of each div the first time it is clicked (and change its color).',
                                                  'css' => '
  div {
    width: 60px;
    padding: 10px;
    height: 50px;
    float: left;
    margin: 5px;
    background: red;
    cursor: pointer;
  }
  .mod {
    background: blue;
    cursor: default;
  }
'
                                                },
                                     'longdesc' => {
                                                   'p' => {
                                                          'code' => [
                                                                    '.outerWidth(value)',
                                                                    '100px',
                                                                    '50%',
                                                                    'auto'
                                                                  ],
                                                          'content' => [
                                                                         'When calling ',
                                                                         ', the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used (such as ',
                                                                         ', ',
                                                                         ', or ',
                                                                         ').'
                                                                       ]
                                                        }
                                                 },
                                     'type' => 'method',
                                     'desc' => 'Set the CSS outer width of each element in the set of matched elements.',
                                     'return' => 'jQuery'
                                   }
                   },
          'desc' => 'Get the current computed width for the first element in the set of matched elements, including padding and border.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/parent-selector.xml ####
Possible keys are: title sample return note desc longdesc example type name category signature
$VAR1 = {
          'title' => ':parent Selector',
          'sample' => ':parent',
          'return' => '',
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension',
                    'data-selector' => ':parent'
                  },
          'desc' => 'Select all elements that have at least one child node (either an element or text).',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => ':empty',
                                 'content' => [
                                                'This is the inverse of ',
                                                '. '
                                              ]
                               },
                               {
                                 'content' => [
                                                'One important thing to note regarding the use of ',
                                                ' (and ',
                                                ') is that child nodes include text nodes.'
                                              ],
                                 'code' => [
                                           ':parent',
                                           ':empty'
                                         ]
                               },
                               {
                                 'a' => {
                                        'href' => 'http://www.w3.org/TR/html401/struct/text.html#edef-P',
                                        'content' => 'http://www.w3.org/TR/html401/struct/text.html#edef-P'
                                      },
                                 'content' => [
                                                'The W3C recommends that the ',
                                                ' element have at least one child node, even if that child is merely text (see ',
                                                '). Some other elements, on the other hand, are empty (i.e. have no children) by definition:',
                                                ', ',
                                                ', ',
                                                ', and ',
                                                ', for example.'
                                              ],
                                 'code' => [
                                           '<p>',
                                           ' <input>',
                                           '<img>',
                                           '<br>',
                                           '<hr>'
                                         ]
                               },
                               {
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '.parent()',
                                                    'href' => '/parent/'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'content' => '.parents()',
                                                    'href' => '/parents/'
                                                  }
                                           }
                                         ],
                                 'content' => [
                                                'To obtain the parents or ancestors of an existing jQuery set, see the ',
                                                ' and ',
                                                ' methods.'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$( "td:parent" ).fadeTo( 1500, 0.3 );
',
                       'desc' => 'Finds all tds with children, including text.',
                       'html' => '
<table border="1">
  <tr><td>Value 1</td><td></td></tr>
  <tr><td>Value 2</td><td></td></tr>
</table>
',
                       'css' => '
  td {
    width: 40px;
    background: green;
  }
'
                     },
          'type' => 'selector',
          'name' => 'parent',
          'category' => [
                        {
                          'slug' => 'selectors/content-filter-selector'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/parent.xml ####
Possible keys are: title return desc category example longdesc type name signature
$VAR1 = {
          'title' => '.parent()',
          'return' => 'jQuery',
          'desc' => 'Get the parent of each element in the current set of matched elements, optionally filtered by a selector.',
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => [
                       {
                         'code' => '
$( "*", document.body ).each(function() {
  var parentTag = $( this ).parent().get( 0 ).tagName;
  $( this ).prepend( document.createTextNode( parentTag + " > " ) );
});
',
                         'html' => '
<div>div,
  <span>span, </span>
  <b>b </b>
</div>

<p>p,
  <span>span,
    <em>em </em>
  </span>
</p>

<div>div,
  <strong>strong,
    <span>span, </span>
    <em>em,
      <b>b, </b>
    </em>
  </strong>
  <b>b </b>
</div>
',
                         'desc' => 'Shows the parent of each element as (parent > child).  Check the View Source to see the raw html.',
                         'css' => '
  div, p {
    margin: 10px;
  }
'
                       },
                       {
                         'desc' => 'Find the parent element of each paragraph with a class "selected".',
                         'html' => '
<div><p>Hello</p></div>
<div class="selected"><p>Hello Again</p></div>
',
                         'code' => '
$( "p" ).parent( ".selected" ).css( "background", "yellow" );
'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul class="level-1">
  <li class="item-i">I</li>
  <li class="item-ii">II
    <ul class="level-2">
      <li class="item-a">A</li>
      <li class="item-b">B
        <ul class="level-3">
          <li class="item-1">1</li>
          <li class="item-2">2</li>
          <li class="item-3">3</li>
        </ul>
      </li>
      <li class="item-c">C</li>
    </ul>
  </li>
  <li class="item-iii">III</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.item-a" ).parent().css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => 'parent()',
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method traverses to the immediate parent of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => '/parents/',
                                        'code' => '.parents()'
                                      },
                                 'code' => [
                                           '.parent()',
                                           '$( "html" ).parent()',
                                           'document',
                                           '$( "html" ).parents()'
                                         ],
                                 'content' => [
                                                'This method is similar to ',
                                                ', except ',
                                                ' only travels a single level up the DOM tree. Also, ',
                                                ' method returns a set containing ',
                                                ' whereas ',
                                                ' returns an empty set.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The method optionally accepts a selector expression of the same type that we can pass to the ',
                                                ' function. If the selector is supplied, the elements will be filtered by testing whether they match it.'
                                              ],
                                 'code' => '$()'
                               },
                               'Consider a page with a basic nested list on it:',
                               'If we begin at item A, we can find its parents:',
                               'The result of this call is a red background for the level-2 list. Since we do not supply a selector expression, the parent element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.'
                             ]
                      },
          'type' => 'method',
          'name' => 'parent',
          'signature' => {
                         'argument' => {
                                       'type' => 'Selector',
                                       'name' => 'selector',
                                       'optional' => 'true',
                                       'desc' => 'A string containing a selector expression to match elements against.'
                                     },
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/parents.xml ####
Possible keys are: example longdesc name type category signature title return desc
$VAR1 = {
          'example' => [
                       {
                         'code' => '
var parentEls = $( "b" ).parents()
  .map(function() {
    return this.tagName;
  })
  .get()
  .join( ", " );
$( "b" ).append( "<strong>" + parentEls + "</strong>" );
',
                         'css' => '
  b, span, p, html body {
    padding: .5em;
    border: 1px solid;
  }
  b {
    color: blue;
  }
  strong {
    color: red;
  }
',
                         'html' => '
<div>
  <p>
    <span>
      <b>My parents are: </b>
    </span>
  </p>
</div>
',
                         'desc' => 'Find all parent elements of each b.'
                       },
                       {
                         'code' => '
function showParents() {
  $( "div" ).css( "border-color", "white" );
  var len = $( "span.selected" )
    .parents( "div" )
      .css( "border", "2px red solid" )
      .length;
  $( "b" ).text( "Unique div parents: " + len );
}
$( "span" ).click(function() {
  $( this ).toggleClass( "selected" );
  showParents();
});
',
                         'css' => '
  p, div, span {
    margin: 2px;
    padding: 1px;
  }
  div {
    border: 2px white solid;
  }
  span {
    cursor: pointer;
    font-size: 12px;
  }
  .selected {
    color: blue;
  }
  b {
    color: red;
    display: block;
    font-size: 14px;
  }
',
                         'html' => '
<p>
  <div>
    <div><span>Hello</span></div>
      <span>Hello Again</span>
    </div>
    <div>
      <span>And Hello Again</span>
    </div>
  </p>
  <b>Click Hellos to toggle their parents.</b>
',
                         'desc' => 'Click to find all unique div parent elements of each span.'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'em' => 'reverse',
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object from the matching elements ordered from immediate parent on up; the elements are returned in order from the closest parent to the outer ones.  When multiple DOM elements are in the original set, the resulting set will be in ',
                                                ' order of the original elements as well, with duplicates removed.'
                                              ],
                                 'code' => '.parents()'
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                ' methods are similar, except that the latter only travels a single level up the DOM tree. Also, ',
                                                ' method returns a set containing ',
                                                ' whereas ',
                                                ' returns an empty set.'
                                              ],
                                 'code' => [
                                           '.parents()',
                                           {
                                             'a' => {
                                                    'content' => '.parent()',
                                                    'href' => '/parent/'
                                                  }
                                           },
                                           '$( "html" ).parent()',
                                           'document',
                                           '$( "html" ).parents()'
                                         ]
                               },
                               {
                                 'code' => '$()',
                                 'content' => [
                                                'The method optionally accepts a selector expression of the same type that we can pass to the ',
                                                ' function. If the selector is supplied, the elements will be filtered by testing whether they match it.'
                                              ]
                               },
                               'Consider a page with a basic nested list on it:',
                               'If we begin at item A, we can find its ancestors:',
                               {
                                 'code' => '<html>',
                                 'content' => [
                                                'The result of this call is a red background for the level-2 list, item II, and the level-1 list (and on up the DOM tree all the way to the ',
                                                ' element). Since we do not supply a selector expression, all of the ancestors are part of the returned jQuery object. If we had supplied one, only the matching items among these would be included.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<ul class="level-1">
  <li class="item-i">I</li>
  <li class="item-ii">II
    <ul class="level-2">
      <li class="item-a">A</li>
      <li class="item-b">B
        <ul class="level-3">
          <li class="item-1">1</li>
          <li class="item-2">2</li>
          <li class="item-3">3</li>
        </ul>
      </li>
      <li class="item-c">C</li>
    </ul>
  </li>
  <li class="item-iii">III</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.item-a" ).parents().css( "background-color", "red" );
    '
                                 }
                               ]
                      },
          'name' => 'parents',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'desc' => 'A string containing a selector expression to match elements against.',
                                       'name' => 'selector',
                                       'type' => 'Selector',
                                       'optional' => 'true'
                                     },
                         'added' => '1.0'
                       },
          'title' => '.parents()',
          'return' => 'jQuery',
          'desc' => 'Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/parentsUntil.xml ####
Possible keys are: desc title return signature example longdesc name type category
$VAR1 = {
          'desc' => 'Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.',
          'title' => '.parentsUntil()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'argument' => {
                                         'filter' => {
                                                     'optional' => 'true',
                                                     'type' => 'Selector',
                                                     'desc' => 'A string containing a selector expression to match elements against.'
                                                   },
                                         'selector' => {
                                                       'desc' => 'A string containing a selector expression to indicate where to stop matching ancestor elements.',
                                                       'optional' => 'true',
                                                       'type' => 'Selector'
                                                     }
                                       },
                           'added' => '1.4'
                         },
                         {
                           'argument' => {
                                         'element' => {
                                                      'optional' => 'true',
                                                      'type' => {
                                                                'jQuery' => {},
                                                                'Element' => {}
                                                              },
                                                      'desc' => 'A DOM node or jQuery object indicating where to stop matching ancestor elements.'
                                                    },
                                         'filter' => {
                                                     'type' => 'Selector',
                                                     'optional' => 'true',
                                                     'desc' => 'A string containing a selector expression to match elements against.'
                                                   }
                                       },
                           'added' => '1.6'
                         }
                       ],
          'example' => {
                       'html' => '
<ul class="level-1 yes">
  <li class="item-i">I</li>
  <li class="item-ii">II
    <ul class="level-2 yes">
      <li class="item-a">A</li>
      <li class="item-b">B
        <ul class="level-3">
          <li class="item-1">1</li>
          <li class="item-2">2</li>
          <li class="item-3">3</li>
        </ul>
      </li>
      <li class="item-c">C</li>
    </ul>
  </li>
  <li class="item-iii">III</li>
</ul>
',
                       'desc' => 'Find the ancestors of <li class="item-a"> up to <ul class="level-1"> and give them a red background color. Also, find ancestors of <li class="item-2"> that have a class of "yes" up to <ul class="level-1"> and give them a green border.',
                       'code' => '
$( "li.item-a" )
  .parentsUntil( ".level-1" )
    .css( "background-color", "red" );

$( "li.item-2" )
  .parentsUntil( $( "ul.level-1" ), ".yes" )
    .css( "border", "3px solid green" );
',
                       'height' => '220px'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.parentsUntil()',
                                           '.parentsUntil()'
                                         ],
                                 'content' => [
                                                'Given a selector expression that represents a set of DOM elements, the ',
                                                ' method traverses through the ancestors of these elements until it reaches an element matched by the selector passed in the method\'s argument. The resulting jQuery object contains all of the ancestors up to but not including the one matched by the ',
                                                ' selector.'
                                              ]
                               },
                               {
                                 'code' => '.parents()',
                                 'content' => [
                                                'If the selector is not matched or is not supplied, all ancestors will be selected; in these cases it selects the same elements as the ',
                                                ' method does when no selector is provided.'
                                              ]
                               },
                               {
                                 'strong' => [
                                             'As of jQuery 1.6',
                                             '.parentsUntil()'
                                           ],
                                 'content' => [
                                                ', A DOM node or jQuery object, instead of a selector, may be used for the first ',
                                                ' argument.'
                                              ]
                               },
                               'The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.'
                             ]
                      },
          'name' => 'parentsUntil',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.4'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/password-selector.xml ####
Possible keys are: note desc title sample return signature category example longdesc type name
$VAR1 = {
          'note' => {
                    'id' => 'jquery-selector-extension-alt',
                    'type' => 'additional',
                    'data-alt' => '[type="password"]',
                    'data-selector' => ':password'
                  },
          'desc' => 'Selects all elements of type password.',
          'title' => ':password Selector',
          'sample' => ':password',
          'return' => '',
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => {
                       'code' => '
var input = $( "input:password" ).css({
  background: "yellow",
  border: "3px red solid"
});
$( "div" )
  .text( "For this type jQuery found " + input.length + "." )
  .css( "color", "red" );

// Prevent form submission
$( "form" ).submit(function() {
  return false;
});
',
                       'css' => '
  textarea {
    height: 45px;
  }
',
                       'html' => '
<form>
  <input type="button" value="Input Button">
  <input type="checkbox">
  <input type="file">
  <input type="hidden">
  <input type="image">
  <input type="password">
  <input type="radio">
  <input type="reset">
  <input type="submit">
  <input type="text">
  <select>
    <option>Option</option>
  </select>
  <textarea></textarea>
  <button>Button</button>
</form>
<div></div>
',
                       'desc' => 'Finds all password inputs.'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              ' is equivalent to ',
                                              '. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( "*" ) is implied. In other words, the bare ',
                                              ' is equivalent to ',
                                              ', so ',
                                              ' should be used instead. '
                                            ],
                               'code' => [
                                         '$( ":password" )',
                                         '$( "[type=password]" )',
                                         '$( ":password" )',
                                         '$( "*:password" )',
                                         '$( "input:password" )'
                                       ]
                             }
                      },
          'type' => 'selector',
          'name' => 'password'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/position.xml ####
Possible keys are: signature category longdesc example name type desc note title return
$VAR1 = {
          'signature' => {
                         'added' => '1.2'
                       },
          'category' => [
                        {
                          'slug' => 'css'
                        },
                        {
                          'slug' => 'offset'
                        },
                        {
                          'slug' => 'manipulation/style-properties'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               {
                                 'em' => [
                                         'relative to the offset parent',
                                         'relative to the document'
                                       ],
                                 'code' => [
                                           '.position()',
                                           {
                                             'a' => {
                                                    'href' => '/offset/',
                                                    'content' => '.offset()'
                                                  }
                                           },
                                           '.position()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method allows us to retrieve the current position of an element ',
                                                '. Contrast this with ',
                                                ', which retrieves the current position ',
                                                '. When positioning a new element near another one and within the same containing DOM element, ',
                                                ' is the more useful.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'top',
                                           'left'
                                         ],
                                 'content' => [
                                                'Returns an object containing the properties ',
                                                ' and ',
                                                '.'
                                              ]
                               }
                             ],
                        'div' => {
                                 'class' => 'warning',
                                 'p' => {
                                        'strong' => 'Note:',
                                        'content' => ' jQuery does not support getting the position coordinates of hidden elements or accounting for borders, margins, or padding set on the body element.'
                                      }
                               }
                      },
          'example' => {
                       'html' => '
<div>
  <p>Hello</p>
</div>
<p></p>
',
                       'desc' => 'Access the position of the second paragraph:',
                       'css' => '
  div {
    padding: 15px;
  }
  p {
    margin-left: 10px;
  }
',
                       'code' => '
var p = $( "p:first" );
var position = p.position();
$( "p:last" ).text( "left: " + position.left + ", top: " + position.top );
'
                     },
          'name' => 'position',
          'type' => 'method',
          'desc' => 'Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'dimensions-number',
                    'data-title' => '.position()'
                  },
          'title' => '.position()',
          'return' => 'Object'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/prepend.xml ####
Possible keys are: return title note desc category name type example longdesc signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.prepend()',
          'note' => {
                    'html-code-execution' => {
                                             'type' => 'additional'
                                           },
                    'svg-support' => {
                                     'type' => 'additional'
                                   }
                  },
          'desc' => 'Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.',
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-inside'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'name' => 'prepend',
          'type' => 'method',
          'example' => [
                       {
                         'html' => '
<p>there, friend!</p>
<p>amigo!</p>
',
                         'desc' => 'Prepends some HTML to all paragraphs.',
                         'css' => '
  p {
    background: yellow;
  }
',
                         'code' => '
$( "p" ).prepend( "<b>Hello </b>" );
'
                       },
                       {
                         'html' => '
<p>is what I\'d say</p>
<p>is what I said</p>
',
                         'desc' => 'Prepends a DOM Element to all paragraphs.',
                         'css' => '
  p {
    background: yellow;
  }
',
                         'code' => '
$( "p" ).prepend( document.createTextNode( "Hello " ) );
'
                       },
                       {
                         'css' => '
  p {
    background: yellow;
  }
',
                         'html' => '
<p> is what was said.</p><b>Hello</b>
',
                         'desc' => 'Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.',
                         'code' => '
$( "p" ).prepend( $( "b" ) );
'
                       }
                     ],
          'longdesc' => {
                        'h4' => {
                                'id' => 'additional-arguments',
                                'content' => 'Additional Arguments'
                              },
                        'p' => [
                               {
                                 'code' => '.prepend()',
                                 'content' => [
                                                'The ',
                                                ' method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the ',
                                                ' child, use ',
                                                '). '
                                              ],
                                 'em' => 'last',
                                 'a' => {
                                        'href' => '/append/',
                                        'code' => '.append()'
                                      }
                               },
                               {
                                 'code' => [
                                           '.prepend()',
                                           {
                                             'a' => {
                                                    'content' => '.prependTo()',
                                                    'href' => '/prependTo/'
                                                  }
                                           },
                                           '.prepend()',
                                           '.prependTo()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                " methods perform the same task. The major difference is in the syntax\x{2014}specifically, in the placement of the content and target. With ",
                                                ', the selector expression preceding the method is the container into which the content is inserted. With ',
                                                ', on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.'
                                              ]
                               },
                               'Consider the following HTML:',
                               'You can create content and insert it into several elements at once:',
                               {
                                 'content' => [
                                                'Each ',
                                                ' element gets this new content:'
                                              ],
                                 'code' => '<div class="inner">'
                               },
                               'You can also select an element on the page and insert it into another:',
                               {
                                 'em' => [
                                         'a single element',
                                         'not cloned'
                                       ],
                                 'content' => [
                                                'If ',
                                                ' selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (',
                                                '):'
                                              ]
                               },
                               {
                                 'content' => ': If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.',
                                 'strong' => 'Important'
                               },
                               {
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/append/',
                                                    'content' => '.append()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'content' => '.before()',
                                                    'href' => '/before/'
                                                  }
                                           },
                                           '.prepend()'
                                         ],
                                 'content' => [
                                                'Similar to other content-adding methods such as ',
                                                ' and ',
                                                ', ',
                                                ' also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '<div>',
                                           '<div>'
                                         ],
                                 'content' => [
                                                'For example, the following will insert two new ',
                                                's and an existing ',
                                                ' as the first three child nodes of the body:'
                                              ]
                               },
                               {
                                 'code' => [
                                           '.prepend()',
                                           '<div>',
                                           '$( "body" ).prepend( $newdiv1, newdiv2, existingdiv1 )'
                                         ],
                                 'content' => [
                                                'Since ',
                                                ' can accept any number of additional arguments, the same result can be achieved by passing in the three ',
                                                's as three separate arguments, like so: ',
                                                '. The type and number of arguments will largely depend on how you collect the elements in your code.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".inner" ).prepend( "<p>Test</p>" );
    '
                                 },
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">
    <p>Test</p>
    Hello
  </div>
  <div class="inner">
    <p>Test</p>
    Goodbye
  </div>
</div>
'
                                 },
                                 {
                                   'code' => '
$( ".container" ).prepend( $( "h2" ) );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
    <h2>Greetings</h2>
    <div class="inner">Hello</div>
    <div class="inner">Goodbye</div>
</div>
'
                                 },
                                 {
                                   'code' => '
var $newdiv1 = $( "<div id=\'object1\'></div>"),
  newdiv2 = document.createElement( "div" ),
  existingdiv1 = document.getElementById( "foo" );

$( "body" ).prepend( $newdiv1, [ newdiv2, existingdiv1 ] );
    '
                                 }
                               ]
                      },
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'content' => {
                                                      'desc' => 'One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.',
                                                      'type' => {
                                                                'Element' => {},
                                                                'jQuery' => {},
                                                                'Text' => {},
                                                                'Array' => {},
                                                                'htmlString' => {}
                                                              },
                                                      'optional' => 'true'
                                                    }
                                       }
                         },
                         {
                           'argument' => {
                                         'desc' => {
                                                   'code' => 'this',
                                                   'content' => [
                                                                  'A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, ',
                                                                  ' refers to the current element in the set.'
                                                                ]
                                                 },
                                         'return' => {
                                                     'type' => {
                                                               'jQuery' => {},
                                                               'Element' => {},
                                                               'htmlString' => {},
                                                               'Text' => {}
                                                             }
                                                   },
                                         'name' => 'function',
                                         'type' => 'Function',
                                         'argument' => {
                                                       'html' => {
                                                                 'type' => 'String'
                                                               },
                                                       'elementOfArray' => {
                                                                           'type' => 'Integer'
                                                                         }
                                                     }
                                       },
                           'added' => '1.4'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/prependTo.xml ####
Possible keys are: signature type name example longdesc category note desc return title
$VAR1 = {
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'name' => 'target',
                                       'type' => {
                                                 'htmlString' => {},
                                                 'Array' => {},
                                                 'Element' => {},
                                                 'jQuery' => {},
                                                 'Selector' => {}
                                               },
                                       'desc' => 'A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.'
                                     }
                       },
          'type' => 'method',
          'name' => 'prependTo',
          'example' => {
                       'css' => '
  div {
    background: yellow;
  }
',
                       'html' => '
<div id="foo">FOO!</div>
<span>I have something to say... </span>
',
                       'desc' => 'Prepend all spans to the element with the ID "foo" (Check .prepend() documentation for more examples)',
                       'code' => '
$( "span" ).prependTo( "#foo" );
'
                     },
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "<p>Test</p>" ).prependTo( ".inner" );
    '
                                 },
                                 {
                                   'code' => '
<h2>Greetings</h2>
<div class="container">
  <div class="inner">
    <p>Test</p>
    Hello
  </div>
  <div class="inner">
    <p>Test</p>
    Goodbye
  </div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "h2" ).prependTo( $( ".container" ) );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <h2>Greetings</h2>
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '.prepend()',
                                                    'href' => '/prepend/'
                                                  }
                                           },
                                           '.prependTo()',
                                           '.prepend()',
                                           '.prependTo()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' and ',
                                                ' methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With ',
                                                ', the selector expression preceding the method is the container into which the content is inserted. With ',
                                                ', on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.'
                                              ]
                               },
                               'Consider the following HTML:',
                               'We can create content and insert it into several elements at once:',
                               {
                                 'content' => [
                                                'Each inner ',
                                                ' element gets this new content:'
                                              ],
                                 'code' => '<div>'
                               },
                               'We can also select an element on the page and insert it into another:',
                               'If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned):',
                               'If there is more than one target element, however, cloned copies of the inserted element will be created for each target except the last.'
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-inside'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'note' => {
                    'html-code-execution' => {
                                             'type' => 'additional'
                                           },
                    'svg-support' => {
                                     'type' => 'additional'
                                   }
                  },
          'desc' => 'Insert every element in the set of matched elements to the beginning of the target.',
          'return' => 'jQuery',
          'title' => '.prependTo()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/prev.xml ####
Possible keys are: type name example longdesc category signature return title desc
$VAR1 = {
          'type' => 'method',
          'name' => 'prev',
          'example' => [
                       {
                         'css' => '
  div {
    width: 40px;
    height: 40px;
    margin: 10px;
    float: left;
    border: 2px blue solid;
    padding: 2px;
  }
  span {
    font-size: 14px;
  }
  p {
    clear: left;
    margin: 10px;
  }
',
                         'html' => '
<div></div>
<div></div>
<div><span>has child</span></div>
<div></div>
<div></div>
<div></div>
<div id="start"></div>
<div></div>
<p><button>Go to Prev</button></p>
',
                         'desc' => 'Find the very previous sibling of each div.',
                         'code' => '
var $curr = $( "#start" );
$curr.css( "background", "#f99" );
$( "button" ).click(function() {
  $curr = $curr.prev();
  $( "div" ).css( "background", "" );
  $curr.css( "background", "#f99" );
});
'
                       },
                       {
                         'html' => '
<div><span>Hello</span></div>
<p class="selected">Hello Again</p>
<p>And Again</p>
',
                         'desc' => 'For each paragraph, find the very previous sibling that has a class "selected".',
                         'code' => '
$( "p" ).prev( ".selected" ).css( "background", "yellow" );
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => '.prev()',
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method searches for the predecessor of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.'
                                              ]
                               },
                               {
                                 'code' => '$()',
                                 'content' => [
                                                'The method optionally accepts a selector expression of the same type that can be passed to the ',
                                                ' function. If the selector is supplied, the preceding element will be filtered by testing whether it match the selector.'
                                              ]
                               },
                               'Consider a page with a simple list on it:',
                               'To select the element that comes immediately before item three:',
                               'The result of this call is a red background behind item 2. Since no selector expression is supplied, this preceding element is unequivocally included as part of the object. If one had been supplied, the element would be tested for a match before it was included.',
                               'If no previous sibling exists, or if the previous sibling element does not match a supplied selector, an empty jQuery object is returned.',
                               {
                                 'content' => [
                                                'To select ',
                                                ' preceding sibling elements, rather than just the preceding ',
                                                ' sibling, use the ',
                                                ' method.'
                                              ],
                                 'em' => [
                                         'all',
                                         'adjacent'
                                       ],
                                 'a' => {
                                        'href' => '/prevAll/',
                                        'content' => '.prevAll()'
                                      }
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li class="third-item">list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.third-item" ).prev().css( "background-color", "red" );
    '
                                 }
                               ]
                      },
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'optional' => 'true',
                                       'type' => 'Selector',
                                       'name' => 'selector',
                                       'desc' => 'A string containing a selector expression to match elements against.'
                                     }
                       },
          'return' => 'jQuery',
          'title' => '.prev()',
          'desc' => 'Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/prevAll.xml ####
Possible keys are: desc title return signature category example longdesc name type
$VAR1 = {
          'desc' => 'Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.',
          'title' => '.prevAll()',
          'return' => 'jQuery',
          'signature' => {
                         'argument' => {
                                       'name' => 'selector',
                                       'type' => 'Selector',
                                       'optional' => 'true',
                                       'desc' => 'A string containing a selector expression to match elements against.'
                                     },
                         'added' => '1.2'
                       },
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'example' => {
                       'code' => '
$( "div:last" ).prevAll().addClass( "before" );
',
                       'desc' => 'Locate all the divs preceding the last div and give them a class.',
                       'html' => '
<div></div>
<div></div>
<div></div>
<div></div>
',
                       'css' => '
  div {
    width: 70px;
    height: 70px;
    background: #abc;
    border: 2px solid black;
    margin: 10px;
    float: left;
  }
  div.before {
    border-color: red;
  }
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => '.prevAll()',
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method searches through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements; the elements are returned in order beginning with the closest sibling.'
                                              ]
                               },
                               {
                                 'code' => '$()',
                                 'content' => [
                                                'The method optionally accepts a selector expression of the same type that we can pass to the ',
                                                ' function. If the selector is supplied, the elements will be filtered by testing whether they match it.'
                                              ]
                               },
                               'Consider a page with a simple list on it:',
                               'If we begin at the third item, we can find the elements which come before it:',
                               'The result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.'
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li class="third-item">list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.third-item" ).prevAll().css( "background-color", "red" );
    '
                                 }
                               ]
                      },
          'name' => 'prevAll',
          'type' => 'method'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/prevUntil.xml ####
Possible keys are: signature example longdesc name type category desc title return
$VAR1 = {
          'signature' => [
                         {
                           'argument' => {
                                         'selector' => {
                                                       'type' => 'Selector',
                                                       'optional' => 'true',
                                                       'desc' => 'A string containing a selector expression to indicate where to stop matching preceding sibling elements.'
                                                     },
                                         'filter' => {
                                                     'desc' => 'A string containing a selector expression to match elements against.',
                                                     'optional' => 'true',
                                                     'type' => 'Selector'
                                                   }
                                       },
                           'added' => '1.4'
                         },
                         {
                           'argument' => {
                                         'element' => {
                                                      'desc' => 'A DOM node or jQuery object indicating where to stop matching preceding sibling elements.',
                                                      'optional' => 'true',
                                                      'type' => {
                                                                'jQuery' => {},
                                                                'Element' => {}
                                                              }
                                                    },
                                         'filter' => {
                                                     'desc' => 'A string containing a selector expression to match elements against.',
                                                     'type' => 'Selector',
                                                     'optional' => 'true'
                                                   }
                                       },
                           'added' => '1.6'
                         }
                       ],
          'example' => {
                       'html' => '
<dl>
  <dt id="term-1">term 1</dt>
  <dd>definition 1-a</dd>
  <dd>definition 1-b</dd>
  <dd>definition 1-c</dd>
  <dd>definition 1-d</dd>

  <dt id="term-2">term 2</dt>
  <dd>definition 2-a</dd>
  <dd>definition 2-b</dd>
  <dd>definition 2-c</dd>

  <dt id="term-3">term 3</dt>
  <dd>definition 3-a</dd>
  <dd>definition 3-b</dd>
</dl>
',
                       'desc' => 'Find the siblings that precede <dt id="term-2"> up to the preceding <dt> and give them a red background color. Also, find previous <dd> siblings of <dt id="term-3"> up to <dt id="term-1"> and give them a green text color.',
                       'height' => '250px',
                       'code' => '
$( "#term-2" ).prevUntil( "dt" )
  .css( "background-color", "red" );

var term1 = document.getElementById( "term-1" );
$( "#term-3" ).prevUntil( term1, "dd" )
  .css( "color", "green" );
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Given a selector expression that represents a set of DOM elements, the ',
                                                ' method searches through the predecessors of these elements in the DOM tree, stopping when it reaches an element matched by the method\'s argument. The new jQuery object that is returned contains all previous siblings up to but not including the one matched by the ',
                                                ' selector; the elements are returned in order from the closest sibling to the farthest.'
                                              ],
                                 'code' => [
                                           '.prevUntil()',
                                           '.prevUntil()'
                                         ]
                               },
                               {
                                 'code' => {
                                           'a' => {
                                                  'href' => '/prevAll/',
                                                  'content' => '.prevAll()'
                                                }
                                         },
                                 'content' => [
                                                'If the selector is not matched or is not supplied, all previous siblings will be selected; in these cases it selects the same elements as the ',
                                                ' method does when no filter selector is provided.'
                                              ]
                               },
                               {
                                 'content' => [
                                                ', A DOM node or jQuery object, instead of a selector, may be used for the first ',
                                                ' argument.'
                                              ],
                                 'strong' => [
                                             'As of jQuery 1.6',
                                             '.prevUntil()'
                                           ]
                               },
                               'The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.'
                             ]
                      },
          'name' => 'prevUntil',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.4'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ],
          'desc' => 'Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.',
          'title' => '.prevUntil()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/promise.xml ####
Possible keys are: longdesc example name type category signature title return desc
$VAR1 = {
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.'
                                              ],
                                 'code' => '.promise()'
                               },
                               {
                                 'code' => [
                                           'type',
                                           '"fx"'
                                         ],
                                 'content' => [
                                                ' By default, ',
                                                ' is ',
                                                ', which means the returned Promise is resolved when all animations of the selected elements have completed.'
                                              ]
                               },
                               {
                                 'code' => '.promise()',
                                 'content' => [
                                                ' Resolve context and sole argument is the collection onto which ',
                                                ' has been called. '
                                              ]
                               },
                               {
                                 'content' => [
                                                ' If ',
                                                ' is provided, ',
                                                ' will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.'
                                              ],
                                 'code' => [
                                           'target',
                                           '.promise()'
                                         ]
                               }
                             ],
                        'div' => {
                                 'p' => {
                                        'strong' => 'Note: ',
                                        'content' => [
                                                       'The returned Promise is linked to a Deferred object stored on the ',
                                                       ' for an element. Since the',
                                                       ' method removes the element\'s data as well as the element itself, it will prevent any of the element\'s unresolved Promises from resolving. If it is necessary to remove an element from the DOM before its Promise is resolved, use ',
                                                       ' instead and follow with ',
                                                       ' after resolution.'
                                                     ],
                                        'code' => [
                                                  '.data()',
                                                  '.remove()',
                                                  '.detach()',
                                                  '.removeData()'
                                                ]
                                      },
                                 'class' => 'warning'
                               }
                      },
          'example' => [
                       {
                         'desc' => {
                                   'code' => '.promise()',
                                   'content' => [
                                                  'Using ',
                                                  ' on a collection with no active animation returns a resolved Promise:'
                                                ]
                                 },
                         'code' => '
var div = $( "<div>" );

div.promise().done(function( arg1 ) {
  // Will fire right away and alert "true"
  alert( this === div && arg1 === div );
});
'
                       },
                       {
                         'code' => '
$( "button" ).on( "click", function() {
  $( "p" ).append( "Started..." );

  $( "div" ).each(function( i ) {
    $( this ).fadeIn().fadeOut( 1000 * ( i + 1 ) );
  });

  $( "div" ).promise().done(function() {
    $( "p" ).append( " Finished! " );
  });
});
',
                         'css' => '
  div {
    height: 50px;
    width: 50px;
    float: left;
    margin-right: 10px;
    display: none;
    background-color: #090;
  }
',
                         'desc' => 'Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):',
                         'html' => '
<button>Go</button>
<p>Ready...</p>
<div></div>
<div></div>
<div></div>
<div></div>
'
                       },
                       {
                         'code' => '
var effect = function() {
  return $( "div" ).fadeIn( 800 ).delay( 1200 ).fadeOut();
};

$( "button" ).on( "click", function() {
  $( "p" ).append( " Started... " );

  $.when( effect() ).done(function() {
    $( "p" ).append( " Finished! " );
  });
});
',
                         'desc' => {
                                   'code' => [
                                             '$.when()',
                                             '.promise()'
                                           ],
                                   'content' => [
                                                  'Resolve the returned Promise using a ',
                                                  ' statement (the ',
                                                  ' method makes it possible to do this with jQuery collections):'
                                                ]
                                 },
                         'html' => '
<button>Go</button>
<p>Ready...</p>
<div></div>
<div></div>
<div></div>
<div></div>
',
                         'css' => '
  div {
    height: 50px;
    width: 50px;
    float: left;
    margin-right: 10px;
    display: none;
    background-color: #090;
  }
'
                       }
                     ],
          'name' => 'promise',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'deferred-object'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'type' => {
                                                 'optional' => 'true',
                                                 'type' => 'String',
                                                 'desc' => ' The type of queue that needs to be observed. ',
                                                 'default' => 'fx'
                                               },
                                       'target' => {
                                                   'type' => 'PlainObject',
                                                   'optional' => 'true',
                                                   'desc' => 'Object onto which the promise methods have to be attached'
                                                 }
                                     },
                         'added' => '1.6'
                       },
          'title' => '.promise()',
          'return' => 'Promise',
          'desc' => ' Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. '
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/prop.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.',
          'entry' => {
                     'prop' => {
                               'signature' => [
                                              {
                                                'argument' => {
                                                              'propertyName' => {
                                                                                'desc' => 'The name of the property to set.',
                                                                                'type' => 'String'
                                                                              },
                                                              'value' => {
                                                                         'type' => 'Anything',
                                                                         'desc' => 'A value to set for the property.'
                                                                       }
                                                            },
                                                'added' => '1.6'
                                              },
                                              {
                                                'argument' => {
                                                              'name' => 'properties',
                                                              'type' => 'PlainObject',
                                                              'desc' => 'An object of property-value pairs to set.'
                                                            },
                                                'added' => '1.6'
                                              },
                                              {
                                                'added' => '1.6',
                                                'argument' => {
                                                              'propertyName' => {
                                                                                'desc' => 'The name of the property to set.',
                                                                                'type' => 'String'
                                                                              },
                                                              'function' => {
                                                                            'argument' => {
                                                                                          'index' => {
                                                                                                     'type' => 'Integer'
                                                                                                   },
                                                                                          'oldPropertyValue' => {
                                                                                                                'type' => 'Anything'
                                                                                                              }
                                                                                        },
                                                                            'type' => 'Function',
                                                                            'return' => {
                                                                                        'type' => 'Anything'
                                                                                      },
                                                                            'desc' => {
                                                                                      'content' => [
                                                                                                     'A function returning the value to set. Receives the index position of the element in the set and the old property value as arguments. Within the function, the keyword ',
                                                                                                     ' refers to the current element.'
                                                                                                   ],
                                                                                      'code' => 'this'
                                                                                    }
                                                                          }
                                                            }
                                              }
                                            ],
                               'category' => [
                                             {
                                               'slug' => 'attributes'
                                             },
                                             {
                                               'slug' => 'manipulation/general-attributes'
                                             },
                                             {
                                               'slug' => 'version/1.6'
                                             }
                                           ],
                               'type' => 'method',
                               'longdesc' => {
                                             'h4' => {
                                                     'content' => 'Computed property values',
                                                     'id' => 'computed-prop-values'
                                                   },
                                             'pre' => [
                                                      {
                                                        'code' => '
$( "input" ).prop( "disabled", false );
$( "input" ).prop( "checked", true );
$( "input" ).val( "someValue" );
      '
                                                      },
                                                      {
                                                        'code' => '
$( "input[type=\'checkbox\']" ).prop( "checked", function( i, val ) {
  return !val;
});
      '
                                                      }
                                                    ],
                                             'p' => [
                                                    {
                                                      'content' => [
                                                                     'The ',
                                                                     " method is a convenient way to set the value of properties\x{2014}especially when setting multiple properties, using values returned by a function, or setting values on multiple elements at once. It should be used when setting ",
                                                                     ', ',
                                                                     ', ',
                                                                     ', ',
                                                                     ', ',
                                                                     ', ',
                                                                     ', or ',
                                                                     '. Since jQuery 1.6, these properties can no longer be set with the ',
                                                                     ' method. They do not have corresponding attributes and are only properties.'
                                                                   ],
                                                      'code' => [
                                                                '.prop()',
                                                                'selectedIndex',
                                                                'tagName',
                                                                'nodeName',
                                                                'nodeType',
                                                                'ownerDocument',
                                                                'defaultChecked',
                                                                'defaultSelected',
                                                                '.attr()'
                                                              ]
                                                    },
                                                    {
                                                      'content' => [
                                                                     'Properties generally affect the dynamic state of a DOM element without changing the serialized HTML attribute. Examples include the ',
                                                                     ' property of input elements, the ',
                                                                     ' property of inputs and buttons, or the ',
                                                                     ' property of a checkbox. The ',
                                                                     ' method should be used to set disabled and checked instead of the ',
                                                                     ' method. The ',
                                                                     ' method should be used for getting and setting value.'
                                                                   ],
                                                      'code' => [
                                                                'value',
                                                                'disabled',
                                                                'checked',
                                                                '.prop()',
                                                                {
                                                                  'a' => {
                                                                         'content' => '.attr()',
                                                                         'href' => '/attr/'
                                                                       }
                                                                },
                                                                {
                                                                  'a' => {
                                                                         'href' => '/val/',
                                                                         'content' => '.val()'
                                                                       }
                                                                }
                                                              ]
                                                    },
                                                    {
                                                      'content' => [
                                                                     ' the ',
                                                                     ' method should not be used to set these properties to false. Once a native property is removed, it cannot be added again. See ',
                                                                     ' for more information.'
                                                                   ],
                                                      'strong' => 'Important:',
                                                      'code' => [
                                                                {
                                                                  'a' => {
                                                                         'href' => '/removeProp/',
                                                                         'content' => '.removeProp()'
                                                                       }
                                                                },
                                                                {
                                                                  'a' => {
                                                                         'content' => '.removeProp()',
                                                                         'href' => '/removeProp/'
                                                                       }
                                                                }
                                                              ]
                                                    },
                                                    'By using a function to set properties, you can compute the value based on other properties of the element. For example, to toggle all checkboxes based off their individual values:',
                                                    {
                                                      'code' => [
                                                                'function( index, prop ){})',
                                                                'undefined'
                                                              ],
                                                      'strong' => 'Note: ',
                                                      'content' => [
                                                                     'If nothing is returned in the setter function (ie. ',
                                                                     ', or if ',
                                                                     ' is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.'
                                                                   ]
                                                    }
                                                  ]
                                           },
                               'example' => {
                                            'css' => '
  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }
',
                                            'desc' => 'Disable all checkboxes on the page.',
                                            'html' => '
  <input type="checkbox" checked="checked">
  <input type="checkbox">
  <input type="checkbox">
  <input type="checkbox" checked="checked">
',
                                            'code' => '
$( "input[type=\'checkbox\']" ).prop({
  disabled: true
});
'
                                          },
                               'note' => {
                                         'type' => 'additional',
                                         'id' => 'prop-memory-leaks'
                                       },
                               'desc' => 'Set one or more properties for the set of matched elements.',
                               'return' => 'jQuery'
                             }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/pushStack.xml ####
Possible keys are: category name type longdesc example signature return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'internals'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.3'
                        }
                      ],
          'name' => 'pushStack',
          'type' => 'method',
          'longdesc' => {},
          'example' => {
                       'code' => '
jQuery([])
  .pushStack( document.getElementsByTagName( "div" ) )
  .remove()
  .end();
',
                       'desc' => 'Add some elements onto the jQuery stack, then pop back off again.'
                     },
          'signature' => [
                         {
                           'argument' => {
                                         'type' => 'Array',
                                         'name' => 'elements',
                                         'desc' => 'An array of elements to push onto the stack and make into a new jQuery object.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.3',
                           'argument' => {
                                         'elements' => {
                                                       'desc' => 'An array of elements to push onto the stack and make into a new jQuery object.',
                                                       'type' => 'Array'
                                                     },
                                         'arguments' => {
                                                        'desc' => 'The arguments that were passed in to the jQuery method (for serialization).',
                                                        'type' => 'Array'
                                                      },
                                         'name' => {
                                                   'desc' => 'The name of a jQuery method that generated the array of elements.',
                                                   'type' => 'String'
                                                 }
                                       }
                         }
                       ],
          'return' => 'jQuery',
          'title' => '.pushStack()',
          'desc' => 'Add a collection of DOM elements onto the jQuery stack.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/queue.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'queue' => {
                                'signature' => [
                                               {
                                                 'argument' => {
                                                               'newQueue' => {
                                                                             'desc' => 'An array of functions to replace the current queue contents.',
                                                                             'type' => 'Array'
                                                                           },
                                                               'queueName' => {
                                                                              'desc' => {
                                                                                        'code' => 'fx',
                                                                                        'content' => [
                                                                                                       'A string containing the name of the queue. Defaults to ',
                                                                                                       ', the standard effects queue.'
                                                                                                     ]
                                                                                      },
                                                                              'type' => 'String',
                                                                              'optional' => 'true'
                                                                            }
                                                             },
                                                 'added' => '1.2'
                                               },
                                               {
                                                 'argument' => {
                                                               'queueName' => {
                                                                              'desc' => {
                                                                                        'code' => 'fx',
                                                                                        'content' => [
                                                                                                       'A string containing the name of the queue. Defaults to ',
                                                                                                       ', the standard effects queue.'
                                                                                                     ]
                                                                                      },
                                                                              'type' => 'String',
                                                                              'optional' => 'true'
                                                                            },
                                                               'callback' => {
                                                                             'desc' => 'The new function to add to the queue, with a function to call that will dequeue the next item.',
                                                                             'argument' => {
                                                                                           'type' => 'Function',
                                                                                           'name' => 'next'
                                                                                         },
                                                                             'type' => 'Function'
                                                                           }
                                                             },
                                                 'added' => '1.2'
                                               }
                                             ],
                                'type' => 'method',
                                'longdesc' => {
                                              'pre' => [
                                                       {
                                                         'code' => '
$( "#foo" ).slideUp().fadeIn();
      '
                                                       },
                                                       {
                                                         'code' => '
$( "#foo" ).slideUp();
$( "#foo" ).queue(function() {
  alert( "Animation complete." );
  $( this ).dequeue();
});
      '
                                                       },
                                                       {
                                                         'code' => '
$( "#foo" ).slideUp(function() {
  alert( "Animation complete." );
});
      '
                                                       },
                                                       {
                                                         'code' => '
$( "#test" ).queue(function( next ) {
    // Do some stuff...
    next();
});
    '
                                                       }
                                                     ],
                                              'p' => [
                                                     {
                                                       'content' => [
                                                                      'Every element can have one to many queues of functions attached to it by jQuery. In most applications, only one queue (called ',
                                                                      ') is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution. The typical example of this is calling multiple animation methods on an element. For example:'
                                                                    ],
                                                       'code' => 'fx'
                                                     },
                                                     {
                                                       'code' => 'fx',
                                                       'content' => [
                                                                      'When this statement is executed, the element begins its sliding animation immediately, but the fading transition is placed on the ',
                                                                      ' queue to be called only once the sliding transition is complete.'
                                                                    ]
                                                     },
                                                     {
                                                       'content' => [
                                                                      'The ',
                                                                      ' method allows us to directly manipulate this queue of functions. Calling ',
                                                                      ' with a callback is particularly useful; it allows us to place a new function at the end of the queue. The callback function is executed once for each element in the jQuery set.'
                                                                    ],
                                                       'code' => [
                                                                 '.queue()',
                                                                 '.queue()'
                                                               ]
                                                     },
                                                     'This feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.',
                                                     'This is equivalent to:',
                                                     {
                                                       'content' => [
                                                                      'Note that when adding a function with ',
                                                                      ', we should ensure that ',
                                                                      ' is eventually called so that the next function in line executes.'
                                                                    ],
                                                       'code' => [
                                                                 '.queue()',
                                                                 '.dequeue()'
                                                               ]
                                                     },
                                                     {
                                                       'strong' => 'As of jQuery 1.4',
                                                       'content' => ', the function that\'s called is passed another function as the first argument. When called, this automatically dequeues the next item and keeps the queue moving. We use it as follows:'
                                                     }
                                                   ]
                                            },
                                'example' => [
                                             {
                                               'code' => '
$( document.body ).click(function() {
  $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 2000 )
    .queue(function() {
      $( this ).addClass( "newcolor" ).dequeue();
    })
    .animate({ left: "-=200" }, 500 )
    .queue(function() {
      $( this ).removeClass( "newcolor" ).dequeue();
    })
    .slideUp();
});
',
                                               'html' => '
Click here...
<div></div>
',
                                               'desc' => 'Queue a custom function.',
                                               'css' => '
  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }
'
                                             },
                                             {
                                               'css' => '
  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }
',
                                               'html' => '
<button id="start">Start</button>
<button id="stop">Stop</button>
<div></div>
',
                                               'desc' => 'Set a queue array to delete the queue.',
                                               'code' => '
$( "#start" ).click(function() {
  $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 5000 )
    .queue(function() {
      $( this ).addClass( "newcolor" ).dequeue();
    })
    .animate({ left: \'-=200\' }, 1500 )
    .queue(function() {
      $( this ).removeClass( "newcolor" ).dequeue();
    })
    .slideUp();
});
$( "#stop" ).click(function() {
  $( "div" )
    .queue( "fx", [] )
    .stop();
});
'
                                             }
                                           ],
                                'category' => [
                                              {
                                                'slug' => 'effects/custom-effects'
                                              },
                                              {
                                                'slug' => 'data'
                                              },
                                              {
                                                'slug' => 'utilities'
                                              },
                                              {
                                                'slug' => 'version/1.2'
                                              }
                                            ],
                                'desc' => 'Manipulate the queue of functions to be executed, once for each matched element.',
                                'return' => 'jQuery'
                              }
                   },
          'desc' => 'Show or manipulate the queue of functions to be executed on the matched elements.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/radio-selector.xml ####
Possible keys are: note desc title sample return signature example longdesc name type category
$VAR1 = {
          'note' => {
                    'data-alt' => '[type="radio"]',
                    'data-selector' => ':radio',
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension-alt'
                  },
          'desc' => 'Selects all  elements of type radio.',
          'title' => ':radio Selector',
          'sample' => ':radio',
          'return' => '',
          'signature' => {
                         'added' => '1.0'
                       },
          'example' => {
                       'css' => '
  textarea {
    height: 25px;
  }
',
                       'desc' => 'Finds all radio inputs.',
                       'html' => '
<form>
  <input type="button" value="Input Button">
  <input type="checkbox">
  <input type="file">
  <input type="hidden">
  <input type="image">
  <input type="password">
  <input type="radio" name="asdf">
  <input type="radio" name="asdf">
  <input type="reset">
  <input type="submit">
  <input type="text">
  <select>
    <option>Option</option>
  </select>
  <textarea></textarea>
  <button>Button</button>
</form>
<div></div>
',
                       'code' => '
var input = $( "form input:radio" )
  .wrap( "<span></span>" )
  .parent()
    .css({
      background: "yellow",
      border: "3px red solid"
    });

$( "div" )
  .text( "For this type jQuery found " + input.length + "." )
  .css( "color", "red" );

// Prevent form submission
$( "form" ).submit(function( event ) {
  event.preventDefault();
});
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '$( ":radio" )',
                                           '$( "[type=radio]" )',
                                           '$( ":radio" )',
                                           '$( "*:radio" )',
                                           '$( "input:radio" )'
                                         ],
                                 'content' => [
                                                ' is equivalent to ',
                                                '. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare ',
                                                ' is equivalent to ',
                                                ', so ',
                                                ' should be used instead. '
                                              ]
                               },
                               {
                                 'code' => '$( "input[name=gender]:radio" )',
                                 'content' => 'To select a set of associated radio buttons, you might use: '
                               }
                             ]
                      },
          'name' => 'radio',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/ready.xml ####
Possible keys are: category name type longdesc example signature return title desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/document-loading'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'ready',
          'type' => 'method',
          'longdesc' => {
                        'h4' => 'Aliasing the jQuery Namespace',
                        'ul' => {
                                'li' => [
                                        {
                                          'code' => '$( document ).ready( handler )'
                                        },
                                        {
                                          'code' => '$().ready( handler )',
                                          'content' => ' (this is not recommended)'
                                        },
                                        {
                                          'code' => '$( handler )'
                                        }
                                      ]
                              },
                        'div' => {
                                 'class' => 'warning',
                                 'p' => {
                                        'content' => [
                                                       'The ',
                                                       ' method is generally incompatible with the ',
                                                       ' attribute. If ',
                                                       ' must be used, either do not use ',
                                                       ' or use jQuery\'s ',
                                                       ' method to attach ',
                                                       ' event handlers to the window or to more specific items, like images.
      '
                                                     ],
                                        'code' => [
                                                  '.ready()',
                                                  '<body onload="">',
                                                  'load',
                                                  '.ready()',
                                                  '.load()',
                                                  'load'
                                                ]
                                      }
                               },
                        'p' => [
                               {
                                 'code' => [
                                           'load',
                                           '.ready()'
                                         ],
                                 'content' => [
                                                'While JavaScript provides the ',
                                                ' event for executing code when a page is rendered, this event does not get triggered until all assets such as images have been completely received. In most cases, the script can be run as soon as the DOM hierarchy has been fully constructed. The handler passed to ',
                                                ' is guaranteed to be executed after the DOM is ready, so this is usually the best place to attach all other event handlers and run other jQuery code.  When using scripts that rely on the value of CSS style properties, it\'s important to reference external stylesheets or embed style elements before referencing the scripts.'
                                              ]
                               },
                               {
                                 'code' => 'load',
                                 'content' => [
                                                'In cases where code relies on loaded assets (for example, if the dimensions of an image are required), the code should be placed in a handler for the ',
                                                ' event instead.'
                                              ]
                               },
                               'All three of the following syntaxes are equivalent:',
                               {
                                 'em' => [
                                         'deprecated as of jQuery 1.8',
                                         'after'
                                       ],
                                 'code' => [
                                           '$(document).on( "ready", handler )',
                                           '.on( "ready" )'
                                         ],
                                 'content' => [
                                                'There is also ',
                                                ', ',
                                                '. This behaves similarly to the ready method but if the ready event has already fired and you try to ',
                                                ' the bound handler will not be executed. Ready handlers bound this way are executed ',
                                                ' any bound by the other three methods above.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' method can only be called on a jQuery object matching the current document, so the selector can be omitted.'
                                              ],
                                 'code' => '.ready()'
                               },
                               {
                                 'code' => '.ready()',
                                 'content' => [
                                                'The ',
                                                ' method is typically used with an anonymous function:'
                                              ]
                               },
                               'Which is equivalent to calling:',
                               {
                                 'content' => [
                                                'If ',
                                                ' is called after the DOM has been initialized, the new handler passed in will be executed immediately.'
                                              ],
                                 'code' => '.ready()'
                               },
                               {
                                 'content' => [
                                                'When using another JavaScript library, we may wish to call ',
                                                ' to avoid namespace difficulties. When this function is called, the ',
                                                ' shortcut is no longer available, forcing us to write ',
                                                ' each time we would normally write ',
                                                '. However, the handler passed to the ',
                                                ' method can take an argument, which is passed the global ',
                                                ' object. This means we can rename the object within the context of our ',
                                                ' handler without affecting other code:'
                                              ],
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '$.noConflict()',
                                                    'href' => '/jQuery.noConflict/'
                                                  }
                                           },
                                           '$',
                                           'jQuery',
                                           '$',
                                           '.ready()',
                                           'jQuery',
                                           '.ready()'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$( document ).ready(function() {
  // Handler for .ready() called.
});
    '
                                 },
                                 {
                                   'code' => '
$(function() {
  // Handler for .ready() called.
});
    '
                                 },
                                 {
                                   'code' => '
jQuery( document ).ready(function( $ ) {
  // Code using $ as usual goes here.
});
    '
                                 }
                               ]
                      },
          'example' => {
                       'css' => '
  p {
    color: red;
  }
',
                       'html' => '
<p>Not loaded yet.</p>
',
                       'desc' => 'Display a message when the DOM is loaded.',
                       'code' => {
                                 'location' => 'head',
                                 'content' => '
  $( document ).ready(function() {
    $( "p" ).text( "The DOM is now loaded and can be manipulated." );
  });
'
                               }
                     },
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'desc' => 'A function to execute after the DOM is ready.',
                                       'name' => 'handler',
                                       'type' => 'Function'
                                     }
                       },
          'return' => 'jQuery',
          'title' => '.ready()',
          'desc' => 'Specify a function to execute when the DOM is fully loaded.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/remove.xml ####
Possible keys are: signature category name type example longdesc desc return title
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'desc' => 'A selector expression that filters the set of matched elements to be removed.',
                                       'type' => 'String',
                                       'name' => 'selector',
                                       'optional' => 'true'
                                     },
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'manipulation/dom-removal'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'name' => 'remove',
          'type' => 'method',
          'example' => [
                       {
                         'code' => '
$( "button" ).click(function() {
  $( "p" ).remove();
});
',
                         'css' => '
  p {
    background: yellow;
    margin: 6px 0;
  }
',
                         'html' => '
<p>Hello</p>
how are
<p>you?</p>
<button>Call remove() on paragraphs</button>
',
                         'desc' => 'Removes all paragraphs from the DOM'
                       },
                       {
                         'css' => '
  p {
    background: yellow;
    margin: 6px 0;
  }
',
                         'html' => '
<p class="hello">Hello</p>
how are
<p>you?</p>
<button>Call remove( ":contains(\'Hello\')" ) on paragraphs</button>
',
                         'desc' => {
                                   'code' => '$("p").filter(":contains(\'Hello\')").remove()',
                                   'content' => [
                                                  'Removes all paragraphs that contain "Hello" from the DOM.  Analogous to doing ',
                                                  '.'
                                                ]
                                 },
                         'code' => '
$( "button" ).click(function() {
  $( "p" ).remove( ":contains(\'Hello\')" );
});
'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <div class="hello">Hello</div>
  <div class="goodbye">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".hello" ).remove();
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="goodbye">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "div" ).remove( ".hello" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="goodbye">Goodbye</div>
</div>
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'Similar to ',
                                                ', the ',
                                                ' method takes elements out of the DOM. Use ',
                                                ' when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data  associated with the elements are removed. To remove the elements without removing data and events, use ',
                                                ' instead.'
                                              ],
                                 'code' => [
                                           {
                                             'a' => {
                                                    'content' => '.empty()',
                                                    'href' => '/empty/'
                                                  }
                                           },
                                           '.remove()',
                                           '.remove()',
                                           {
                                             'a' => {
                                                    'content' => '.detach()',
                                                    'href' => '/detach/'
                                                  }
                                           }
                                         ]
                               },
                               'Consider the following HTML:',
                               'We can target any element for removal:',
                               {
                                 'code' => '<div>',
                                 'content' => [
                                                'This will result in a DOM structure with the ',
                                                ' element deleted:'
                                              ]
                               },
                               {
                                 'code' => '<div class="hello">',
                                 'content' => [
                                                'If we had any number of nested elements inside ',
                                                ', they would be removed, too. Other jQuery constructs such as data or event handlers are erased as well.'
                                              ]
                               },
                               'We can also include a selector as an optional parameter. For example, we could rewrite the previous DOM removal code as follows:',
                               'This would result in the same DOM structure:'
                             ]
                      },
          'desc' => 'Remove the set of matched elements from the DOM.',
          'return' => 'jQuery',
          'title' => '.remove()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/removeAttr.xml ####
Possible keys are: return title desc category name type example longdesc signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.removeAttr()',
          'desc' => 'Remove an attribute from each element in the set of matched elements.',
          'category' => [
                        {
                          'slug' => 'attributes'
                        },
                        {
                          'slug' => 'manipulation/general-attributes'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ],
          'name' => 'removeAttr',
          'type' => 'method',
          'example' => {
                       'code' => '
(function() {
  var inputTitle = $( "input" ).attr( "title" );
  $( "button" ).click(function() {
    var input = $( this ).next();

    if ( input.attr( "title" ) === inputTitle ) {
      input.removeAttr( "title" )
    } else {
      input.attr( "title", inputTitle );
    }

    $( "#log" ).html( "input title is now " + input.attr( "title" ) );
  });
})();
',
                       'desc' => 'Clicking the button changes the title of the input next to it. Move the mouse pointer over the text input to see the effect of adding and removing the title attribute.',
                       'html' => '
<button>Change title</button>
<input type="text" title="hello there">
<div id="log"></div>
'
                     },
          'longdesc' => {
                        'note' => {
                                  'type' => 'additional',
                                  'id' => 'svg-support'
                                },
                        'pre' => {
                                 'code' => '
$element.prop( "onclick", null );
console.log( "onclick property: ", $element[ 0 ].onclick );
    '
                               },
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method uses the JavaScript ',
                                                ' function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.'
                                              ],
                                 'code' => [
                                           '.removeAttr()',
                                           'removeAttribute()'
                                         ]
                               },
                               {
                                 'content' => [
                                                ' Removing an inline ',
                                                ' event handler using ',
                                                ' doesn\'t achieve the desired effect in Internet Explorer 8, 9 and 11. To avoid potential problems, use ',
                                                ' instead:'
                                              ],
                                 'strong' => 'Note:',
                                 'code' => [
                                           'onclick',
                                           '.removeAttr()',
                                           '.prop()'
                                         ]
                               }
                             ]
                      },
          'signature' => {
                         'added' => '1.0',
                         'argument' => {
                                       'desc' => 'An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.',
                                       'type' => 'String',
                                       'name' => 'attributeName'
                                     }
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/removeClass.xml ####
Possible keys are: title return desc example longdesc type name category signature
$VAR1 = {
          'title' => '.removeClass()',
          'return' => 'jQuery',
          'desc' => 'Remove a single class, multiple classes, or all classes from each element in the set of matched elements.',
          'example' => [
                       {
                         'desc' => 'Remove the class \'blue\' from the matched elements.',
                         'html' => '
<p class="blue under">Hello</p>
<p class="blue under highlight">and</p>
<p class="blue under">then</p>
<p class="blue under">Goodbye</p>
',
                         'css' => '
  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
  }
  .blue {
    color: blue;
  }
  .under {
    text-decoration: underline;
  }
  .highlight {
    background: yellow;
  }
',
                         'code' => '
$( "p:even" ).removeClass( "blue" );
'
                       },
                       {
                         'code' => '
$( "p:odd" ).removeClass( "blue under" );
',
                         'css' => '
  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
  }
  .blue {
    color: blue;
  }
  .under {
    text-decoration: underline;
  }
  .highlight {
    background: yellow;
  }
',
                         'desc' => 'Remove the class \'blue\' and \'under\' from the matched elements.',
                         'html' => '
<p class="blue under">Hello</p>
<p class="blue under highlight">and</p>
<p class="blue under">then</p>
<p class="blue under">Goodbye</p>
'
                       },
                       {
                         'desc' => 'Remove all the classes from the matched elements.',
                         'html' => '
<p class="blue under">Hello</p>
<p class="blue under highlight">and</p>
<p class="blue under">then</p>
<p class="blue under">Goodbye</p>
',
                         'css' => '
  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
  }
  .blue {
    color: blue;
  }
  .under {
    text-decoration: underline;
  }
  .highlight {
    background: yellow;
  }
',
                         'code' => '
$( "p:eq(1)" ).removeClass();
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               'If a class name is included as a parameter, then only that class will be removed from the set of matched elements. If no class names are specified in the parameter, all classes will be removed.',
                               {
                                 'em' => [
                                         'property',
                                         'attribute'
                                       ],
                                 'code' => [
                                           '.removeClass()',
                                           'className',
                                           'class',
                                           'class'
                                         ],
                                 'content' => [
                                                'Before jQuery version 1.12/2.2, the ',
                                                ' method manipulated the ',
                                                ' of the selected elements, not the ',
                                                '. Once the property was changed, it was the browser that updated the attribute accordingly. This means that when the ',
                                                ' attribute was updated and the last class name was removed, the browser might have set the attribute\'s value to an empty string instead of removing the attribute completely. An implication of this behavior was that this method only worked for documents with HTML DOM semantics (e.g., not pure XML documents).'
                                              ]
                               },
                               {
                                 'content' => [
                                                'As of jQuery 1.12/2.2, this behavior is changed to improve the support for XML documents, including SVG. Starting from this version, the ',
                                                ' is used instead. So, ',
                                                ' can be used on XML or SVG documents.'
                                              ],
                                 'code' => [
                                           'class',
                                           '.removeClass()'
                                         ],
                                 'em' => 'attribute'
                               },
                               'More than one class may be removed at a time, separated by a space, from the set of matched elements, like so:',
                               {
                                 'code' => '.addClass()',
                                 'content' => [
                                                'This method is often used with ',
                                                ' to switch elements\' classes from one to another, like so:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Here, the ',
                                                ' and ',
                                                ' classes are removed from all paragraphs, while ',
                                                ' is added.'
                                              ],
                                 'code' => [
                                           'myClass',
                                           'noClass',
                                           'yourClass'
                                         ]
                               },
                               {
                                 'content' => [
                                                'To replace all existing classes with another class, we can use ',
                                                ' instead.'
                                              ],
                                 'code' => '.attr( "class", "newClass" )'
                               },
                               {
                                 'code' => '.removeClass()',
                                 'content' => [
                                                'As of jQuery 1.4, the ',
                                                ' method allows us to indicate the class to be removed by passing in a function.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'This example removes the class name of the penultimate ',
                                                ' from the last ',
                                                '.'
                                              ],
                                 'code' => [
                                           '<li>',
                                           '<li>'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$( "p" ).removeClass( "myClass yourClass" )
    '
                                 },
                                 {
                                   'code' => '
$( "p" ).removeClass( "myClass noClass" ).addClass( "yourClass" );
    '
                                 },
                                 {
                                   'code' => '
$( "li:last" ).removeClass(function() {
  return $( this ).prev().attr( "class" );
});
    '
                                 }
                               ]
                      },
          'type' => 'method',
          'name' => 'removeClass',
          'category' => [
                        {
                          'slug' => 'attributes'
                        },
                        {
                          'slug' => 'manipulation/class-attribute'
                        },
                        {
                          'slug' => 'css'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'type' => 'String',
                                         'name' => 'className',
                                         'optional' => 'true',
                                         'desc' => 'One or more space-separated classes to be removed from the class attribute of each matched element.'
                                       }
                         },
                         {
                           'argument' => {
                                         'desc' => 'A function returning one or more space-separated class names to be removed. Receives the index position of the element in the set and the old class value as arguments.',
                                         'argument' => {
                                                       'index' => {
                                                                  'type' => 'Integer'
                                                                },
                                                       'className' => {
                                                                      'type' => 'String'
                                                                    }
                                                     },
                                         'return' => {
                                                     'type' => 'String'
                                                   },
                                         'name' => 'function',
                                         'type' => 'Function'
                                       },
                           'added' => '1.4'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/removeData.xml ####
Possible keys are: desc title return signature longdesc example type name category
$VAR1 = {
          'desc' => 'Remove a previously-stored piece of data.',
          'title' => '.removeData()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'argument' => {
                                         'desc' => 'A string naming the piece of data to delete.',
                                         'name' => 'name',
                                         'type' => 'String',
                                         'optional' => 'true'
                                       },
                           'added' => '1.2.3'
                         },
                         {
                           'added' => '1.7',
                           'argument' => {
                                         'desc' => 'An array or space-separated string naming the pieces of data to delete.',
                                         'name' => 'list',
                                         'type' => {
                                                   'String' => {},
                                                   'Array' => {}
                                                 },
                                         'optional' => 'true'
                                       }
                         }
                       ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method allows us to remove values that were previously set using ',
                                                '. When called with the name of a key, ',
                                                ' deletes that particular value. When called with no arguments, ',
                                                ' removes all values.'
                                              ],
                                 'code' => [
                                           '.removeData()',
                                           '.data()',
                                           '.removeData()',
                                           '.removeData()'
                                         ]
                               },
                               {
                                 'content' => [
                                                '
      Note that ',
                                                ' will only remove data from jQuery\'s internal ',
                                                ' cache, and any corresponding ',
                                                ' attributes on the element will not be removed. A later call to ',
                                                '
      will therefore re-retrieve the value from the ',
                                                ' attribute. To prevent this, use ',
                                                ' alongside ',
                                                ' to remove the ',
                                                ' attribute as well. Prior to jQuery 1.4.3,
      as ',
                                                ' did not use ',
                                                ' attributes, this was not an issue.
    '
                                              ],
                                 'code' => [
                                           '.removeData()',
                                           '.data()',
                                           'data-',
                                           'data()',
                                           'data-',
                                           '.removeAttr()',
                                           '.removeData()',
                                           'data-',
                                           'data()',
                                           'data-'
                                         ]
                               },
                               {
                                 'code' => '.removeData()',
                                 'strong' => 'As of jQuery 1.7',
                                 'content' => [
                                                ', when called with an array of keys or a string of space-separated keys, ',
                                                ' deletes the value of each key in that array or string.'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'html' => '
<div>value1 before creation: <span></span></div>
<div>value1 after creation: <span></span></div>
<div>value1 after removal: <span></span></div>
<div>value2 after removal: <span></span></div>
',
                       'desc' => 'Set a data store for 2 names then remove one of them.',
                       'css' => '
  div {
    margin: 2px;
    color: blue;
  }
  span {
    color: red;
  }
',
                       'code' => '
$( "span:eq(0)" ).text( "" + $( "div" ).data( "test1" ) );
$( "div" ).data( "test1", "VALUE-1" );
$( "div" ).data( "test2", "VALUE-2" );
$( "span:eq(1)" ).text( "" + $( "div").data( "test1" ) );
$( "div" ).removeData( "test1" );
$( "span:eq(2)" ).text( "" + $( "div" ).data( "test1" ) );
$( "span:eq(3)" ).text( "" + $( "div" ).data( "test2" ) );
'
                     },
          'type' => 'method',
          'name' => 'removeData',
          'category' => [
                        {
                          'slug' => 'data'
                        },
                        {
                          'slug' => 'miscellaneous/data-storage'
                        },
                        {
                          'slug' => 'version/1.2.3'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/removeProp.xml ####
Possible keys are: category name type longdesc example signature return title desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'attributes'
                        },
                        {
                          'slug' => 'manipulation/general-attributes'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ],
          'name' => 'removeProp',
          'type' => 'method',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.removeProp()',
                                           {
                                             'a' => {
                                                    'content' => '.prop()',
                                                    'href' => '/prop/'
                                                  }
                                           }
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method removes properties set by the ',
                                                ' method.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'With some built-in properties of a DOM element or ',
                                                ' object, browsers may generate an error if an attempt is made to remove the property. jQuery first assigns the value ',
                                                ' to the property and ignores any error the browser generates. In general, it is only necessary to remove custom properties that have been set on an object, and not built-in (native) properties.'
                                              ],
                                 'code' => [
                                           'window',
                                           'undefined'
                                         ]
                               },
                               {
                                 'strong' => 'Note:',
                                 'content' => [
                                                ' Do not use this method to remove native properties such as checked, disabled, or selected. This will remove the property completely and, once removed, cannot be added again to element. Use ',
                                                ' to set these properties to ',
                                                ' instead.'
                                              ],
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/prop/',
                                                    'content' => '.prop()'
                                                  }
                                           },
                                           'false'
                                         ]
                               }
                             ]
                      },
          'example' => {
                       'css' => '
  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }
',
                       'desc' => 'Set a numeric property on a paragraph and then remove it. ',
                       'html' => '
  <p></p>
',
                       'code' => '
para = $( "p" );
para
  .prop( "luggageCode", 1234 )
  .append( "The secret luggage code is: ", String( para.prop( "luggageCode" ) ), ". " )
  .removeProp( "luggageCode" )
  .append( "Now the secret luggage code is: ", String( para.prop( "luggageCode" ) ), ". " );
'
                     },
          'signature' => {
                         'added' => '1.6',
                         'argument' => {
                                       'name' => 'propertyName',
                                       'type' => 'String',
                                       'desc' => 'The name of the property to remove.'
                                     }
                       },
          'return' => 'jQuery',
          'title' => '.removeProp()',
          'desc' => 'Remove a property for the set of matched elements.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'prop-memory-leaks'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/replaceAll.xml ####
Possible keys are: category name type longdesc example signature return title desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'manipulation/dom-replacement'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'name' => 'replaceAll',
          'type' => 'method',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <div class="inner first">Hello</div>
  <div class="inner second">And</div>
  <div class="inner third">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '$( "<h2>New heading</h2>" ).replaceAll( ".inner" );'
                                 },
                                 {
                                   'code' => '
<div class="container">
  <h2>New heading</h2>
  <h2>New heading</h2>
  <h2>New heading</h2>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".first" ).replaceAll( ".third" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="inner second">And</div>
  <div class="inner first">Hello</div>
</div>
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method is similar to ',
                                                ', but with the source and target reversed. Consider this DOM structure:'
                                              ],
                                 'code' => [
                                           '.replaceAll()',
                                           {
                                             'a' => {
                                                    'content' => '.replaceWith()',
                                                    'href' => '/replaceWith/'
                                                  }
                                           }
                                         ]
                               },
                               'We can create an element, then replace other elements with it:',
                               'This causes all of them to be replaced:',
                               'Or, we could select an element to use as the replacement:',
                               'This results in the DOM structure:',
                               'From this example, we can see that the selected element replaces the target by being moved from its old location, not by being cloned.'
                             ]
                      },
          'example' => {
                       'code' => '
$( "<b>Paragraph. </b>" ).replaceAll( "p" );
',
                       'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
',
                       'desc' => 'Replace all the paragraphs with bold words.'
                     },
          'signature' => {
                         'added' => '1.2',
                         'argument' => {
                                       'name' => 'target',
                                       'type' => {
                                                 'Array' => {},
                                                 'Element' => {},
                                                 'Selector' => {},
                                                 'jQuery' => {}
                                               },
                                       'desc' => 'A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.'
                                     }
                       },
          'return' => 'jQuery',
          'title' => '.replaceAll()',
          'desc' => 'Replace each target element with the set of matched elements.',
          'note' => {
                    'data-title' => '.replaceAll()',
                    'type' => 'additional',
                    'id' => 'removes-data'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/replaceWith.xml ####
Possible keys are: desc note return title signature category name type longdesc example
$VAR1 = {
          'desc' => 'Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.',
          'note' => {
                    'removes-data' => {
                                      'type' => 'additional',
                                      'data-title' => '.replaceWith()'
                                    },
                    'disconnected-manipulation' => {
                                                   'type' => 'additional',
                                                   'data-title' => '.replaceWith()'
                                                 }
                  },
          'return' => 'jQuery',
          'title' => '.replaceWith()',
          'signature' => [
                         {
                           'added' => '1.2',
                           'argument' => {
                                         'desc' => 'The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.',
                                         'name' => 'newContent',
                                         'type' => {
                                                   'htmlString' => {},
                                                   'Array' => {},
                                                   'jQuery' => {},
                                                   'Element' => {}
                                                 }
                                       }
                         },
                         {
                           'added' => '1.4',
                           'argument' => {
                                         'type' => 'Function',
                                         'name' => 'function',
                                         'desc' => 'A function that returns content with which to replace the set of matched elements.'
                                       }
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'manipulation/dom-replacement'
                        },
                        {
                          'slug' => 'version/1.2'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'name' => 'replaceWith',
          'type' => 'method',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <div class="inner first">Hello</div>
  <div class="inner second">And</div>
  <div class="inner third">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "div.second" ).replaceWith( "<h2>New heading</h2>" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="inner first">Hello</div>
  <h2>New heading</h2>
  <div class="inner third">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "div.inner" ).replaceWith( "<h2>New heading</h2>" );
    '
                                 },
                                 {
                                   'code' => '<div class="container">
  <h2>New heading</h2>
  <h2>New heading</h2>
  <h2>New heading</h2>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "div.third" ).replaceWith( $( ".first" ) );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="inner second">And</div>
  <div class="inner first">Hello</div>
</div>
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:'
                                              ],
                                 'code' => '.replaceWith()'
                               },
                               {
                                 'code' => '<div>',
                                 'content' => [
                                                'The second inner ',
                                                ' could be replaced with the specified HTML:'
                                              ]
                               },
                               'This results in the structure:',
                               {
                                 'content' => [
                                                ' inner ',
                                                ' elements could be targeted at once:'
                                              ],
                                 'code' => '<div>',
                                 'em' => 'All'
                               },
                               'This causes all of them to be replaced:',
                               'An element could also be selected as the replacement:',
                               'This results in the DOM structure:',
                               'This example demonstrates that the selected element replaces the target by being moved from its old location, not by being cloned.',
                               {
                                 'em' => 'original',
                                 'content' => [
                                                'The ',
                                                ' method, like most jQuery methods, returns the jQuery object so that other methods can be chained onto it. However, it must be noted that the ',
                                                ' jQuery object is returned. This object refers to the element that has been removed from the DOM, not the new element that has replaced it.'
                                              ],
                                 'code' => '.replaceWith()'
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "button" ).click(function() {
  $( this ).replaceWith( "<div>" + $( this ).text() + "</div>" );
});
',
                         'html' => '
<button>First</button>
<button>Second</button>
<button>Third</button>
',
                         'desc' => 'On click, replace the button with a div containing the same word.',
                         'css' => '
  button {
    display: block;
    margin: 3px;
    color: red;
    width: 200px;
  }
  div {
    color: red;
    border: 2px solid blue;
    width: 200px;
    margin: 3px;
    text-align: center;
  }
'
                       },
                       {
                         'code' => '
$( "p" ).replaceWith( "<b>Paragraph. </b>" );
',
                         'desc' => 'Replace all paragraphs with bold words.',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
'
                       },
                       {
                         'desc' => {
                                   'code' => '$()',
                                   'content' => [
                                                  'On click, replace each paragraph with a div that is already in the DOM and selected with the ',
                                                  ' function. Notice it doesn\'t clone the object but rather moves it to replace the paragraph.'
                                                ]
                                 },
                         'html' => '
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  <div>Replaced!</div>
',
                         'css' => '
  div {
    border: 2px solid blue;
    color: red;
    margin: 3px;
  }
  p {
    border: 2px solid red;
    color: blue;
    margin: 3px;
    cursor: pointer;
  }
',
                         'code' => '
$( "p" ).click(function() {
  $( this ).replaceWith( $( "div" ) );
});
'
                       },
                       {
                         'css' => '
  .container {
    background-color: #991;
  }
  .inner {
    color: #911;
  }
',
                         'html' => '
<p>
  <button>Replace!</button>
</p>
<div class="container">
  <div class="inner">Scooby</div>
  <div class="inner">Dooby</div>
  <div class="inner">Doo</div>
</div>
',
                         'desc' => 'On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.',
                         'code' => '
$( "button" ).on( "click", function() {
  var $container = $( "div.container" ).replaceWith(function() {
    return $( this ).contents();
  });

  $( "p" ).append( $container.attr( "class" ) );
});
'
                       }
                     ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/reset-selector.xml ####
Possible keys are: signature name type example longdesc category desc note return sample title
$VAR1 = {
          'signature' => {
                         'added' => '1.0'
                       },
          'name' => 'reset',
          'type' => 'selector',
          'example' => {
                       'code' => '
var input = $( "input:reset" ).css({
  background: "yellow",
  border: "3px red solid"
});
$( "div" )
  .text( "For this type jQuery found " + input.length + "." )
  .css( "color", "red" );

// Prevent form submission
$( "form" ).submit(function( event ) {
  event.preventDefault();
});
',
                       'desc' => 'Finds all reset inputs.',
                       'html' => '
<form>
  <input type="button" value="Input Button">
  <input type="checkbox">
  <input type="file">
  <input type="hidden">
  <input type="image">
  <input type="password">
  <input type="radio">
  <input type="reset">
  <input type="submit">
  <input type="text">
  <select>
    <option>Option</option>
  </select>
  <textarea></textarea>
  <button>Button</button>
</form>
<div></div>
',
                       'css' => '
  textarea {
    height: 45px;
  }
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => ' is equivalent to ',
                               'code' => [
                                         ':reset',
                                         '[type="reset"]'
                                       ]
                             }
                      },
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'desc' => 'Selects all elements of type reset.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension-alt',
                    'data-alt' => '[type="reset"]',
                    'data-selector' => ':reset'
                  },
          'return' => '',
          'sample' => ':reset',
          'title' => ':reset Selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/resize.xml ####
Possible keys are: note desc title return signature category example longdesc type name
$VAR1 = {
          'note' => {
                    'id' => 'detach-shorthand',
                    'type' => 'additional',
                    'data-event' => 'resize'
                  },
          'desc' => 'Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.',
          'title' => '.resize()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'desc' => 'A function to execute each time the event is triggered.',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'type' => 'Function',
                                         'name' => 'handler'
                                       }
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'eventData' => {
                                                        'optional' => 'true',
                                                        'type' => 'Anything',
                                                        'desc' => 'An object containing data that will be passed to the event handler.'
                                                      },
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'type' => 'Function'
                                                    }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'events/browser-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'example' => {
                       'code' => '
$( window ).resize(function() {
  $( "body" ).prepend( "<div>" + $( window ).width() + "</div>" );
});
',
                       'desc' => 'To see the window width while (or after) it is resized, try:'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first and second variations, and ',
                                                ' in the third.'
                                              ],
                                 'code' => [
                                           '.on(\'resize\', handler)',
                                           '.trigger( "resize" )'
                                         ]
                               },
                               {
                                 'code' => [
                                           'resize',
                                           'window'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' event is sent to the ',
                                                ' element when the size of the browser window changes:'
                                              ]
                               },
                               'Now whenever the browser window\'s size is changed, the message is appended to <div id="log"> one or more times, depending on the browser.',
                               {
                                 'content' => [
                                                'Code in a ',
                                                ' handler should never rely on the number of times the handler is called. Depending on implementation, ',
                                                ' events can be sent continuously as the resizing is in progress (the typical behavior in Internet Explorer and WebKit-based browsers such as Safari and Chrome), or only once at the end of the resize operation (the typical behavior in some other browsers such as Opera).'
                                              ],
                                 'code' => [
                                           'resize',
                                           'resize'
                                         ]
                               }
                             ],
                        'pre' => {
                                 'code' => '
$( window ).resize(function() {
  $( "#log" ).append( "<div>Handler for .resize() called.</div>" );
});
    '
                               }
                      },
          'type' => 'method',
          'name' => 'resize'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/root-selector.xml ####
Possible keys are: desc title sample return signature example longdesc name type category
$VAR1 = {
          'desc' => 'Selects the element that is the root of the document.',
          'title' => ':root Selector',
          'sample' => ':root',
          'return' => '',
          'signature' => {
                         'added' => '1.9'
                       },
          'example' => {
                       'code' => '
$( "<b></b>" ).html( $( ":root" )[ 0 ].nodeName ).appendTo( "#log" );
',
                       'css' => '
  span.fot {
    color: red;
    font-size: 120%;
    font-style: italic;
  }
',
                       'html' => '
<div id="log">The root of this document is: </div>
',
                       'desc' => 'Display the tag name of the root element.'
                     },
          'longdesc' => {
                        'p' => {
                               'code' => [
                                         '$(":root")',
                                         '<html>'
                                       ],
                               'content' => [
                                              'In HTML, the root of the document, and thus the element that ',
                                              ' selects, is always the ',
                                              ' element.'
                                            ]
                             }
                      },
          'name' => 'root',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/scroll.xml ####
Possible keys are: title return note desc category longdesc example name type signature
$VAR1 = {
          'title' => '.scroll()',
          'return' => 'jQuery',
          'note' => {
                    'type' => 'additional',
                    'id' => 'detach-shorthand',
                    'data-event' => 'scroll'
                  },
          'desc' => 'Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.',
          'category' => [
                        {
                          'slug' => 'events/browser-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div id="target" style="overflow: scroll; width: 200px; height: 100px;">
  Lorem ipsum dolor sit amet, consectetur adipisicing elit,
  sed do eiusmod tempor incididunt ut labore et dolore magna
  aliqua. Ut enim ad minim veniam, quis nostrud exercitation
  ullamco laboris nisi ut aliquip ex ea commodo consequat.
  Duis aute irure dolor in reprehenderit in voluptate velit
  esse cillum dolore eu fugiat nulla pariatur. Excepteur
  sint occaecat cupidatat non proident, sunt in culpa qui
  officia deserunt mollit anim id est laborum.
</div>
<div id="other">
  Trigger the handler
</div>
<div id="log"></div>
'
                                 },
                                 {
                                   'code' => '
$( "#target" ).scroll(function() {
  $( "#log" ).append( "<div>Handler for .scroll() called.</div>" );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).scroll();
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first and second variations, and ',
                                                ' in the third.'
                                              ],
                                 'code' => [
                                           '.on( "scroll", handler )',
                                           '.trigger( "scroll" )'
                                         ]
                               },
                               {
                                 'code' => [
                                           'scroll',
                                           'window',
                                           'overflow ',
                                           'scroll',
                                           'auto'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the user scrolls to a different place in the element. It applies to ',
                                                ' objects, but also to scrollable frames and elements with the ',
                                                'CSS property set to ',
                                                ' (or ',
                                                ' when the element\'s explicit height or width is less than the height or width of its contents).'
                                              ]
                               },
                               'For example, consider the HTML:',
                               'The style definition is present to make the target element small enough to be scrollable:',
                               {
                                 'code' => 'scroll',
                                 'content' => [
                                                'The ',
                                                ' event handler can be bound to this element:'
                                              ]
                               },
                               {
                                 'code' => '<div id="log"></div>',
                                 'content' => [
                                                'Now when the user scrolls the text up or down, one or more messages are appended to ',
                                                ':'
                                              ]
                               },
                               {
                                 'samp' => 'Handler for .scroll() called.'
                               },
                               {
                                 'content' => [
                                                'To trigger the event manually, apply ',
                                                ' without an argument:'
                                              ],
                                 'code' => '.scroll()'
                               },
                               {
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also append the message.'
                                              ],
                                 'samp' => 'Trigger the handler'
                               },
                               {
                                 'code' => 'scroll',
                                 'content' => [
                                                'A ',
                                                ' event is sent whenever the element\'s scroll position changes, regardless of the cause. A mouse click or drag on the scroll bar, dragging inside the element, pressing the arrow keys, or using the mouse\'s scroll wheel could cause this event.'
                                              ]
                               }
                             ],
                        'figure' => {
                                    'img' => {
                                             'src' => '/resources/0042_05_11.png',
                                             'alt' => ''
                                           },
                                    'figcaption' => 'Figure 1 - Illustration of the rendered HTML'
                                  }
                      },
          'example' => {
                       'html' => '
<div>Try scrolling the iframe.</div>
<p>Paragraph - <span>Scroll happened!</span></p>
',
                       'desc' => 'To do something when your page is scrolled:',
                       'css' => '
  div {
    color: blue;
  }
  p {
    color: green;
  }
  span {
    color: red;
    display: none;
  }
',
                       'code' => '
$( "p" ).clone().appendTo( document.body );
$( "p" ).clone().appendTo( document.body );
$( "p" ).clone().appendTo( document.body );
$( window ).scroll(function() {
  $( "span" ).css( "display", "inline" ).fadeOut( "slow" );
});
'
                     },
          'name' => 'scroll',
          'type' => 'method',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'argument' => {
                                                       'type' => 'Event',
                                                       'name' => 'eventObject'
                                                     },
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       }
                         },
                         {
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'type' => 'Function'
                                                    },
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/scrollLeft.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element.',
          'entry' => {
                     'scrollLeft' => {
                                     'type' => 'method',
                                     'longdesc' => {
                                                   'p' => {
                                                          'content' => [
                                                                         'The horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the ',
                                                                         ' positions the horizontal scroll of each matched element.'
                                                                       ],
                                                          'code' => 'scrollLeft'
                                                        }
                                                 },
                                     'example' => {
                                                  'code' => '
$( "div.demo" ).scrollLeft( 300 );
',
                                                  'html' => '
<div class="demo"><h1>lalala</h1><p>Hello</p></div>
',
                                                  'desc' => 'Set the scrollLeft of a div.',
                                                  'css' => '
  div.demo {
    background: #ccc none repeat scroll 0 0;
    border: 3px solid #666;
    margin: 5px;
    padding: 5px;
    position: relative;
    width: 200px;
    height: 100px;
    overflow: auto;
  }
  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    width: 1000px;
    height: 1000px;
  }
'
                                                },
                                     'category' => [
                                                   {
                                                     'slug' => 'css'
                                                   },
                                                   {
                                                     'slug' => 'offset'
                                                   },
                                                   {
                                                     'slug' => 'manipulation/style-properties'
                                                   },
                                                   {
                                                     'slug' => 'version/1.2.6'
                                                   }
                                                 ],
                                     'signature' => {
                                                    'added' => '1.2.6',
                                                    'argument' => {
                                                                  'desc' => 'An integer indicating the new position to set the scroll bar to.',
                                                                  'type' => 'Number',
                                                                  'name' => 'value'
                                                                }
                                                  },
                                     'return' => 'jQuery',
                                     'desc' => 'Set the current horizontal position of the scroll bar for each of the set of matched elements.'
                                   }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/scrollTop.xml ####
Possible keys are: entry
$VAR1 = {
          'entry' => {
                     'scrollTop' => {
                                    'return' => 'jQuery',
                                    'desc' => 'Set the current vertical position of the scroll bar for each of the set of matched elements.',
                                    'category' => [
                                                  {
                                                    'slug' => 'css'
                                                  },
                                                  {
                                                    'slug' => 'offset'
                                                  },
                                                  {
                                                    'slug' => 'manipulation/style-properties'
                                                  },
                                                  {
                                                    'slug' => 'version/1.2.6'
                                                  }
                                                ],
                                    'longdesc' => {
                                                  'p' => {
                                                         'content' => [
                                                                        'The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the ',
                                                                        ' positions the vertical scroll of each matched element.'
                                                                      ],
                                                         'code' => 'scrollTop'
                                                       }
                                                },
                                    'example' => {
                                                 'code' => '
$( "div.demo" ).scrollTop( 300 );
',
                                                 'html' => '
<div class="demo"><h1>lalala</h1><p>Hello</p></div>
',
                                                 'desc' => 'Set the scrollTop of a div.',
                                                 'css' => '
  div.demo {
    background: #ccc none repeat scroll 0 0;
    border: 3px solid #666;
    margin: 5px;
    padding: 5px;
    position: relative;
    width: 200px;
    height: 100px;
    overflow: auto;
  }
  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    width: 1000px;
    height: 1000px;
  }
'
                                               },
                                    'type' => 'method',
                                    'signature' => {
                                                   'added' => '1.2.6',
                                                   'argument' => {
                                                                 'type' => 'Number',
                                                                 'name' => 'value',
                                                                 'desc' => 'A number indicating the new position to set the scroll bar to.'
                                                               }
                                                 }
                                  }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/select.xml ####
Possible keys are: category example longdesc name type signature title return desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/form-events'
                        },
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'example' => [
                       {
                         'code' => '
$( ":input" ).select(function() {
  $( "div" ).text( "Something was selected" ).show().fadeOut( 1000 );
});
',
                         'css' => '
  p {
    color: blue;
  }
  div {
    color: red;
  }
',
                         'desc' => 'To do something when text in input boxes is selected:',
                         'html' => '
  <p>Click and drag the mouse to select text in the inputs.</p>
  <input type="text" value="Some text">
  <input type="text" value="to test on">
  <div></div>
  '
                       },
                       {
                         'desc' => 'To trigger the select event on all input elements, try:',
                         'code' => '
$( "input" ).select();
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first two variations, and ',
                                                ' in the third.'
                                              ],
                                 'code' => [
                                           '.on( "select", handler )',
                                           '.trigger( "select" )'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the user makes a text selection inside it. This event is limited to ',
                                                ' fields and ',
                                                ' boxes.'
                                              ],
                                 'code' => [
                                           'select',
                                           '<input type="text">',
                                           '<textarea>'
                                         ]
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to the text input:',
                               {
                                 'content' => [
                                                'Now when any portion of the text is selected, the alert is displayed. Merely setting the location of the insertion point will not trigger the event. To trigger the event manually, apply ',
                                                ' without an argument:'
                                              ],
                                 'code' => '.select()'
                               },
                               'After this code executes, clicks on the Trigger button will also alert the message:',
                               {
                                 'samp' => 'Handler for .select() called.'
                               },
                               {
                                 'code' => 'select',
                                 'content' => [
                                                'In addition, the default ',
                                                ' action on the field will be fired, so the entire text field will be selected.'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<form>
  <input id="target" type="text" value="Hello there">
</form>
<div id="other">
  Trigger the handler
</div>'
                                 },
                                 {
                                   'code' => '
$( "#target" ).select(function() {
  alert( "Handler for .select() called." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other").click(function() {
  $( "#target" ).select();
});
    '
                                 }
                               ],
                        'div' => {
                                 'class' => 'warning',
                                 'p' => 'The method for retrieving the current selected text differs from one browser to another. A number of jQuery plug-ins offer cross-platform solutions.'
                               }
                      },
          'name' => 'select',
          'type' => 'method',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'desc' => 'A function to execute each time the event is triggered.',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'name' => 'handler',
                                         'type' => 'Function'
                                       }
                         },
                         {
                           'argument' => {
                                         'handler' => {
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'name' => 'eventObject',
                                                                    'type' => 'Event'
                                                                  },
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    },
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'optional' => 'true',
                                                        'type' => 'Anything'
                                                      }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'title' => '.select()',
          'return' => 'jQuery',
          'desc' => 'Bind an event handler to the "select" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'data-event' => 'select',
                    'type' => 'additional',
                    'id' => 'detach-shorthand'
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/selected-selector.xml ####
Possible keys are: title sample return desc note example longdesc name type category signature
$VAR1 = {
          'title' => ':selected Selector',
          'sample' => ':selected',
          'return' => '',
          'desc' => 'Selects all elements that are selected.',
          'note' => {
                    'id' => 'jquery-selector-extension',
                    'type' => 'additional',
                    'data-selector' => ':selected'
                  },
          'example' => {
                       'css' => '
  div {
    color: red;
  }
',
                       'desc' => 'Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.',
                       'html' => '
<select name="garden" multiple="multiple">
  <option>Flowers</option>
  <option selected="selected">Shrubs</option>
  <option>Trees</option>
  <option selected="selected">Bushes</option>
  <option>Grass</option>
  <option>Dirt</option>
</select>
<div></div>
',
                       'code' => '
$( "select" )
  .change(function() {
    var str = "";
    $( "select option:selected" ).each(function() {
      str += $( this ).text() + " ";
    });
    $( "div" ).text( str );
  })
  .trigger( "change" );
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The ',
                                              ' selector works for ',
                                              ' elements. It does not work for checkboxes or radio inputs; use ',
                                              ' for them.'
                                            ],
                               'code' => [
                                         ':selected',
                                         '<option>',
                                         ':checked'
                                       ]
                             }
                      },
          'name' => 'selected',
          'type' => 'selector',
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'signature' => {
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/selector.xml ####
Possible keys are: signature deprecated longdesc type name category removed desc title return
$VAR1 = {
          'signature' => {
                         'added' => '1.3'
                       },
          'deprecated' => '1.7',
          'longdesc' => {
                        'p' => {
                               'code' => [
                                         '.selector',
                                         '.live()',
                                         '$.fn.foo = function( selector, options ) { /* plugin code goes here */ };',
                                         '$( "div.bar" ).foo( "div.bar", {dog: "bark"} );',
                                         '"div.bar"',
                                         '.foo()'
                                       ],
                               'content' => [
                                              'The ',
                                              ' property was deprecated in jQuery 1.7 and is only maintained to the extent needed for supporting ',
                                              ' in the jQuery Migrate plugin. It may be removed without notice in a future version. The property was never a reliable indicator of the selector that could be used to obtain the set of elements currently contained in the jQuery set where it was a property, since subsequent traversal methods may have changed the set. Plugins that need to use a selector string within their plugin can require it as a parameter of the method. For example, a "foo" plugin could be written as ',
                                              ', and the person using the plugin would write ',
                                              ' with the ',
                                              ' selector repeated as the first argument of ',
                                              '.'
                                            ]
                             }
                      },
          'type' => 'property',
          'name' => 'selector',
          'category' => [
                        {
                          'slug' => 'internals'
                        },
                        {
                          'slug' => 'properties/global-jquery-object-properties'
                        },
                        {
                          'slug' => 'version/1.3'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.7'
                        },
                        {
                          'slug' => 'removed'
                        }
                      ],
          'removed' => '3.0',
          'desc' => 'A selector representing selector passed to jQuery(), if any, when creating the original set.',
          'title' => '.selector',
          'return' => 'String'
        };
UNSUPPORTED type: property#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/serialize.xml ####
Possible keys are: signature category longdesc example type name desc title return
$VAR1 = {
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'ajax/helper-functions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'longdesc' => {
                        'pre' => {
                                 'code' => '
$( "form" ).on( "submit", function( event ) {
  event.preventDefault();
  console.log( $( this ).serialize() );
});
    '
                               },
                        'p' => [
                               {
                                 'code' => [
                                           '.serialize()',
                                           '<input>',
                                           '<textarea>',
                                           '<select>',
                                           '$( "input, textarea, select" ).serialize();'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method creates a text string in standard URL-encoded notation. It can act on a jQuery object that has selected individual form controls, such as ',
                                                ', ',
                                                ', and ',
                                                ': '
                                              ]
                               },
                               {
                                 'code' => '<form>',
                                 'content' => [
                                                'It is typically easier, however, to select the ',
                                                ' itself for serialization:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'In this case, jQuery serializes the successful controls within the form. Only ',
                                                ' elements are examined for inputs they contain, in all other cases the input elements to be serialized should be part of the set passed to the ',
                                                ' method. Selecting both the form and its children in a set will cause duplicates in the serialized string.'
                                              ],
                                 'code' => [
                                           'form',
                                           '.serialize()'
                                         ]
                               },
                               {
                                 'a' => {
                                        'href' => 'http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2',
                                        'content' => '"successful controls"'
                                      },
                                 'content' => [
                                                'Note: Only ',
                                                ' are serialized to the string. No submit button value is serialized since the form was not submitted using a button. For a form element\'s value to be included in the serialized string, the element must have a ',
                                                ' attribute. Values from checkboxes and radio buttons (',
                                                's of type "radio" or "checkbox") are included only if they are checked. Data from file select elements is not serialized.'
                                              ],
                                 'code' => [
                                           'name',
                                           'input'
                                         ]
                               }
                             ]
                      },
          'example' => {
                       'css' => '
  body, select {
    font-size: 12px;
  }
  form {
    margin: 5px;
  }
  p {
    color: red;
    margin: 5px;
    font-size: 14px;
  }
  b {
    color: blue;
  }
',
                       'desc' => 'Serialize a form to a query string that could be sent to a server in an Ajax request.',
                       'html' => '
<form>
  <select name="single">
    <option>Single</option>
    <option>Single2</option>
  </select>

  <br>
  <select name="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
  </select>

  <br>
  <input type="checkbox" name="check" value="check1" id="ch1">
  <label for="ch1">check1</label>
  <input type="checkbox" name="check" value="check2" checked="checked" id="ch2">
  <label for="ch2">check2</label>

  <br>
  <input type="radio" name="radio" value="radio1" checked="checked" id="r1">
  <label for="r1">radio1</label>
  <input type="radio" name="radio" value="radio2" id="r2">
  <label for="r2">radio2</label>
</form>

<p><tt id="results"></tt></p>
',
                       'code' => '
  function showValues() {
    var str = $( "form" ).serialize();
    $( "#results" ).text( str );
  }
  $( "input[type=\'checkbox\'], input[type=\'radio\']" ).on( "click", showValues );
  $( "select" ).on( "change", showValues );
  showValues();
',
                       'height' => '200'
                     },
          'type' => 'method',
          'name' => 'serialize',
          'desc' => 'Encode a set of form elements as a string for submission.',
          'title' => '.serialize()',
          'return' => 'String'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/serializeArray.xml ####
Possible keys are: desc title return signature category longdesc example type name
$VAR1 = {
          'desc' => 'Encode a set of form elements as an array of names and values.',
          'title' => '.serializeArray()',
          'return' => 'Array',
          'signature' => {
                         'added' => '1.2'
                       },
          'category' => [
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'ajax/helper-functions'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<form>
  <div><input type="text" name="a" value="1" id="a"></div>
  <div><input type="text" name="b" value="2" id="b"></div>
  <div><input type="hidden" name="c" value="3" id="c"></div>
  <div>
    <textarea name="d" rows="8" cols="40">4</textarea>
  </div>
  <div><select name="e">
    <option value="5" selected="selected">5</option>
    <option value="6">6</option>
    <option value="7">7</option>
  </select></div>
  <div>
    <input type="checkbox" name="f" value="8" id="f">
  </div>
  <div>
    <input type="submit" name="g" value="Submit" id="g">
  </div>
</form>
    '
                                 },
                                 {
                                   'code' => '
$( "form" ).submit(function( event ) {
  console.log( $( this ).serializeArray() );
  event.preventDefault();
});
    '
                                 },
                                 {
                                   'code' => '
[
  {
    name: "a",
    value: "1"
  },
  {
    name: "b",
    value: "2"
  },
  {
    name: "c",
    value: "3"
  },
  {
    name: "d",
    value: "4"
  },
  {
    name: "e",
    value: "5"
  }
]
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.serializeArray()',
                                           'form'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery collection of ',
                                                's and/or form controls. The controls can be of several types:'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => 'http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2',
                                        'content' => 'successful controls'
                                      },
                                 'content' => [
                                                'The ',
                                                ' method uses the standard W3C rules for ',
                                                ' to determine which elements it should include; in particular the element cannot be disabled and must contain a ',
                                                ' attribute. No submit button value is serialized since the form was not submitted using a button. Data from file select elements is not serialized.'
                                              ],
                                 'code' => [
                                           '.serializeArray()',
                                           'name'
                                         ]
                               },
                               {
                                 'content' => [
                                                'This method can act on a jQuery object that has selected individual form controls, such as ',
                                                ', ',
                                                ', and ',
                                                '. However, it is typically easier to select the ',
                                                ' element itself for serialization:'
                                              ],
                                 'code' => [
                                           '<input>',
                                           '<textarea>',
                                           '<select>',
                                           '<form>'
                                         ]
                               },
                               {
                                 'code' => 'console.log',
                                 'content' => [
                                                'This produces the following data structure (provided that the browser supports ',
                                                '):'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'code' => '
  function showValues() {
    var fields = $( ":input" ).serializeArray();
    $( "#results" ).empty();
    jQuery.each( fields, function( i, field ) {
      $( "#results" ).append( field.value + " " );
    });
  }

  $( ":checkbox, :radio" ).click( showValues );
  $( "select" ).change( showValues );
  showValues();
',
                       'css' => '
  body, select {
    font-size: 14px;
  }
  form {
    margin: 5px;
  }
  p {
    color: red;
    margin: 5px;
  }
  b {
    color: blue;
  }
',
                       'html' => '
<p><b>Results:</b> <span id="results"></span></p>
<form>
  <select name="single">
    <option>Single</option>
    <option>Single2</option>
  </select>
  <select name="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
  </select>
  <br>
  <input type="checkbox" name="check" value="check1" id="ch1">
  <label for="ch1">check1</label>
  <input type="checkbox" name="check" value="check2" checked="checked" id="ch2">
  <label for="ch2">check2</label>
  <input type="radio" name="radio" value="radio1" checked="checked" id="r1">
  <label for="r1">radio1</label>
  <input type="radio" name="radio" value="radio2" id="r2">
  <label for="r2">radio2</label>
</form>
',
                       'desc' => 'Get the values from a form, iterate through them, and append them to a results display.'
                     },
          'type' => 'method',
          'name' => 'serializeArray'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/show.xml ####
Possible keys are: return title desc note name type longdesc example category signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.show()',
          'desc' => 'Display the matched elements.',
          'note' => {
                    'id' => 'jquery.fx.off',
                    'type' => 'additional',
                    'data-title' => '.show()'
                  },
          'name' => 'show',
          'type' => 'method',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$( ".target" ).show();
    '
                                 },
                                 {
                                   'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123">
With the element initially hidden, we can show it slowly:
$( "#clickme" ).click(function() {
  $( "#book" ).show( "slow", function() {
    // Animation complete.
  });
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => '.show()',
                                 'content' => [
                                                'With no parameters, the ',
                                                ' method is the simplest way to display an element:
    '
                                              ]
                               },
                               {
                                 'code' => [
                                           '.css( "display", "block")',
                                           'display',
                                           'display',
                                           'inline',
                                           'inline'
                                         ],
                                 'content' => [
                                                'The matched elements will be revealed immediately, with no animation. This is roughly equivalent to calling ',
                                                ', except that the ',
                                                ' property is restored to whatever it was initially. If an element has a ',
                                                ' value of ',
                                                ', then is hidden and shown, it will once again be displayed ',
                                                '.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'display: none !important',
                                           '.css( "display", "block !important")',
                                           '.show()'
                                         ],
                                 'strong' => 'Note: ',
                                 'content' => [
                                                ' If using !important in your styles, such as
    ',
                                                ',
    it is necessary to override the style using ',
                                                ' should you wish for ',
                                                ' to function correctly.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'When a duration, a plain object, or a "complete" function is provided, ',
                                                ' becomes an animation method. The ',
                                                ' method animates the width, height, and opacity of the matched elements simultaneously.'
                                              ],
                                 'code' => [
                                           '.show()',
                                           '.show()'
                                         ]
                               },
                               {
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600'
                                         ],
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'As of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ],
                                 'a' => {
                                        'href' => 'http://jqueryui.com',
                                        'content' => 'jQuery UI suite'
                                      }
                               },
                               {
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.'
                                              ],
                                 'code' => 'this'
                               },
                               'We can animate any element, such as a simple image:'
                             ],
                        'div' => {
                                 'p' => {
                                        'strong' => 'Note:',
                                        'content' => ' This method may cause performance issues, especially when used on many elements. If you\'re encountering such issues, use performance testing tools to determine whether this method is causing them. Moreover, this method can cause problems with responsive layouts if the display value differs at different viewport sizes.'
                                      },
                                 'class' => 'warning'
                               },
                        'figure' => {
                                    'figcaption' => {
                                                    'content' => [
                                                                   'Figure 1 - Illustration of the ',
                                                                   ' effect'
                                                                 ],
                                                    'code' => 'show()'
                                                  },
                                    'img' => [
                                             {
                                               'src' => '/resources/0042_06_01.png',
                                               'class' => 'column three',
                                               'alt' => ''
                                             },
                                             {
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_02.png',
                                               'alt' => ''
                                             },
                                             {
                                               'alt' => '',
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_03.png'
                                             },
                                             {
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_04.png',
                                               'alt' => ''
                                             }
                                           ]
                                  }
                      },
          'example' => [
                       {
                         'code' => '
$( "button" ).click(function() {
  $( "p" ).show( "slow" );
});
',
                         'css' => '
  p {
    background: yellow;
  }
',
                         'html' => '
<button>Show it</button>
<p style="display: none">Hello  2</p>
',
                         'desc' => 'Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.'
                       },
                       {
                         'code' => '
$( "#showr" ).click(function() {
  $( "div" ).first().show( "fast", function showNext() {
    $( this ).next( "div" ).show( "fast", showNext );
  });
});

$( "#hidr" ).click(function() {
  $( "div" ).hide( 1000 );
});
',
                         'css' => '
  div {
    background: #def3ca;
    margin: 3px;
    width: 80px;
    display: none;
    float: left;
    text-align: center;
  }
',
                         'html' => '
<button id="showr">Show</button>
<button id="hidr">Hide</button>
<div>Hello 3,</div>
<div>how</div>
<div>are</div>
<div>you?</div>
',
                         'desc' => 'Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div\'s animation ends.'
                       },
                       {
                         'html' => '
<button>Do it!</button>
<span>Are you sure? (type \'yes\' if you are) </span>
<div>
  <form>
    <input type="text"  value="as;ldkfjalsdf">
  </form>
</div>
<p style="display:none;">I\'m hidden...</p>
',
                         'desc' => 'Show all span and input elements with an animation. Change the text once the animation is done.',
                         'css' => '
  span {
    display: none;
  }
  div {
    display: none;
  }
  p {
    font-weight: bold;
    background-color: #fcd;
  }
',
                         'code' => '
function doIt() {
  $( "span,div" ).show( "slow" );
}
// Can pass in function name
$( "button" ).click( doIt );

$( "form" ).submit(function( event ) {
  if ( $( "input" ).val() === "yes" ) {
    $( "p" ).show( 4000, function() {
      $( this ).text( "Ok, DONE! (now showing)" );
    });
  }
  $( "span,div" ).hide( "fast" );

  // Prevent form submission
  event.preventDefault();
});
'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'effects/basics'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'signature' => [
                         {
                           'added' => '1.0'
                         },
                         {
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/complete-argument.xml'
                                           }
                                         ],
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.0',
                           'xi:include' => {
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                           'href' => '../includes/options-argument.xml'
                                         }
                         },
                         {
                           'argument' => {
                                         'name' => 'duration',
                                         'type' => {
                                                   'String' => {},
                                                   'Number' => {}
                                                 },
                                         'desc' => 'A string or number determining how long the animation will run.',
                                         'default' => '400'
                                       },
                           'added' => '1.4.3',
                           'xi:include' => [
                                           {
                                             'href' => '../includes/easing-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ]
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/siblings.xml ####
Possible keys are: signature type name example longdesc category desc return title
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'desc' => 'A string containing a selector expression to match elements against.',
                                       'optional' => 'true',
                                       'type' => 'Selector',
                                       'name' => 'selector'
                                     },
                         'added' => '1.0'
                       },
          'type' => 'method',
          'name' => 'siblings',
          'example' => [
                       {
                         'code' => '
var len = $( ".hilite" ).siblings()
  .css( "color", "red" )
  .length;
$( "b" ).text( len );
',
                         'css' => '
  ul {
    float: left;
    margin: 5px;
    font-size: 16px;
    font-weight: bold;
  }
  p {
    color: blue;
    margin: 10px 20px;
    font-size: 16px;
    padding: 5px;
    font-weight: bolder;
  }
  .hilite {
    background: yellow;
  }
',
                         'desc' => 'Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).',
                         'html' => '
<ul>
  <li>One</li>
  <li>Two</li>
  <li class="hilite">Three</li>
  <li>Four</li>
</ul>

<ul>
  <li>Five</li>
  <li>Six</li>
  <li>Seven</li>
</ul>

<ul>
  <li>Eight</li>
  <li class="hilite">Nine</li>
  <li>Ten</li>
  <li class="hilite">Eleven</li>
</ul>

<p>Unique siblings: <b></b></p>
'
                       },
                       {
                         'html' => '
<div><span>Hello</span></div>
<p class="selected">Hello Again</p>
<p>And Again</p>
',
                         'desc' => 'Find all siblings with a class "selected" of each div.',
                         'code' => '
$( "p" ).siblings( ".selected" ).css( "background", "yellow" );
'
                       }
                     ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li class="third-item">list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li.third-item" ).siblings().css( "background-color", "red" );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => '.siblings()',
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method allows us to search through the siblings of these elements in the DOM tree and construct a new jQuery object from the matching elements.'
                                              ]
                               },
                               {
                                 'code' => '$()',
                                 'content' => [
                                                'The method optionally accepts a selector expression of the same type that we can pass to the ',
                                                ' function. If the selector is supplied, the elements will be filtered by testing whether they match it.'
                                              ]
                               },
                               'Consider a page with a simple list on it:',
                               'If we begin at the third item, we can find its siblings:',
                               'The result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.',
                               {
                                 'code' => '$collection.siblings().not($collection)',
                                 'content' => [
                                                'The original element is not included among the siblings, which is important to remember when we wish to find all elements at a particular level of the DOM tree. However, if the original collection contains more than one element, they might be mutual siblings and will both be found. If you need an exclusive list of siblings, use ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'category' => [
                        {
                          'slug' => 'traversing/tree-traversal'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'desc' => 'Get the siblings of each element in the set of matched elements, optionally filtered by a selector.',
          'return' => 'jQuery',
          'title' => '.siblings()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/size.xml ####
Possible keys are: deprecated signature category longdesc example name type desc title return
$VAR1 = {
          'deprecated' => '1.8',
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'miscellaneous/dom-element-methods'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.8'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>foo</li>
  <li>bar</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
alert( "Size: " + $( "li" ).size() );
alert( "Size: " + $( "li" ).length );
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' method is deprecated as of jQuery 1.8. Use the ',
                                                ' property instead.'
                                              ],
                                 'code' => [
                                           '.size()',
                                           {
                                             'a' => {
                                                    'content' => '.length',
                                                    'href' => '/length/'
                                                  }
                                           }
                                         ]
                               },
                               {
                                 'code' => [
                                           '.size()',
                                           {
                                             'a' => {
                                                    'href' => '/length/',
                                                    'content' => '.length'
                                                  }
                                           }
                                         ],
                                 'strong' => {
                                             'code' => '.length',
                                             'content' => [
                                                            'the ',
                                                            ' property is preferred'
                                                          ]
                                           },
                                 'content' => [
                                                'The ',
                                                ' method is functionally equivalent to the ',
                                                ' property; however, ',
                                                ' because it does not have the overhead of a function call.'
                                              ]
                               },
                               'Given a simple unordered list on the page:',
                               {
                                 'code' => [
                                           '.size()',
                                           '.length'
                                         ],
                                 'content' => [
                                                'Both ',
                                                ' and ',
                                                ' identify the number of items:'
                                              ]
                               },
                               'This results in two alerts:',
                               {
                                 'samp' => 'Size: 2'
                               },
                               {
                                 'samp' => 'Size: 2'
                               }
                             ]
                      },
          'example' => {
                       'html' => '
<span></span>
<div></div>
',
                       'desc' => 'Count the divs. Click to add more.',
                       'css' => '
  body {
    cursor: pointer;
    min-height: 100px;
  }
  div {
    width: 50px;
    height: 30px;
    margin: 5px;
    float: left;
    background: blue;
  }
  span {
    color: red;
  }
',
                       'code' => '
$( document.body )
  .click(function() {
    $( this ).append( $( "<div>" ) );
    var n = $( "div" ).size();
    $( "span" ).text( "There are " + n + " divs. Click to add more." );
  })

  // Trigger the click to start
  .click();
'
                     },
          'name' => 'size',
          'type' => 'method',
          'desc' => 'Return the number of elements in the jQuery object.',
          'title' => '.size()',
          'return' => 'Integer'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/slice.xml ####
Possible keys are: signature category example longdesc name type desc title return
$VAR1 = {
          'signature' => {
                         'argument' => {
                                       'start' => {
                                                  'type' => 'Integer',
                                                  'desc' => 'An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.'
                                                },
                                       'end' => {
                                                'desc' => 'An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.',
                                                'type' => 'Integer',
                                                'optional' => 'true'
                                              }
                                     },
                         'added' => '1.1.4'
                       },
          'category' => [
                        {
                          'slug' => 'traversing/filtering'
                        },
                        {
                          'slug' => 'version/1.1.4'
                        }
                      ],
          'example' => [
                       {
                         'desc' => 'Turns divs yellow based on a random slice.',
                         'html' => '
<p><button>Turn slice yellow</button>
  <span>Click the button!</span></p>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  ',
                         'css' => '
  div {
    width: 40px;
    height: 40px;
    margin: 10px;
    float: left;
    border: 2px solid blue;
  }
  span {
    color: red;
    font-weight: bold;
  }
  button {
    margin: 5px;
  }
',
                         'height' => '240',
                         'code' => '
function colorEm() {
  var $div = $( "div" );
  var start = Math.floor( Math.random() * $div.length );
  var end = Math.floor( Math.random() * ( $div.length - start ) ) +
    start + 1;
  if ( end === $div.length ) {
    end = undefined;
  }
  $div.css( "background", "" );
  if ( end ) {
    $div.slice( start, end ).css( "background", "yellow" );
  } else {
    $div.slice( start ).css( "background", "yellow" );
  }
  $( "span" ).text( "$( \'div\' ).slice( " + start +
    (end ? ", " + end : "") +
    ").css( \'background\', \'yellow\' );" );
}

$( "button" ).click( colorEm );
'
                       },
                       {
                         'desc' => 'Selects all paragraphs, then slices the selection to include only the first element.',
                         'code' => '
$( "p" ).slice( 0, 1 ).wrapInner( "<b></b>" );
'
                       },
                       {
                         'desc' => 'Selects all paragraphs, then slices the selection to include only the first and second element.',
                         'code' => '
$( "p" ).slice( 0, 2 ).wrapInner( "<b></b>" );
'
                       },
                       {
                         'code' => '
$( "p" ).slice( 1, 2 ).wrapInner( "<b></b>" );
',
                         'desc' => 'Selects all paragraphs, then slices the selection to include only the second element.'
                       },
                       {
                         'code' => '
$( "p" ).slice( 1 ).wrapInner( "<b></b>" );
',
                         'desc' => 'Selects all paragraphs, then slices the selection to include only the second and third element.'
                       },
                       {
                         'desc' => 'Selects all paragraphs, then slices the selection to include only the third element.',
                         'code' => '
$( "p" ).slice( -1 ).wrapInner( "<b></b>" );
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Given a jQuery object that represents a set of DOM elements, the ',
                                                ' method constructs a new jQuery object containing a subset of the elements specified by the ',
                                                ' and, optionally, ',
                                                ' argument. The supplied ',
                                                ' index identifies the position of one of the elements in the set; if ',
                                                ' is omitted, all elements after this one will be included in the result.'
                                              ],
                                 'code' => [
                                           '.slice()',
                                           'start',
                                           'end',
                                           'start',
                                           'end'
                                         ]
                               },
                               'Consider a page with a simple list on it:',
                               'We can apply this method to the set of list items:',
                               'The result of this call is a red background for items 3, 4, and 5. Note that the supplied index is zero-based, and refers to the position of elements within the jQuery object, not within the DOM tree.',
                               'The end parameter allows us to limit the selected range even further. For example:',
                               'Now only items 3 and 4 are selected. The index is once again zero-based; the range extends up to but not including the specified index.',
                               {
                                 'code' => [
                                           '.slice()',
                                           'start',
                                           'end'
                                         ],
                                 'content' => [
                                                'The jQuery ',
                                                ' method is patterned after the JavaScript .slice() method for arrays. One of the features that it mimics is the ability for negative numbers to be passed as either the ',
                                                ' or ',
                                                ' parameter. If a negative number is provided, this indicates a position starting from the end of the set, rather than the beginning. For example:'
                                              ]
                               },
                               {
                                 'code' => [
                                           '-2',
                                           '-1'
                                         ],
                                 'content' => [
                                                'This time only list item 4 is turned red, since it is the only item in the range between two from the end (',
                                                ') and one from the end (',
                                                ').'
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li>list item 3</li>
  <li>list item 4</li>
  <li>list item 5</li>
</ul>
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).slice( 2 ).css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).slice( 2, 4 ).css( "background-color", "red" );
    '
                                 },
                                 {
                                   'code' => '
$( "li" ).slice( -2, -1 ).css( "background-color", "red" );
    '
                                 }
                               ],
                        'h4' => 'Negative Indices'
                      },
          'name' => 'slice',
          'type' => 'method',
          'desc' => 'Reduce the set of matched elements to a subset specified by a range of indices.',
          'title' => '.slice()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/slideDown.xml ####
Possible keys are: return title note desc type name longdesc example category signature
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.slideDown()',
          'note' => {
                    'slide-in-ie' => {
                                     'type' => 'additional',
                                     'data-title' => '.slideDown()'
                                   },
                    'jquery.fx.off' => {
                                       'type' => 'additional',
                                       'data-title' => '.slideDown()'
                                     }
                  },
          'desc' => 'Display the matched elements with a sliding motion.',
          'type' => 'method',
          'name' => 'slideDown',
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123">
    '
                                 },
                                 {
                                   'code' => '
$( "#clickme" ).click(function() {
  $( "#book" ).slideDown( "slow", function() {
    // Animation complete.
  });
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => '.slideDown()',
                                 'content' => [
                                                'The ',
                                                ' method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively. If any other string is supplied, or if the ',
                                                ' parameter is omitted, the default duration of  ',
                                                ' milliseconds is used.'
                                              ],
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600',
                                           'duration',
                                           '400'
                                         ]
                               },
                               'We can animate any element, such as a simple image:',
                               'With the element initially hidden, we can show it slowly:',
                               {
                                 'a' => {
                                        'href' => 'http://jqueryui.com',
                                        'content' => 'jQuery UI suite'
                                      },
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ],
                                 'content' => [
                                                ', an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'strong' => 'As of jQuery 1.4.3'
                               },
                               {
                                 'code' => 'this',
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.'
                                              ]
                               },
                               {
                                 'content' => [
                                                ', the ',
                                                ' method can be used in conjunction with the ',
                                                ' method to execute a single callback for the animation as a whole when ',
                                                ' matching elements have completed their animations ( See the ',
                                                ' ).  '
                                              ],
                                 'strong' => 'As of jQuery 1.6',
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/promise/',
                                                    'content' => '.promise()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'href' => '/deferred.done/',
                                                    'content' => 'deferred.done()'
                                                  }
                                           }
                                         ],
                                 'em' => 'all',
                                 'a' => {
                                        'content' => 'example for .promise()',
                                        'href' => '/promise/#example-1'
                                      }
                               }
                             ],
                        'h4' => {
                                'easing' => {
                                            'content' => 'Easing'
                                          },
                                'callback-function' => {
                                                       'content' => 'Callback Function'
                                                     }
                              },
                        'figure' => {
                                    'img' => [
                                             {
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_17.png',
                                               'alt' => ''
                                             },
                                             {
                                               'alt' => '',
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_18.png'
                                             },
                                             {
                                               'src' => '/resources/0042_06_19.png',
                                               'class' => 'column three',
                                               'alt' => ''
                                             },
                                             {
                                               'alt' => '',
                                               'src' => '/resources/0042_06_20.png',
                                               'class' => 'column three'
                                             }
                                           ],
                                    'figcaption' => {
                                                    'content' => [
                                                                   'Figure 1 - Illustration of the ',
                                                                   ' effect'
                                                                 ],
                                                    'code' => 'slideDown()'
                                                  }
                                  }
                      },
          'example' => [
                       {
                         'html' => '
Click me!
<div></div>
<div></div>
<div></div>
',
                         'desc' => 'Animates all divs to slide down and show themselves over 600 milliseconds.',
                         'css' => '
  div {
    background: #de9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    display: none;
    float: left;
  }
',
                         'code' => '
$( document.body ).click(function () {
  if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).slideDown( "slow" );
  } else {
    $( "div" ).hide();
  }
});
'
                       },
                       {
                         'html' => '
<div>Push!</div>
<input type="text">
<input type="text" class="middle">
<input type="text">
  ',
                         'desc' => 'Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.',
                         'css' => '
  div {
    background: #cfd;
    margin: 3px;
    width: 50px;
    text-align: center;
    float: left;
    cursor: pointer;
    border: 2px outset black;
    font-weight: bolder;
  }
  input {
    display: none;
    width: 120px;
    float: left;
    margin: 10px;
  }
',
                         'code' => '
$( "div" ).click(function() {
  $( this ).css({
    borderStyle: "inset",
    cursor: "wait"
  });
  $( "input" ).slideDown( 1000, function() {
    $( this )
      .css( "border", "2px red inset" )
      .filter( ".middle" )
        .css( "background", "yellow" )
        .focus();
    $( "div" ).css( "visibility", "hidden" );
  });
});

'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'effects/sliding'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'xi:include' => [
                                           {
                                             'href' => '../includes/duration-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/complete-argument.xml'
                                           }
                                         ]
                         },
                         {
                           'xi:include' => {
                                           'href' => '../includes/options-argument.xml',
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                         },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.4.3',
                           'xi:include' => [
                                           {
                                             'href' => '../includes/duration-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/easing-argument.xml'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ]
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/slideToggle.xml ####
Possible keys are: note desc return title signature name type longdesc example category
$VAR1 = {
          'note' => {
                    'slide-in-ie' => {
                                     'type' => 'additional',
                                     'data-title' => '.slideDown()'
                                   },
                    'jquery.fx.off' => {
                                       'data-title' => '.slideToggle()',
                                       'type' => 'additional'
                                     }
                  },
          'desc' => 'Display or hide the matched elements with a sliding motion.',
          'return' => 'jQuery',
          'title' => '.slideToggle()',
          'signature' => [
                         {
                           'xi:include' => [
                                           {
                                             'href' => '../includes/duration-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ],
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.0',
                           'xi:include' => {
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                           'href' => '../includes/options-argument.xml'
                                         }
                         },
                         {
                           'xi:include' => [
                                           {
                                             'href' => '../includes/duration-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'href' => '../includes/easing-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ],
                           'added' => '1.4.3'
                         }
                       ],
          'name' => 'slideToggle',
          'type' => 'method',
          'longdesc' => {
                        'h4' => {
                                'easing' => {
                                            'content' => 'Easing'
                                          },
                                'callback-function' => {
                                                       'content' => 'Callback Function'
                                                     }
                              },
                        'figure' => [
                                    {
                                      'img' => [
                                               {
                                                 'src' => '/resources/0042_06_25.png',
                                                 'class' => 'column three',
                                                 'alt' => ''
                                               },
                                               {
                                                 'alt' => '',
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_26.png'
                                               },
                                               {
                                                 'alt' => '',
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_27.png'
                                               },
                                               {
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_28.png',
                                                 'alt' => ''
                                               }
                                             ],
                                      'figcaption' => {
                                                      'content' => [
                                                                     'Figure 1 - Illustration of the ',
                                                                     ' effect when hiding the image'
                                                                   ],
                                                      'code' => 'slideToggle()'
                                                    }
                                    },
                                    {
                                      'figcaption' => {
                                                      'code' => 'slideToggle()',
                                                      'content' => [
                                                                     'Figure 2 - Illustration of the ',
                                                                     ' effect when showing the image'
                                                                   ]
                                                    },
                                      'img' => [
                                               {
                                                 'alt' => '',
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_29.png'
                                               },
                                               {
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_30.png',
                                                 'alt' => ''
                                               },
                                               {
                                                 'src' => '/resources/0042_06_31.png',
                                                 'class' => 'column three',
                                                 'alt' => ''
                                               },
                                               {
                                                 'alt' => '',
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_32.png'
                                               }
                                             ]
                                    }
                                  ],
                        'pre' => [
                                 {
                                   'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123">
    '
                                 },
                                 {
                                   'code' => '
$( "#clickme" ).click(function() {
  $( "#book" ).slideToggle( "slow", function() {
    // Animation complete.
  });
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.slideToggle()',
                                           'display',
                                           'display',
                                           'inline',
                                           'inline',
                                           'display',
                                           'none'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The ',
                                                ' property is saved and restored as needed. If an element has a ',
                                                ' value of ',
                                                ', then is hidden and shown, it will once again be displayed ',
                                                '. When the height reaches 0 after a hiding animation, the ',
                                                ' style property is set to ',
                                                ' to ensure that the element no longer affects the layout of the page.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600'
                                         ],
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively.'
                                              ]
                               },
                               'We can animate any element, such as a simple image:',
                               {
                                 'code' => '.slideToggle()',
                                 'content' => [
                                                'We will cause ',
                                                ' to be called when another element is clicked:'
                                              ]
                               },
                               'With the element initially shown, we can hide it slowly with the first click:',
                               'A second click will show the element once again:',
                               {
                                 'a' => {
                                        'content' => 'jQuery UI suite',
                                        'href' => 'http://jqueryui.com'
                                      },
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ],
                                 'content' => [
                                                ', an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'strong' => 'As of jQuery 1.4.3'
                               },
                               {
                                 'code' => 'this',
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => '/promise/#example-1',
                                        'content' => 'example for .promise()'
                                      },
                                 'em' => 'all',
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/promise/',
                                                    'content' => '.promise()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'href' => '/deferred.done/',
                                                    'content' => 'deferred.done()'
                                                  }
                                           }
                                         ],
                                 'strong' => 'As of jQuery 1.6',
                                 'content' => [
                                                ', the ',
                                                ' method can be used in conjunction with the ',
                                                ' method to execute a single callback for the animation as a whole when ',
                                                ' matching elements have completed their animations ( See the ',
                                                ' ).  '
                                              ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "button" ).click(function() {
  $( "p" ).slideToggle( "slow" );
});
',
                         'css' => '
  p {
    width: 400px;
  }
',
                         'html' => '
<button>Toggle</button>
<p>
  This is the paragraph to end all paragraphs.  You
  should feel <em>lucky</em> to have seen such a paragraph in
  your life.  Congratulations!
</p>
',
                         'desc' => 'Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.'
                       },
                       {
                         'code' => '
$( "#aa" ).click(function() {
  $( "div:not(.still)" ).slideToggle( "slow", function() {
    var n = parseInt( $( "span" ).text(), 10 );
    $( "span" ).text( n + 1 );
  });
});
',
                         'css' => '
  div {
    background: #b977d1;
    margin: 3px;
    width: 60px;
    height: 60px;
    float: left;
  }
  div.still {
    background: #345;
    width: 5px;
  }
  div.hider {
    display: none;
  }
  span {
    color: red;
  }
  p {
    clear: left;
  }
',
                         'html' => '
<div></div>
<div class="still"></div>
<div style="display:none;">
</div><div class="still"></div>
<div></div>
<div class="still"></div>
<div class="hider"></div>
<div class="still"></div>
<div class="hider"></div>
<div class="still"></div>
<div></div>
<p><button id="aa">Toggle</button> There have been <span>0</span> toggled divs.</p>
',
                         'desc' => 'Animates divs between dividers with a toggle that makes some appear and some disappear.'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'effects/sliding'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/slideUp.xml ####
Possible keys are: category name type longdesc example signature return title desc note
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'effects/sliding'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'name' => 'slideUp',
          'type' => 'method',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.slideUp()',
                                           'display',
                                           'none'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is), the ',
                                                ' style property is set to ',
                                                ' to ensure that the element no longer affects the layout of the page.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively. If any other string is supplied, or if the ',
                                                ' parameter is omitted, the default duration of  ',
                                                ' milliseconds is used.'
                                              ],
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600',
                                           'duration',
                                           '400'
                                         ]
                               },
                               'We can animate any element, such as a simple image:',
                               'With the element initially shown, we can hide it slowly:',
                               {
                                 'content' => [
                                                ', an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'strong' => 'As of jQuery 1.4.3',
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ],
                                 'a' => {
                                        'content' => 'jQuery UI suite',
                                        'href' => 'http://jqueryui.com'
                                      }
                               },
                               {
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.'
                                              ],
                                 'code' => 'this'
                               },
                               {
                                 'a' => {
                                        'href' => '/promise/#example-1',
                                        'content' => 'example for .promise()'
                                      },
                                 'em' => 'all',
                                 'code' => [
                                           {
                                             'a' => {
                                                    'href' => '/promise/',
                                                    'content' => '.promise()'
                                                  }
                                           },
                                           {
                                             'a' => {
                                                    'content' => 'deferred.done()',
                                                    'href' => '/deferred.done/'
                                                  }
                                           }
                                         ],
                                 'strong' => 'As of jQuery 1.6',
                                 'content' => [
                                                ', the ',
                                                ' method can be used in conjunction with the ',
                                                ' method to execute a single callback for the animation as a whole when ',
                                                ' matching elements have completed their animations ( See the ',
                                                ' ).  '
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123">
    '
                                 },
                                 {
                                   'code' => '
$( "#clickme" ).click(function() {
  $( "#book" ).slideUp( "slow", function() {
    // Animation complete.
  });
});
    '
                                 }
                               ],
                        'figure' => {
                                    'img' => [
                                             {
                                               'alt' => '',
                                               'src' => '/resources/0042_06_21.png',
                                               'class' => 'column three'
                                             },
                                             {
                                               'src' => '/resources/0042_06_22.png',
                                               'class' => 'column three',
                                               'alt' => ''
                                             },
                                             {
                                               'alt' => '',
                                               'src' => '/resources/0042_06_23.png',
                                               'class' => 'column three'
                                             },
                                             {
                                               'class' => 'column three',
                                               'src' => '/resources/0042_06_24.png',
                                               'alt' => ''
                                             }
                                           ],
                                    'figcaption' => {
                                                    'content' => [
                                                                   'Figure 1 - Illustration of the ',
                                                                   ' effect'
                                                                 ],
                                                    'code' => 'slideUp()'
                                                  }
                                  },
                        'h4' => {
                                'easing' => {
                                            'content' => 'Easing'
                                          },
                                'callback-function' => {
                                                       'content' => 'Callback Function'
                                                     }
                              }
                      },
          'example' => [
                       {
                         'code' => '
$( document.body ).click(function() {
  if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).show( "slow" );
  } else {
    $( "div" ).slideUp();
  }
});
',
                         'css' => '
  div {
    background: #3d9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    float: left;
  }
',
                         'desc' => 'Animates all divs to slide up, completing the animation within 400 milliseconds.',
                         'html' => '
Click me!
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
'
                       },
                       {
                         'css' => '
 div {
   margin: 2px;
  }
',
                         'html' => '
<div>
  <button>Hide One</button>
  <input type="text" value="One">
</div>

<div>
  <button>Hide Two</button>
  <input type="text" value="Two">
</div>

<div>
  <button>Hide Three</button>
  <input type="text" value="Three">
</div>

<div id="msg"></div>
',
                         'desc' => 'Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.',
                         'code' => '
$( "button" ).click(function() {
  $( this ).parent().slideUp( "slow", function() {
    $( "#msg" ).text( $( "button", this ).text() + " has completed." );
  });
});
'
                       }
                     ],
          'signature' => [
                         {
                           'added' => '1.0',
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/complete-argument.xml'
                                           }
                                         ]
                         },
                         {
                           'added' => '1.0',
                           'xi:include' => {
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                           'href' => '../includes/options-argument.xml'
                                         }
                         },
                         {
                           'added' => '1.4.3',
                           'xi:include' => [
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/duration-argument.xml'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/easing-argument.xml'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ]
                         }
                       ],
          'return' => 'jQuery',
          'title' => '.slideUp()',
          'desc' => 'Hide the matched elements with a sliding motion.',
          'note' => {
                    'jquery.fx.off' => {
                                       'type' => 'additional',
                                       'data-title' => '.slideUp()'
                                     },
                    'slide-in-ie' => {
                                     'type' => 'additional',
                                     'data-title' => '.slideDown()'
                                   }
                  }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/stop.xml ####
Possible keys are: desc return title signature type name longdesc example category
$VAR1 = {
          'desc' => 'Stop the currently-running animation on the matched elements.',
          'return' => 'jQuery',
          'title' => '.stop()',
          'signature' => [
                         {
                           'argument' => {
                                         'jumpToEnd' => {
                                                        'default' => 'false',
                                                        'desc' => {
                                                                  'content' => [
                                                                                 'A Boolean indicating whether to complete the current animation immediately. Defaults to ',
                                                                                 '.'
                                                                               ],
                                                                  'code' => 'false'
                                                                },
                                                        'type' => 'Boolean',
                                                        'optional' => 'true'
                                                      },
                                         'clearQueue' => {
                                                         'default' => 'false',
                                                         'desc' => {
                                                                   'content' => [
                                                                                  'A Boolean indicating whether to remove queued animation as well. Defaults to ',
                                                                                  '.'
                                                                                ],
                                                                   'code' => 'false'
                                                                 },
                                                         'type' => 'Boolean',
                                                         'optional' => 'true'
                                                       }
                                       },
                           'added' => '1.2'
                         },
                         {
                           'added' => '1.7',
                           'argument' => {
                                         'clearQueue' => {
                                                         'optional' => 'true',
                                                         'type' => 'Boolean',
                                                         'desc' => {
                                                                   'code' => 'false',
                                                                   'content' => [
                                                                                  'A Boolean indicating whether to remove queued animation as well. Defaults to ',
                                                                                  '.'
                                                                                ]
                                                                 }
                                                       },
                                         'queue' => {
                                                    'type' => 'String',
                                                    'optional' => 'true',
                                                    'default' => 'false',
                                                    'desc' => 'The name of the queue in which to stop animations.'
                                                  },
                                         'jumpToEnd' => {
                                                        'default' => 'false',
                                                        'desc' => {
                                                                  'code' => 'false',
                                                                  'content' => [
                                                                                 'A Boolean indicating whether to complete the current animation immediately. Defaults to ',
                                                                                 '.'
                                                                               ]
                                                                },
                                                        'type' => 'Boolean',
                                                        'optional' => 'true'
                                                      }
                                       }
                         }
                       ],
          'type' => 'method',
          'name' => 'stop',
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => [
                                           '.stop()',
                                           '.slideUp()',
                                           '.stop()'
                                         ],
                                 'content' => [
                                                'When ',
                                                ' is called on an element, the currently-running animation (if any) is immediately stopped. If, for instance, an element is being hidden with ',
                                                ' when ',
                                                ' is called, the element will now still be displayed, but will be a fraction of its previous height. Callback functions are not called.'
                                              ]
                               },
                               {
                                 'code' => [
                                           '.stop()',
                                           'clearQueue',
                                           'true'
                                         ],
                                 'content' => [
                                                'If more than one animation method is called on the same element, the later animations are placed in the effects queue for the element. These animations will not begin until the first one completes. When ',
                                                ' is called, the next animation in the queue begins immediately. If the ',
                                                ' parameter is provided with a value of ',
                                                ', then the rest of the animations in the queue are removed and never run.'
                                              ]
                               },
                               {
                                 'content' => [
                                                'If the ',
                                                ' argument is provided with a value of ',
                                                ', the current animation stops, but the element is immediately given its target values for each CSS property. In our above ',
                                                ' example, the element would be immediately hidden. The callback function is then immediately called, if provided.'
                                              ],
                                 'code' => [
                                           'jumpToEnd',
                                           'true',
                                           '.slideUp()'
                                         ]
                               },
                               {
                                 'content' => ', if the first argument is provided as a string, only the animations in the queue represented by that string will be stopped.',
                                 'strong' => 'As of jQuery 1.7'
                               },
                               {
                                 'content' => [
                                                'The usefulness of the ',
                                                ' method is evident when we need to animate an element on ',
                                                ' and ',
                                                ':'
                                              ],
                                 'code' => [
                                           '.stop()',
                                           'mouseenter',
                                           'mouseleave'
                                         ]
                               },
                               {
                                 'content' => [
                                                'We can create a nice fade effect without the common problem of multiple queued animations by adding ',
                                                ' to the chain:'
                                              ],
                                 'code' => '.stop(true, true)'
                               },
                               {
                                 'content' => [
                                                ' stopping a toggled animation prematurely with ',
                                                ' will trigger jQuery\'s internal effects tracking. In previous versions, calling the ',
                                                ' method before a toggled animation was completed would cause the animation to lose track of its state (if jumpToEnd was false). Any subsequent animations would start at a new "half-way" state, sometimes resulting in the element disappearing. To observe the new behavior, see the final example below.'
                                              ],
                                 'strong' => 'As of jQuery 1.7,',
                                 'code' => [
                                           '.stop()',
                                           '.stop()'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div id="hoverme">
  Hover me
  <img id="hoverme" src="book.png" alt="" width="100" height="123">
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#hoverme-stop-2" ).hover(function() {
  $( this ).find( "img" ).stop( true, true ).fadeOut();
}, function() {
  $( this ).find( "img" ).stop( true, true ).fadeIn();
});
    '
                                 }
                               ],
                        'h2' => 'Toggling Animations',
                        'div' => {
                                 'p' => {
                                        'content' => [
                                                       'Animations may be stopped globally by setting the property ',
                                                       ' to ',
                                                       '. When this is done, all animation methods will immediately set elements to their final state when called, rather than displaying an effect.'
                                                     ],
                                        'code' => [
                                                  '$.fx.off',
                                                  'true'
                                                ]
                                      },
                                 'class' => 'warning'
                               }
                      },
          'example' => [
                       {
                         'css' => '
  div {
    position: absolute;
    background-color: #abc;
    left: 0px;
    top: 30px;
    width: 60px;
    height: 60px;
    margin: 5px;
  }
',
                         'desc' => 'Click the Go button once to start the animation, then click the STOP button to stop it where it\'s currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.',
                         'html' => '
<button id="go">Go</button>
<button id="stop">STOP!</button>
<button id="back">Back</button>
<div class="block"></div>
',
                         'code' => '
// Start animation
$( "#go" ).click(function() {
  $( ".block" ).animate({ left: "+=100px" }, 2000 );
});

// Stop animation when button is clicked
$( "#stop" ).click(function() {
  $( ".block" ).stop();
});

// Start animation in the opposite direction
$( "#back" ).click(function() {
  $( ".block" ).animate({ left: "-=100px" }, 2000 );
});
'
                       },
                       {
                         'desc' => 'Click the slideToggle button to start the animation, then click again before the animation is completed. The animation will toggle the other direction from the saved starting point.',
                         'html' => '
<button id="toggle">slideToggle</button>
<div class="block"></div>
',
                         'css' => '
  .block {
    background-color: #abc;
    border: 2px solid black;
    width: 200px;
    height: 80px;
    margin: 10px;
  }
',
                         'code' => '
var $block = $( ".block" );

// Toggle a sliding animation animation
$( "#toggle" ).on( "click", function() {
  $block.stop().slideToggle( 1000 );
});
'
                       }
                     ],
          'category' => [
                        {
                          'slug' => 'effects/custom-effects'
                        },
                        {
                          'slug' => 'version/1.2'
                        },
                        {
                          'slug' => 'version/1.7'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/submit-selector.xml ####
Possible keys are: desc note title sample return signature longdesc example type name category
$VAR1 = {
          'desc' => 'Selects all elements of type submit.',
          'note' => {
                    'data-alt' => 'input[type="submit"], button[type="submit"]',
                    'data-selector' => ':submit',
                    'id' => 'jquery-selector-extension-alt',
                    'type' => 'additional'
                  },
          'title' => ':submit Selector',
          'sample' => ':submit',
          'return' => '',
          'signature' => {
                         'added' => '1.0'
                       },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The ',
                                              ' selector typically applies to button or input elements. Note that some browsers treat ',
                                              ' element as ',
                                              ' implicitly while others (such as Internet Explorer) do not. To ensure that markup works consistently across all browsers and guarantee that it is possible to consistently select buttons that will submit a form, always specify a ',
                                              ' property.'
                                            ],
                               'code' => [
                                         ':submit',
                                         '<button>',
                                         'type="submit"',
                                         'type'
                                       ]
                             }
                      },
          'example' => {
                       'html' => '
<form>
<table id="exampleTable" border="1" cellpadding="10" align="center">
  <tr>
    <th>
      Element Type
    </th>
    <th>
      Element
    </th>
  </tr>
  <tr>
    <td>
      <input type="button" value="Input Button">
    </td>
  </tr>
  <tr>
    <td>
      <input type="checkbox">
    </td>
  </tr>
  <tr>
    <td>
      <input type="file">
    </td>
  </tr>
  <tr>
    <td>
      <input type="hidden">
    </td>
  </tr>
  <tr>
    <td>
      <input type="image">
    </td>
  </tr>
  <tr>
    <td>
      <input type="password">
    </td>
  </tr>
  <tr>
    <td>
      <input type="radio">
    </td>
  </tr>
  <tr>
    <td>
      <input type="reset">
    </td>
  </tr>
  <tr>
    <td>
      <input type="submit">
    </td>
  </tr>
  <tr>
    <td>
      <input type="text">
    </td>
  </tr>
  <tr>
    <td>
      <select><option>Option</option></select>
    </td>
  </tr>
  <tr>
    <td>
      <textarea></textarea>
    </td>
  </tr>
  <tr>
    <td>
      <button>Button</button>
    </td>
  </tr>
  <tr>
    <td>
      <button type="submit">Button type="submit"</button>
    </td>
  </tr>
</table>
</form>
<div id="result"></div>
',
                       'desc' => 'Finds all submit elements that are descendants of a td element.',
                       'css' => '
  textarea {
    height: 45px;
  }
',
                       'code' => '
var submitEl = $( "td :submit" )
  .parent( "td" )
    .css({
      background: "yellow",
      border: "3px red solid"
    })
  .end();

$( "#result" ).text( "jQuery matched " + submitEl.length + " elements." );

// Prevent form submission
$( "form" ).submit(function( event ) {
  event.preventDefault();
});

// Extra JS to make the HTML easier to edit (None of this is relevant to the \':submit\' selector)
$( "#exampleTable" ).find( "td" ).each(function( i, el ) {
  var inputEl = $( el ).children(),
    inputType = inputEl.attr( "type" ) ? " type=\'" + inputEl.attr( "type" ) + "\'" : "" ;
  $( el ).before( "<td>" + inputEl[ 0 ].nodeName + inputType + "</td>" );
})
'
                     },
          'type' => 'selector',
          'name' => 'submit',
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/submit.xml ####
Possible keys are: signature example longdesc type name category desc note title return
$VAR1 = {
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'name' => 'handler',
                                         'type' => 'Function',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'desc' => 'A function to execute each time the event is triggered.'
                                       }
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'handler' => {
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'type' => 'Function',
                                                      'desc' => 'A function to execute each time the event is triggered.'
                                                    },
                                         'eventData' => {
                                                        'desc' => 'An object containing data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ],
          'example' => [
                       {
                         'code' => '
$( "form" ).submit(function( event ) {
  if ( $( "input:first" ).val() === "correct" ) {
    $( "span" ).text( "Validated..." ).show();
    return;
  }

  $( "span" ).text( "Not valid!" ).show().fadeOut( 1000 );
  event.preventDefault();
});
',
                         'desc' => 'If you\'d like to prevent forms from being submitted unless a flag variable is set, try:',
                         'html' => '
<p>Type \'correct\' to validate.</p>
<form action="javascript:alert( \'success!\' );">
  <div>
    <input type="text">
    <input type="submit">
  </div>
</form>
<span></span>
',
                         'css' => '
  p {
    margin: 0;
    color: blue;
  }
  div,p {
    margin-left: 10px;
  }
  span {
    color: red;
  }
'
                       },
                       {
                         'code' => '
$( "form" ).submit(function() {
  return this.some_flag_variable;
});
',
                         'desc' => 'If you\'d like to prevent forms from being submitted unless a flag variable is set, try:'
                       },
                       {
                         'code' => '
$( "form:first" ).submit();
',
                         'desc' => 'To trigger the submit event on the first form on the page, try:'
                       }
                     ],
          'longdesc' => {
                        'div' => {
                                 'class' => 'warning',
                                 'p' => 'Depending on the browser, the Enter key may only cause a form submission if the form has exactly one text field, or only when there is a submit button present. The interface should not rely on a particular behavior for this key unless the issue is forced by observing the keypress event for presses of the Enter key.'
                               },
                        'p' => [
                               {
                                 'code' => [
                                           '.on( "submit", handler )',
                                           '.trigger( "submit" )'
                                         ],
                                 'content' => [
                                                'This method is a shortcut for ',
                                                ' in the first variation, and ',
                                                ' in the third.'
                                              ]
                               },
                               {
                                 'kbd' => 'Enter',
                                 'code' => [
                                           'submit',
                                           '<form>',
                                           '<input type="submit">',
                                           '<input type="image">',
                                           '<button type="submit">'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' event is sent to an element when the user is attempting to submit a form. It can only be attached to ',
                                                ' elements. Forms can be submitted either by clicking an explicit ',
                                                ', ',
                                                ', or ',
                                                ', or by pressing ',
                                                ' when certain form elements have focus.'
                                              ]
                               },
                               'For example, consider the HTML:',
                               'The event handler can be bound to the form:',
                               {
                                 'code' => [
                                           '.preventDefault()',
                                           'false'
                                         ],
                                 'content' => [
                                                'Now when the form is submitted, the message is alerted. This happens prior to the actual submission, so we can cancel the submit action by calling ',
                                                ' on the event object or by returning ',
                                                ' from our handler. We can trigger the event manually when another element is clicked:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'After this code executes, clicks on ',
                                                ' will also display the message. In addition, the default ',
                                                ' action on the form will be fired, so the form will be submitted.'
                                              ],
                                 'samp' => 'Trigger the handler',
                                 'code' => 'submit'
                               },
                               {
                                 'content' => [
                                                'The JavaScript ',
                                                ' event does not bubble in Internet Explorer. However, scripts that rely on event delegation with the ',
                                                ' event will work consistently across browsers as of jQuery 1.4, which has normalized the event\'s behavior. '
                                              ],
                                 'code' => [
                                           'submit',
                                           'submit'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<form id="target" action="destination.html">
  <input type="text" value="Hello there">
  <input type="submit" value="Go">
</form>
<div id="other">
  Trigger the handler
</div>'
                                 },
                                 {
                                   'code' => '
$( "#target" ).submit(function( event ) {
  alert( "Handler for .submit() called." );
  event.preventDefault();
});
    '
                                 },
                                 {
                                   'code' => '
$( "#other" ).click(function() {
  $( "#target" ).submit();
});
    '
                                 }
                               ]
                      },
          'type' => 'method',
          'name' => 'submit',
          'category' => [
                        {
                          'slug' => 'events/form-events'
                        },
                        {
                          'slug' => 'forms'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'desc' => 'Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.',
          'note' => {
                    'detach-shorthand' => {
                                          'type' => 'additional',
                                          'data-event' => 'submit'
                                        },
                    'domlint' => {
                                 'type' => 'additional'
                               }
                  },
          'title' => '.submit()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/target-selector.xml ####
Possible keys are: title sample return desc longdesc type name category signature
$VAR1 = {
          'title' => ':target Selector',
          'sample' => ':target',
          'return' => '',
          'desc' => 'Selects the target element indicated by the fragment identifier of the document\'s URI.',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'If the document\'s URI contains a fragment identifier, or hash, then the ',
                                                ' selector will match the element with an ID that matches the identifier. For example, given a document with a URI of http://example.com/#foo, ',
                                                ' will select the ',
                                                ' element.'
                                              ],
                                 'code' => [
                                           ':target',
                                           '$( "p:target" )',
                                           '<p id="foo">'
                                         ]
                               },
                               {
                                 'a' => {
                                        'href' => 'http://www.w3.org/TR/css3-selectors/#target-pseudo',
                                        'content' => 'W3C CSS specification'
                                      },
                                 'content' => [
                                                'Further discussion of this usage can be found in the ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'type' => 'selector',
          'name' => 'target',
          'category' => [
                        {
                          'slug' => 'selectors/basic-filter-selectors'
                        },
                        {
                          'slug' => 'version/1.9'
                        }
                      ],
          'signature' => {
                         'added' => '1.9'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/text-selector.xml ####
Possible keys are: signature category type name example longdesc note desc sample return title
$VAR1 = {
          'signature' => {
                         'added' => '1.0'
                       },
          'category' => [
                        {
                          'slug' => 'selectors/form-selectors'
                        },
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'type' => 'selector',
          'name' => 'text',
          'example' => {
                       'code' => '
var input = $( "form input:text" ).css({
  background: "yellow",
  border: "3px red solid"
});

$( "div" )
  .text( "For this type jQuery found " + input.length + "." )
  .css( "color", "red" );

// Prevent form submission
$( "form" ).submit(function( event ) {
  event.preventDefault();
});
',
                       'desc' => 'Finds all text inputs.',
                       'html' => '
<form>
  <input type="button" value="Input Button">
  <input type="checkbox">
  <input type="file">
  <input type="hidden">
  <input type="image">
  <input type="password">
  <input type="radio">
  <input type="reset">
  <input type="submit">
  <input type="text">
  <select>
    <option>Option</option>
  </select>
  <textarea></textarea>
  <button>Button</button>
</form>
<div></div>
',
                       'css' => '
  textarea {
    height: 25px;
  }
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                ' allows us to select all ',
                                                ' elements. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( "*" ) is implied. In other words, the bare ',
                                                ' is equivalent to ',
                                                ', so ',
                                                ' should be used instead. '
                                              ],
                                 'code' => [
                                           '$( ":text" )',
                                           '<input type="text">',
                                           '$( ":text" )',
                                           '$( "*:text" )',
                                           '$( "input:text" )'
                                         ]
                               },
                               {
                                 'strong' => 'Note:',
                                 'content' => [
                                                ' As of jQuery 1.5.2, ',
                                                ' selects ',
                                                ' elements that have no specified ',
                                                ' attribute (in which case ',
                                                ' is implied).  '
                                              ],
                                 'code' => [
                                           ':text',
                                           'input',
                                           'type',
                                           'type="text"'
                                         ]
                               },
                               {
                                 'content' => [
                                                'This difference in behavior between ',
                                                ' and ',
                                                ', can be seen below:'
                                              ],
                                 'code' => [
                                           '$( ":text" )',
                                           '$( "[type=text]" )'
                                         ]
                               }
                             ],
                        'pre' => {
                                 'code' => '
$( "<input>" ).is( "[type=text]" ); // false
$( "<input>" ).is( ":text" ); // true
    '
                               }
                      },
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery-selector-extension-alt',
                    'data-alt' => '[type="text"]',
                    'data-selector' => ':text'
                  },
          'desc' => 'Selects all input elements of type text.',
          'sample' => ':text',
          'return' => '',
          'title' => ':text Selector'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/text.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.',
          'entry' => {
                     'text' => {
                               'signature' => [
                                              {
                                                'added' => '1.0',
                                                'argument' => {
                                                              'name' => 'text',
                                                              'type' => {
                                                                        'Number' => {},
                                                                        'Boolean' => {},
                                                                        'String' => {}
                                                                      },
                                                              'desc' => 'The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation.'
                                                            }
                                              },
                                              {
                                                'argument' => {
                                                              'return' => {
                                                                          'type' => 'String'
                                                                        },
                                                              'name' => 'function',
                                                              'type' => 'Function',
                                                              'argument' => {
                                                                            'index' => {
                                                                                       'type' => 'Integer'
                                                                                     },
                                                                            'text' => {
                                                                                      'type' => 'String'
                                                                                    }
                                                                          },
                                                              'desc' => 'A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.'
                                                            },
                                                'added' => '1.4'
                                              }
                                            ],
                               'category' => [
                                             {
                                               'slug' => 'manipulation/dom-insertion-inside'
                                             },
                                             {
                                               'slug' => 'version/1.0'
                                             },
                                             {
                                               'slug' => 'version/1.4'
                                             }
                                           ],
                               'type' => 'method',
                               'example' => {
                                            'desc' => 'Add text to the paragraph (notice the bold tag is escaped).',
                                            'html' => '
<p>Test Paragraph.</p>
',
                                            'css' => '
  p {
    color: blue;
    margin: 8px;
  }
',
                                            'code' => '
$( "p" ).text( "<b>Some</b> new text." );
'
                                          },
                               'longdesc' => {
                                             'p' => [
                                                    {
                                                      'content' => [
                                                                     'Unlike the ',
                                                                     ' method, ',
                                                                     ' can be used in both XML and HTML documents. '
                                                                   ],
                                                      'code' => [
                                                                '.html()',
                                                                '.text()'
                                                              ]
                                                    },
                                                    {
                                                      'content' => [
                                                                     'We need to be aware that this method escapes the string provided as necessary so that it will render correctly in HTML. To do so, it calls the DOM method ',
                                                                     ', does not interpret the string as HTML.  Consider the following HTML:'
                                                                   ],
                                                      'code' => '.createTextNode()'
                                                    },
                                                    {
                                                      'content' => [
                                                                     'The code ',
                                                                     ' will produce the following DOM output:'
                                                                   ],
                                                      'code' => '$( "div.demo-container" ).text( "<p>This is a test.</p>" );'
                                                    },
                                                    'It will appear on a rendered page as though the tags were exposed, like this:',
                                                    {
                                                      'code' => '.text()',
                                                      'content' => [
                                                                     'The ',
                                                                     ' method cannot be used on input elements.  For input field text, use the ',
                                                                     ' method.'
                                                                   ],
                                                      'a' => {
                                                             'content' => '.val()',
                                                             'href' => '/val/'
                                                           }
                                                    },
                                                    {
                                                      'content' => [
                                                                     'As of jQuery 1.4, the ',
                                                                     ' method allows us to set the text content by passing in a function.'
                                                                   ],
                                                      'code' => '.text()'
                                                    },
                                                    {
                                                      'code' => '<li>',
                                                      'content' => [
                                                                     'Given an unordered list with three ',
                                                                     ' elements, this example will produce the following DOM output:'
                                                                   ]
                                                    }
                                                  ],
                                             'pre' => [
                                                      {
                                                        'code' => '
<div class="demo-container">
  <div class="demo-box">Demonstration Box</div>
  <ul>
    <li>list item 1</li>
    <li>list <strong>item</strong> 2</li>
  </ul>
</div>
      '
                                                      },
                                                      {
                                                        'code' => '
<div class="demo-container">
  &lt;p&gt;This is a test.&lt;/p&gt;
</div>
      '
                                                      },
                                                      {
                                                        'code' => '
<p>This is a test</p>
      '
                                                      },
                                                      {
                                                        'code' => '
$( "ul li" ).text(function( index ) {
  return "item number " + ( index + 1 );
});
      '
                                                      },
                                                      {
                                                        'code' => '
<ul>
  <li>item number 1</li>
  <li>item number 2</li>
  <li>item number 3</li>
</ul>
      '
                                                      }
                                                    ]
                                           },
                               'desc' => 'Set the content of each element in the set of matched elements to the specified text.',
                               'return' => 'jQuery'
                             }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/toArray.xml ####
Possible keys are: title return desc example longdesc name type category signature
$VAR1 = {
          'title' => '.toArray()',
          'return' => 'Array',
          'desc' => 'Retrieve all the elements contained in the jQuery set, as an array.',
          'example' => {
                       'css' => '
  span {
    color: red;
  }
',
                       'desc' => 'Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.',
                       'html' => '
Reversed - <span></span>

<div>One</div>
<div>Two</div>
<div>Three</div>
',
                       'code' => '
function disp( divs ) {
  var a = [];
  for ( var i = 0; i < divs.length; i++ ) {
    a.push( divs[ i ].innerHTML );
  }
  $( "span" ).text( a.join( " " ) );
}

disp( $( "div" ).toArray().reverse() );
'
                     },
          'longdesc' => {
                        'p' => [
                               {
                                 'code' => '.toArray()',
                                 'content' => ' returns all of the elements in the jQuery set:'
                               },
                               'All of the matched DOM nodes are returned by this call, contained in a standard array:',
                               {
                                 'span' => {
                                           'content' => '[<li id="foo">, <li id="bar">]',
                                           'class' => 'result'
                                         }
                               }
                             ],
                        'pre' => {
                                 'code' => '
alert( $( "li" ).toArray() );
    '
                               }
                      },
          'name' => 'toArray',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'miscellaneous/dom-element-methods'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'signature' => {
                         'added' => '1.4'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/toggle-event.xml ####
Possible keys are: return title removed desc type name example longdesc category signature deprecated
$VAR1 = {
          'return' => 'jQuery',
          'title' => '.toggle()',
          'removed' => '1.9',
          'desc' => 'Bind two or more handlers to the matched elements, to be executed on alternate clicks.',
          'type' => 'method',
          'name' => 'toggle',
          'example' => {
                       'code' => '
$( "td" ).toggle(
  function() {
    $( this ).addClass( "selected" );
  }, function() {
    $( this ).removeClass( "selected" );
  }
);
',
                       'desc' => 'Toggle a style on table cells. (Not recommended. Use .toggleClass() instead.):'
                     },
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div id="target">
  Click here
</div>
    '
                                 },
                                 {
                                   'code' => '
$( "#target" ).toggle(function() {
  alert( "First handler for .toggle() called." );
}, function() {
  alert( "Second handler for .toggle() called." );
});
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.toggle()',
                                           'click',
                                           'click'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method binds a handler for the ',
                                                ' event, so the rules outlined for the triggering of ',
                                                ' apply here as well.'
                                              ]
                               },
                               'For example, consider the HTML:',
                               {
                                 'content' => [
                                                'Event handlers can then be bound to the ',
                                                ':'
                                              ],
                                 'code' => '<div>'
                               },
                               'As the element is clicked repeatedly, the messages alternate:',
                               {
                                 'samp' => [
                                           'First handler for .toggle() called.',
                                           'Second handler for .toggle() called.',
                                           'First handler for .toggle() called.',
                                           'Second handler for .toggle() called.',
                                           'First handler for .toggle() called.'
                                         ],
                                 'br' => [
                                         {},
                                         {},
                                         {},
                                         {}
                                       ]
                               },
                               {
                                 'content' => [
                                                'If more than two handlers are provided, ',
                                                ' will cycle among all of them. For example, if there are three handlers, then the first handler will be called on the first click, the fourth click, the seventh click, and so on.'
                                              ],
                                 'code' => '.toggle()'
                               },
                               {
                                 'code' => [
                                           '.toggle()',
                                           '.toggle()',
                                           '.toggle()',
                                           '.toggle()',
                                           'click',
                                           'click',
                                           '.toggle()',
                                           'click',
                                           '.preventDefault()',
                                           '.toggle()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' method is provided for convenience. It is relatively straightforward to implement the same behavior by hand, and this can be necessary if the assumptions built into ',
                                                ' prove limiting. For example, ',
                                                ' is not guaranteed to work correctly if applied twice to the same element. Since ',
                                                ' internally uses a ',
                                                ' handler to do its work, we must unbind ',
                                                ' to remove a behavior attached with ',
                                                ', so other ',
                                                ' handlers can be caught in the crossfire. The implementation also calls ',
                                                ' on the event, so links will not be followed and buttons will not be clicked if ',
                                                ' has been called on the element.'
                                              ]
                               }
                             ],
                        'div' => {
                                 'class' => 'warning',
                                 'p' => {
                                        'content' => [
                                                       'Note: This method signature was deprecated in jQuery 1.8 and removed in jQuery 1.9. jQuery also provides an animation method named ',
                                                       ' that toggles the visibility of elements. Whether the animation or the event method is fired depends on the set of arguments passed.'
                                                     ],
                                        'a' => {
                                               'content' => '.toggle()',
                                               'href' => '/toggle/'
                                             }
                                      }
                               }
                      },
          'category' => [
                        {
                          'slug' => 'events/mouse-events'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.8'
                        },
                        {
                          'slug' => 'removed'
                        }
                      ],
          'signature' => {
                         'argument' => {
                                       'handler' => {
                                                    'desc' => 'Additional handlers to cycle through after clicks.',
                                                    'argument' => {
                                                                  'type' => 'Event',
                                                                  'name' => 'eventObject'
                                                                },
                                                    'type' => 'Function',
                                                    'optional' => 'true'
                                                  }
                                     },
                         'added' => '1.0'
                       },
          'deprecated' => '1.8'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/toggle.xml ####
Possible keys are: signature category longdesc example name type desc note title return
$VAR1 = {
          'signature' => [
                         {
                           'xi:include' => [
                                           {
                                             'href' => '../includes/duration-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                             'href' => '../includes/complete-argument.xml'
                                           }
                                         ],
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.0',
                           'xi:include' => {
                                           'xmlns:xi' => 'http://www.w3.org/2003/XInclude',
                                           'href' => '../includes/options-argument.xml'
                                         }
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'desc' => 'A string or number determining how long the animation will run.',
                                         'default' => '400',
                                         'name' => 'duration',
                                         'type' => {
                                                   'Number' => {},
                                                   'String' => {}
                                                 }
                                       },
                           'xi:include' => [
                                           {
                                             'href' => '../includes/easing-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           },
                                           {
                                             'href' => '../includes/complete-argument.xml',
                                             'xmlns:xi' => 'http://www.w3.org/2003/XInclude'
                                           }
                                         ]
                         },
                         {
                           'added' => '1.3',
                           'argument' => {
                                         'name' => 'display',
                                         'type' => 'Boolean',
                                         'desc' => {
                                                   'content' => [
                                                                  'Use ',
                                                                  ' to show the element or ',
                                                                  ' to hide it.'
                                                                ],
                                                   'code' => [
                                                             'true',
                                                             'false'
                                                           ]
                                                 }
                                       }
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'effects/basics'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.3'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
$( ".target" ).toggle();
    '
                                 },
                                 {
                                   'code' => '
<div id="clickme">
  Click here
</div>
<img id="book" src="book.png" alt="" width="100" height="123">
    '
                                 },
                                 {
                                   'code' => '
$( "#clickme" ).click(function() {
  $( "#book" ).toggle( "slow", function() {
    // Animation complete.
  });
});
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).toggle( display );
    '
                                 },
                                 {
                                   'code' => '
if ( display === true ) {
  $( "#foo" ).show();
} else if ( display === false ) {
  $( "#foo" ).hide();
}
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => '.toggle()',
                                 'content' => [
                                                'With no parameters, the ',
                                                ' method simply toggles the visibility of elements:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The matched elements will be revealed or hidden immediately, with no animation, by changing the CSS ',
                                                ' property. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The ',
                                                ' property is saved and restored as needed. If an element has a ',
                                                ' value of ',
                                                ', then is hidden and shown, it will once again be displayed ',
                                                '.'
                                              ],
                                 'code' => [
                                           'display',
                                           'display',
                                           'display',
                                           'inline',
                                           'inline'
                                         ]
                               },
                               {
                                 'code' => [
                                           '.toggle()',
                                           '.toggle()',
                                           'display',
                                           'none'
                                         ],
                                 'content' => [
                                                'When a duration, a plain object, or a ',
                                                ' "complete" function is provided, ',
                                                ' becomes an animation method. The ',
                                                ' method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0 after a hiding animation, the ',
                                                ' style property is set to ',
                                                ' to ensure that the element no longer affects the layout of the page.'
                                              ],
                                 'em' => 'single'
                               },
                               {
                                 'code' => [
                                           '\'fast\'',
                                           '\'slow\'',
                                           '200',
                                           '600'
                                         ],
                                 'content' => [
                                                'Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings ',
                                                ' and ',
                                                ' can be supplied to indicate durations of ',
                                                ' and ',
                                                ' milliseconds, respectively.'
                                              ]
                               },
                               {
                                 'code' => [
                                           'swing',
                                           'linear'
                                         ],
                                 'content' => [
                                                'As of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called ',
                                                ', and one that progresses at a constant pace, called ',
                                                '. More easing functions are available with the use of plug-ins, most notably the ',
                                                '.'
                                              ],
                                 'a' => {
                                        'href' => 'http://jqueryui.com',
                                        'content' => 'jQuery UI suite'
                                      }
                               },
                               {
                                 'code' => 'this',
                                 'content' => [
                                                'If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but ',
                                                ' is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.'
                                              ]
                               },
                               'We can animate any element, such as a simple image:',
                               {
                                 'content' => [
                                                'We will cause ',
                                                ' to be called when another element is clicked:'
                                              ],
                                 'code' => '.toggle()'
                               },
                               'With the element initially shown, we can hide it slowly with the first click:
    ',
                               'A second click will show the element once again:',
                               {
                                 'code' => [
                                           'true',
                                           'false'
                                         ],
                                 'content' => [
                                                'The second version of the method accepts a Boolean parameter. If this parameter is ',
                                                ', then the matched elements are shown; if ',
                                                ', the elements are hidden. In essence, the statement:
    '
                                              ]
                               },
                               'is equivalent to:'
                             ],
                        'figure' => [
                                    {
                                      'figcaption' => {
                                                      'code' => 'toggle()',
                                                      'content' => [
                                                                     'Figure 1 - Illustration of the ',
                                                                     ' effect when hiding the image'
                                                                   ]
                                                    },
                                      'img' => [
                                               {
                                                 'alt' => '',
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_09.png'
                                               },
                                               {
                                                 'alt' => '',
                                                 'src' => '/resources/0042_06_10.png',
                                                 'class' => 'column three'
                                               },
                                               {
                                                 'alt' => '',
                                                 'src' => '/resources/0042_06_11.png',
                                                 'class' => 'column three'
                                               },
                                               {
                                                 'alt' => '',
                                                 'src' => '/resources/0042_06_12.png',
                                                 'class' => 'column three'
                                               }
                                             ]
                                    },
                                    {
                                      'img' => [
                                               {
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_13.png',
                                                 'alt' => ''
                                               },
                                               {
                                                 'src' => '/resources/0042_06_14.png',
                                                 'class' => 'column three',
                                                 'alt' => ''
                                               },
                                               {
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_15.png',
                                                 'alt' => ''
                                               },
                                               {
                                                 'alt' => '',
                                                 'class' => 'column three',
                                                 'src' => '/resources/0042_06_16.png'
                                               }
                                             ],
                                      'figcaption' => {
                                                      'code' => 'toggle()',
                                                      'content' => [
                                                                     'Figure 2 - Illustration of the ',
                                                                     ' effect when showing the image'
                                                                   ]
                                                    }
                                    }
                                  ],
                        'div' => {
                                 'p' => {
                                        'content' => [
                                                       'Note: The event handling suite also has a method named ',
                                                       '. Which one is fired depends on the set of arguments passed.'
                                                     ],
                                        'a' => {
                                               'content' => '.toggle()',
                                               'href' => '/toggle-event/'
                                             }
                                      },
                                 'class' => 'warning'
                               }
                      },
          'example' => [
                       {
                         'code' => '
$( "button" ).click(function() {
  $( "p" ).toggle();
});
',
                         'desc' => 'Toggles all paragraphs.',
                         'html' => '
<button>Toggle</button>
<p>Hello</p>
<p style="display: none">Good Bye</p>
'
                       },
                       {
                         'code' => '
$( "button" ).click(function() {
  $( "p" ).toggle( "slow" );
});
',
                         'desc' => 'Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.',
                         'html' => '
<button>Toggle \'em</button>
<p>Hiya</p>
<p>Such interesting text, eh?</p>
',
                         'css' => '
  p {
    background: #dad;
    font-weight: bold;
    font-size: 16px;
  }
'
                       },
                       {
                         'code' => '
var flip = 0;
$( "button" ).click(function() {
  $( "p" ).toggle( flip++ % 2 === 0 );
});
',
                         'html' => '
<button>Toggle</button>
<p>Hello</p>
<p style="display: none">Good Bye</p>
',
                         'desc' => 'Shows all paragraphs, then hides them all, back and forth.'
                       }
                     ],
          'name' => 'toggle',
          'type' => 'method',
          'desc' => 'Display or hide the matched elements.',
          'note' => {
                    'type' => 'additional',
                    'id' => 'jquery.fx.off',
                    'data-title' => '.toggle()'
                  },
          'title' => '.toggle()',
          'return' => 'jQuery'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/toggleClass.xml ####
Possible keys are: entry
$VAR1 = {
          'entry' => {
                     'toggleClass' => {
                                      'signature' => {
                                                     'added' => '1.4',
                                                     'argument' => {
                                                                   'desc' => 'A boolean value to determine whether the class should be added or removed.',
                                                                   'optional' => 'true',
                                                                   'name' => 'state',
                                                                   'type' => 'Boolean'
                                                                 }
                                                   },
                                      'deprecated' => '3.0',
                                      'type' => 'method',
                                      'return' => 'jQuery',
                                      'longdesc' => {
                                                    'div' => {
                                                             'strong' => 'This signature (only!) is deprecated as of jQuery 3.0',
                                                             'content' => '.',
                                                             'class' => 'warning'
                                                           }
                                                  }
                                    }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/trigger.xml ####
Possible keys are: category example longdesc name type signature title return desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.0'
                        }
                      ],
          'example' => [
                       {
                         'code' => '
$( "button:first" ).click(function() {
  update( $( "span:first" ) );
});

$( "button:last" ).click(function() {
  $( "button:first" ).trigger( "click" );
  update( $( "span:last" ) );
});

function update( j ) {
  var n = parseInt( j.text(), 10 );
  j.text( n + 1 );
}
',
                         'css' => '
  button {
    margin: 10px;
  }
  div {
    color: blue;
    font-weight: bold;
  }
  span {
    color: red;
  }
',
                         'desc' => 'Clicks to button #2 also trigger a click for button #1.',
                         'html' => '
<button>Button #1</button>
<button>Button #2</button>
<div><span>0</span> button #1 clicks.</div>
<div><span>0</span> button #2 clicks.</div>
'
                       },
                       {
                         'code' => '
$( "form:first" ).trigger( "submit" );
',
                         'desc' => 'To submit the first form without using the submit() function, try:'
                       },
                       {
                         'code' => '
var event = jQuery.Event( "submit" );
$( "form:first" ).trigger( event );
if ( event.isDefaultPrevented() ) {
  // Perform an action...
}
',
                         'desc' => 'To submit the first form without using the submit() function, try:'
                       },
                       {
                         'code' => '
$( "p" )
  .click(function( event, a, b ) {
    // When a normal click fires, a and b are undefined
    // for a trigger like below a refers to "foo" and b refers to "bar"
  })
  .trigger( "click", [ "foo", "bar" ] );
',
                         'desc' => 'To pass arbitrary data to an event:'
                       },
                       {
                         'desc' => 'To pass arbitrary data through an event object:',
                         'code' => '
var event = jQuery.Event( "logged" );
event.user = "foo";
event.pass = "bar";
$( "body" ).trigger( event );
'
                       },
                       {
                         'desc' => 'Alternative way to pass data through an event object:',
                         'code' => '
$( "body" ).trigger({
  type:"logged",
  user:"foo",
  pass:"bar"
});
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'Any event handlers attached with ',
                                                ' or one of its shortcut methods are triggered when the corresponding event occurs. They can be fired manually, however, with the ',
                                                ' method. A call to ',
                                                ' executes the handlers in the same order they would be if the event were triggered naturally by the user:'
                                              ],
                                 'code' => [
                                           '.on()',
                                           '.trigger()',
                                           '.trigger()'
                                         ]
                               },
                               {
                                 'code' => [
                                           '.trigger()',
                                           'false',
                                           '.trigger()'
                                         ],
                                 'content' => [
                                                'As of jQuery 1.3, ',
                                                'ed events bubble up the DOM tree; an event handler can stop the bubbling by returning ',
                                                ' from the handler or calling the ',
                                                ' method on the event object passed into the event. Although ',
                                                ' simulates an event activation, complete with a synthesized event object, it does not perfectly replicate a naturally-occurring event.'
                                              ],
                                 'a' => {
                                        'href' => '/event.stopPropagation/',
                                        'code' => '.stopPropagation()'
                                      }
                               },
                               {
                                 'content' => [
                                                'To trigger handlers bound via jQuery without also triggering the native event, use ',
                                                ' instead. '
                                              ],
                                 'a' => {
                                        'code' => '.triggerHandler()',
                                        'href' => '/triggerHandler/'
                                      }
                               },
                               {
                                 'code' => [
                                           '.on()',
                                           '.trigger()',
                                           'custom',
                                           'click'
                                         ],
                                 'content' => [
                                                'When we define a custom event type using the ',
                                                ' method, the second argument to ',
                                                ' can become useful. For example, suppose we have bound a handler for the ',
                                                ' event to our element instead of the built-in ',
                                                ' event as we did above:'
                                              ]
                               },
                               'The event object is always passed as the first parameter to an event handler. An array of arguments can also be passed to the .trigger() call, and these parameters will be passed along to the handler as well following the event object. As of jQuery 1.6.2, single string or numeric argument can be passed without being wrapped in an array.',
                               {
                                 'a' => {
                                        'href' => '/on/',
                                        'content' => '.on()'
                                      },
                                 'code' => [
                                           'eventData',
                                           'extraParameters',
                                           '.trigger()',
                                           'eventData',
                                           '.on()'
                                         ],
                                 'content' => [
                                                'Note the difference between the extra parameters passed here and the ',
                                                ' parameter to the ',
                                                ' method. Both are mechanisms for passing information to an event handler, but the ',
                                                ' argument to ',
                                                ' allows information to be determined at the time the event is triggered, while the ',
                                                ' argument to ',
                                                ' requires the information to be already computed at the time the handler is bound.'
                                              ]
                               },
                               {
                                 'code' => '.trigger()',
                                 'content' => [
                                                'The ',
                                                ' method can be used on jQuery collections that wrap plain JavaScript objects similar to a pub/sub mechanism; any event handlers bound to the object will be called when the event is triggered. '
                                              ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$( "#foo" ).on( "click", function() {
  alert( $( this ).text() );
});
$( "#foo" ).trigger( "click" );
   '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).on( "custom", function( event, param1, param2 ) {
  alert( param1 + "\\n" + param2 );
});
$( "#foo").trigger( "custom", [ "Custom", "Event" ] );
    '
                                 }
                               ],
                        'div' => [
                                 {
                                   'a' => [
                                          {
                                            'href' => '/event.preventDefault/',
                                            'code' => 'event.preventDefault()'
                                          },
                                          {
                                            'href' => '/triggerHandler/',
                                            'code' => '.triggerHandler()'
                                          }
                                        ],
                                   'code' => 'window',
                                   'content' => [
                                                  ' For both plain objects and DOM objects other than ',
                                                  ', if a triggered event name matches the name of a property on the object, jQuery will attempt to invoke the property as a method if no event handler calls ',
                                                  '. If this behavior is not desired, use ',
                                                  ' instead.'
                                                ],
                                   'strong' => 'Note:',
                                   'class' => 'warning'
                                 },
                                 {
                                   'class' => 'warning',
                                   'content' => [
                                                  ' As with ',
                                                  ', when calling ',
                                                  ' with an event name matches the name of a property on the object, prefixed by ',
                                                  ' (e.g. triggering ',
                                                  ' on ',
                                                  ' that has a non null ',
                                                  ' method), jQuery will attempt to invoke that property as a method.'
                                                ],
                                   'strong' => 'Note:',
                                   'code' => [
                                             '.trigger()',
                                             'on',
                                             'click',
                                             'window',
                                             'onclick'
                                           ],
                                   'a' => {
                                          'code' => '.triggerHandler()',
                                          'href' => '/triggerHandler/'
                                        }
                                 },
                                 {
                                   'content' => [
                                                  ' When triggering with a plain object that is not array-like but still contains a ',
                                                  ' property, you should pass the object in an array (e.g. ',
                                                  ').'
                                                ],
                                   'strong' => 'Note:',
                                   'class' => 'warning',
                                   'code' => [
                                             'length',
                                             '[ { length: 1 } ]'
                                           ]
                                 }
                               ]
                      },
          'name' => 'trigger',
          'type' => 'method',
          'signature' => [
                         {
                           'argument' => {
                                         'extraParameters' => {
                                                              'desc' => 'Additional parameters to pass along to the event handler.',
                                                              'type' => {
                                                                        'PlainObject' => {},
                                                                        'Array' => {}
                                                                      },
                                                              'optional' => 'true'
                                                            },
                                         'eventType' => {
                                                        'type' => 'String',
                                                        'desc' => {
                                                                  'code' => [
                                                                            'click',
                                                                            'submit'
                                                                          ],
                                                                  'content' => [
                                                                                 'A string containing a JavaScript event type, such as ',
                                                                                 ' or ',
                                                                                 '.'
                                                                               ]
                                                                }
                                                      }
                                       },
                           'added' => '1.0'
                         },
                         {
                           'added' => '1.3',
                           'argument' => {
                                         'extraParameters' => {
                                                              'desc' => 'Additional parameters to pass along to the event handler.',
                                                              'type' => {
                                                                        'Array' => {},
                                                                        'PlainObject' => {}
                                                                      },
                                                              'optional' => 'true'
                                                            },
                                         'event' => {
                                                    'type' => 'Event',
                                                    'desc' => {
                                                              'a' => {
                                                                     'code' => 'jQuery.Event',
                                                                     'href' => '/category/events/event-object/'
                                                                   },
                                                              'content' => [
                                                                             'A ',
                                                                             ' object.'
                                                                           ]
                                                            }
                                                  }
                                       }
                         }
                       ],
          'title' => '.trigger()',
          'return' => 'jQuery',
          'desc' => 'Execute all handlers and behaviors attached to the matched elements for the given event type.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/triggerHandler.xml ####
Possible keys are: return title desc category name type longdesc example signature
$VAR1 = {
          'return' => 'Object',
          'title' => '.triggerHandler()',
          'desc' => 'Execute all handlers attached to an element for an event.',
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.2'
                        }
                      ],
          'name' => 'triggerHandler',
          'type' => 'method',
          'longdesc' => {
                        'ul' => {
                                'li' => [
                                        {
                                          'code' => [
                                                    '.triggerHandler( "event" )',
                                                    '.event()',
                                                    '.triggerHandler( "submit" )',
                                                    '.submit()'
                                                  ],
                                          'content' => [
                                                         'The ',
                                                         ' method will not call ',
                                                         ' on the element it is triggered on.  This means ',
                                                         ' on a form will not call ',
                                                         ' on the form.'
                                                       ]
                                        },
                                        {
                                          'code' => [
                                                    '.trigger()',
                                                    '.triggerHandler()'
                                                  ],
                                          'content' => [
                                                         'While ',
                                                         ' will operate on all elements matched by the jQuery object, ',
                                                         ' only affects the first matched element.'
                                                       ]
                                        },
                                        {
                                          'code' => '.triggerHandler()',
                                          'content' => [
                                                         'Events triggered with ',
                                                         ' do not bubble up the DOM hierarchy; if they are not handled by the target element directly, they do nothing.'
                                                       ]
                                        },
                                        {
                                          'code' => [
                                                    '.triggerHandler()',
                                                    'undefined'
                                                  ],
                                          'content' => [
                                                         'Instead of returning the jQuery object (to allow chaining), ',
                                                         ' returns whatever value was returned by the last handler it caused to be executed. If no handlers are triggered, it returns '
                                                       ]
                                        }
                                      ]
                              },
                        'p' => [
                               {
                                 'a' => {
                                        'href' => '/trigger/',
                                        'code' => '.trigger()'
                                      },
                                 'content' => [
                                                ' executes all handlers bound with jQuery for the event type.  It will also execute any method called ',
                                                ' found on the element.  The behavior of this method is similar to ',
                                                ', with the following exceptions:'
                                              ],
                                 'code' => [
                                           '.triggerHandler( eventType )',
                                           'on{eventType}()'
                                         ]
                               },
                               {
                                 'code' => {
                                           'a' => {
                                                  'content' => '.trigger()',
                                                  'href' => '/trigger/'
                                                }
                                         },
                                 'content' => [
                                                'For more information on this method, see the discussion for ',
                                                '.'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'html' => '
<button id="old">.trigger( "focus" )</button>
<button id="new">.triggerHandler( "focus" )</button><br><br>

<input type="text" value="To Be Focused">
',
                       'desc' => 'If you called .triggerHandler() on a focus event - the browser\'s default focus action would not be triggered, only the event handlers bound to the focus event.',
                       'code' => '
$( "#old" ).click(function() {
  $( "input" ).trigger( "focus" );
});
$( "#new" ).click(function() {
  $( "input" ).triggerHandler( "focus" );
});
$( "input" ).focus(function() {
  $( "<span>Focused!</span>" ).appendTo( "body" ).fadeOut( 1000 );
});
'
                     },
          'signature' => [
                         {
                           'added' => '1.2',
                           'argument' => {
                                         'eventType' => {
                                                        'desc' => {
                                                                  'content' => [
                                                                                 'A string containing a JavaScript event type, such as ',
                                                                                 ' or ',
                                                                                 '.'
                                                                               ],
                                                                  'code' => [
                                                                            'click',
                                                                            'submit'
                                                                          ]
                                                                },
                                                        'type' => 'String'
                                                      },
                                         'extraParameters' => {
                                                              'desc' => 'Additional parameters to pass along to the event handler.',
                                                              'optional' => 'true',
                                                              'type' => {
                                                                        'PlainObject' => {},
                                                                        'Array' => {}
                                                                      }
                                                            }
                                       }
                         },
                         {
                           'added' => '1.3',
                           'argument' => {
                                         'event' => {
                                                    'type' => 'Event',
                                                    'desc' => {
                                                              'a' => {
                                                                     'code' => 'jQuery.Event',
                                                                     'href' => '/category/events/event-object/'
                                                                   },
                                                              'content' => [
                                                                             'A ',
                                                                             ' object.'
                                                                           ]
                                                            }
                                                  },
                                         'extraParameters' => {
                                                              'type' => {
                                                                        'PlainObject' => {},
                                                                        'Array' => {}
                                                                      },
                                                              'optional' => 'true',
                                                              'desc' => 'Additional parameters to pass along to the event handler.'
                                                            }
                                       }
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/unbind.xml ####
Possible keys are: title return desc category longdesc example type name signature
$VAR1 = {
          'title' => '.unbind()',
          'return' => 'jQuery',
          'desc' => 'Remove a previously-attached event handler from the elements.',
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        }
                      ],
          'longdesc' => {
                        'div' => {
                                 'class' => 'warning',
                                 'p' => {
                                        'strong' => 'Note:',
                                        'content' => [
                                                       ' Using a proxied function to unbind an event on an element will unbind all proxied functions on that element, as the same proxy function is used for all proxied events. To allow unbinding a specific event, use unique class names on the event (e.g. ',
                                                       ', ',
                                                       ') when attaching them.'
                                                     ],
                                        'code' => [
                                                  'click.proxy1',
                                                  'click.proxy2'
                                                ]
                                      }
                               },
                        'h4' => [
                                'Using Namespaces',
                                'Using the Event Object'
                              ],
                        'p' => [
                               {
                                 'a' => [
                                        {
                                          'code' => '.on()',
                                          'href' => '/on/'
                                        },
                                        {
                                          'href' => '/off/',
                                          'code' => '.off()'
                                        }
                                      ],
                                 'code' => [
                                           '.bind()',
                                           '.unbind()',
                                           '.unbind()'
                                         ],
                                 'content' => [
                                                'Event handlers attached with ',
                                                ' can be removed with ',
                                                '. (As of jQuery 1.7, the ',
                                                ' and ',
                                                ' methods are preferred to attach and remove event handlers on elements.) In the simplest case, with no arguments, ',
                                                ' removes all handlers attached to the elements:'
                                              ]
                               },
                               'This version removes the handlers regardless of type. To be more precise, we can pass an event type:',
                               {
                                 'code' => 'click',
                                 'content' => [
                                                'By specifying the ',
                                                ' event type, only handlers for that event type will be unbound. This approach can still have negative ramifications if other scripts might be attaching behaviors to the same element, however. Robust and extensible applications typically demand the two-argument version for this reason:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'By naming the handler, we can be assured that no other functions are accidentally removed. Note that the following will ',
                                                ' work:'
                                              ],
                                 'em' => 'not'
                               },
                               'Even though the two functions are identical in content, they are created separately and so JavaScript is free to keep them as distinct function objects. To unbind a particular handler, we need a reference to that function and not a different one that happens to do the same thing.',
                               {
                                 'code' => [
                                           '.bind()',
                                           '.'
                                         ],
                                 'content' => [
                                                'Instead of maintaining references to handlers in order to unbind them, we can namespace the events and use this capability to narrow the scope of our unbinding actions. As shown in the discussion for the ',
                                                ' method, namespaces are defined by using a period (',
                                                ') character when binding a handler:'
                                              ]
                               },
                               'When a handler is bound in this fashion, we can still unbind it the normal way:',
                               'However, if we want to avoid affecting other handlers, we can be more specific:',
                               'We can also unbind all of the handlers in a namespace, regardless of event type:',
                               'It is particularly useful to attach namespaces to event bindings when we are developing plug-ins or otherwise writing code that may interact with other event-handling code in the future.',
                               {
                                 'code' => '.unbind()',
                                 'content' => [
                                                'The third form of the ',
                                                ' method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:'
                                              ]
                               },
                               {
                                 'content' => [
                                                'The handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for ',
                                                ' to know which handler to remove.
This example is also an illustration of a closure. Since the handler refers to the ',
                                                ' variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.'
                                              ],
                                 'code' => [
                                           '.unbind()',
                                           'timesClicked'
                                         ]
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
$( "#foo" ).unbind();
    '
                                 },
                                 {
                                   'code' => '
$( "#foo").unbind( "click" );
    '
                                 },
                                 {
                                   'code' => '
var handler = function() {
  alert( "The quick brown fox jumps over the lazy dog." );
};
$( "#foo" ).bind( "click", handler );
$( "#foo" ).unbind( "click", handler );
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).bind( "click", function() {
  alert( "The quick brown fox jumps over the lazy dog." );
});

// Will NOT work
$( "#foo" ).unbind( "click", function() {
  alert( "The quick brown fox jumps over the lazy dog." );
});
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).bind( "click.myEvents", handler );
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).unbind( "click" );
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).unbind( "click.myEvents" );
    '
                                 },
                                 {
                                   'code' => '
$( "#foo" ).unbind( ".myEvents" );
    '
                                 },
                                 {
                                   'code' => '
var timesClicked = 0;
$( "#foo" ).bind( "click", function( event ) {
  alert( "The quick brown fox jumps over the lazy dog." );
  timesClicked++;
  if ( timesClicked >= 3 ) {
    $( this ).unbind( event );
  }
});
    '
                                 }
                               ]
                      },
          'example' => [
                       {
                         'desc' => 'Can bind and unbind events to the colored button.',
                         'html' => '
<button id="theone">Does nothing...</button>
<button id="bind">Bind Click</button>
<button id="unbind">Unbind Click</button>
<div style="display:none;">Click!</div>
',
                         'css' => '
  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }
',
                         'code' => '
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "#theone" )
    .bind( "click", aClick )
    .text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "#theone" )
    .unbind( "click", aClick )
    .text( "Does nothing..." );
});
'
                       },
                       {
                         'code' => '
$( "p" ).unbind();
',
                         'desc' => 'To unbind all events from all paragraphs, write:'
                       },
                       {
                         'code' => '
$( "p" ).unbind( "click" );
',
                         'desc' => 'To unbind all click events from all paragraphs, write:'
                       },
                       {
                         'desc' => 'To unbind just one previously bound handler, pass the function in as the second argument:',
                         'code' => '
var foo = function() {
  // Code to handle some kind of event
};

$( "p" ).bind( "click", foo ); // ... Now foo will be called when paragraphs are clicked ...

$( "p" ).unbind( "click", foo ); // ... foo will no longer be called.
'
                       }
                     ],
          'type' => 'method',
          'name' => 'unbind',
          'signature' => [
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'The function that is to be no longer executed.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'optional' => 'true'
                                                    },
                                         'eventType' => {
                                                        'desc' => {
                                                                  'code' => [
                                                                            'click',
                                                                            'submit'
                                                                          ],
                                                                  'content' => [
                                                                                 'A string containing a JavaScript event type, such as ',
                                                                                 ' or ',
                                                                                 '.'
                                                                               ]
                                                                },
                                                        'type' => 'String'
                                                      }
                                       }
                         },
                         {
                           'added' => '1.4.3',
                           'argument' => {
                                         'eventType' => {
                                                        'desc' => {
                                                                  'content' => [
                                                                                 'A string containing a JavaScript event type, such as ',
                                                                                 ' or ',
                                                                                 '.'
                                                                               ],
                                                                  'code' => [
                                                                            'click',
                                                                            'submit'
                                                                          ]
                                                                },
                                                        'type' => 'String'
                                                      },
                                         'false' => {
                                                    'type' => 'Boolean',
                                                    'desc' => {
                                                              'content' => [
                                                                             'Unbinds the corresponding \'return false\' function that was bound using ',
                                                                             '.'
                                                                           ],
                                                              'code' => '.bind( eventType, false )'
                                                            }
                                                  }
                                       }
                         },
                         {
                           'added' => '1.0',
                           'argument' => {
                                         'type' => 'Event',
                                         'name' => 'event',
                                         'desc' => {
                                                   'a' => {
                                                          'href' => '/category/events/event-object/',
                                                          'code' => 'jQuery.Event'
                                                        },
                                                   'content' => [
                                                                  'A ',
                                                                  ' object.'
                                                                ]
                                                 }
                                       }
                         },
                         {
                           'added' => '1.0'
                         }
                       ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/undelegate.xml ####
Possible keys are: signature name type example longdesc category desc return title
$VAR1 = {
          'signature' => [
                         {
                           'added' => '1.4.2'
                         },
                         {
                           'added' => '1.4.2',
                           'argument' => {
                                         'selector' => {
                                                       'desc' => 'A selector which will be used to filter the event results.',
                                                       'type' => 'String'
                                                     },
                                         'eventType' => {
                                                        'type' => 'String',
                                                        'desc' => 'A string containing a JavaScript event type, such as "click" or "keydown"'
                                                      }
                                       }
                         },
                         {
                           'argument' => {
                                         'handler' => {
                                                      'desc' => 'A function to execute at the time the event is triggered.',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  },
                                                      'type' => 'Function'
                                                    },
                                         'selector' => {
                                                       'desc' => 'A selector which will be used to filter the event results.',
                                                       'type' => 'String'
                                                     },
                                         'eventType' => {
                                                        'desc' => 'A string containing a JavaScript event type, such as "click" or "keydown"',
                                                        'type' => 'String'
                                                      }
                                       },
                           'added' => '1.4.2'
                         },
                         {
                           'argument' => {
                                         'events' => {
                                                     'desc' => 'An object of one or more event types and previously bound functions to unbind from them.',
                                                     'type' => 'PlainObject'
                                                   },
                                         'selector' => {
                                                       'desc' => 'A selector which will be used to filter the event results.',
                                                       'type' => 'String'
                                                     }
                                       },
                           'added' => '1.4.3'
                         },
                         {
                           'argument' => {
                                         'desc' => 'A string containing a namespace to unbind all events from.',
                                         'name' => 'namespace',
                                         'type' => 'String'
                                       },
                           'added' => '1.6'
                         }
                       ],
          'name' => 'undelegate',
          'type' => 'method',
          'example' => [
                       {
                         'css' => '
  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }
',
                         'desc' => 'Can bind and unbind events to the colored button.',
                         'html' => '
<button id="theone">Does nothing...</button>
<button id="bind">Bind Click</button>
<button id="unbind">Unbind Click</button>
<div style="display:none;">Click!</div>
',
                         'code' => '
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .delegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .undelegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Does nothing..." );
});
'
                       },
                       {
                         'desc' => 'To unbind all delegated events from all paragraphs, write:',
                         'code' => '
$( "p" ).undelegate();
'
                       },
                       {
                         'desc' => 'To unbind all delegated click events from all paragraphs, write:',
                         'code' => '
$( "p" ).undelegate( "click" );
'
                       },
                       {
                         'code' => '
var foo = function () {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).delegate( "p", "click", foo );

// ... foo will no longer be called.
$( "body" ).undelegate( "p", "click", foo );
',
                         'desc' => 'To undelegate just one previously bound handler, pass the function in as the third argument:'
                       },
                       {
                         'desc' => 'To unbind all delegated events by their namespace:',
                         'code' => '
var foo = function() {
  // Code to handle some kind of event
};

// Delegate events under the ".whatever" namespace
$( "form" ).delegate( ":button", "click.whatever", foo );

$( "form" ).delegate( "input[type=\'text\'] ", "keypress.whatever", foo );

// Unbind all events delegated under the ".whatever" namespace
$( "form" ).undelegate( ".whatever" );
'
                       }
                     ],
          'longdesc' => {
                        'p' => {
                               'a' => [
                                      {
                                        'href' => '/delegate/',
                                        'code' => '.delegate()'
                                      },
                                      {
                                        'href' => '/on/',
                                        'code' => '.on()'
                                      },
                                      {
                                        'code' => '.off()',
                                        'href' => '/off/'
                                      }
                                    ],
                               'code' => '.undelegate()',
                               'strong' => 'As of jQuery 1.7',
                               'content' => [
                                              'The ',
                                              ' method is a way of removing event handlers that have been bound using ',
                                              '. ',
                                              ', the ',
                                              ' and ',
                                              ' methods are preferred for attaching and removing event handlers.'
                                            ]
                             }
                      },
          'category' => [
                        {
                          'slug' => 'events/event-handler-attachment'
                        },
                        {
                          'slug' => 'version/1.4.2'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        },
                        {
                          'slug' => 'version/1.6'
                        }
                      ],
          'desc' => 'Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.',
          'return' => 'jQuery',
          'title' => '.undelegate()'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/unload.xml ####
Possible keys are: category name type example longdesc deprecated signature return title note desc
$VAR1 = {
          'category' => [
                        {
                          'slug' => 'events/document-loading'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4.3'
                        },
                        {
                          'slug' => 'deprecated/deprecated-1.8'
                        }
                      ],
          'name' => 'unload',
          'type' => 'method',
          'example' => {
                       'code' => '
$( window ).unload(function() {
  return "Bye now!";
});
  ',
                       'desc' => 'To display an alert when a page is unloaded:'
                     },
          'longdesc' => {
                        'div' => {
                                 'p' => {
                                        'content' => [
                                                       'The exact handling of the ',
                                                       ' event has varied from version to version of browsers. For example, some versions of Firefox trigger the event when a link is followed, but not when the window is closed. In practical usage, behavior should be tested on all supported browsers and contrasted with the similar ',
                                                       ' event.'
                                                     ],
                                        'code' => [
                                                  'unload',
                                                  'beforeunload'
                                                ]
                                      },
                                 'class' => 'warning'
                               },
                        'p' => [
                               {
                                 'content' => [
                                                'This method is a shortcut for ',
                                                '.'
                                              ],
                                 'code' => '.on( "unload", handler )'
                               },
                               {
                                 'content' => [
                                                'The ',
                                                ' event is sent to the ',
                                                ' element when the user navigates away from the page. This could mean one of many things. The user could have clicked on a link to leave the page, or typed in a new URL in the address bar. The forward and back buttons will trigger the event. Closing the browser window will cause the event to be triggered. Even a page reload will first create an ',
                                                ' event.'
                                              ],
                                 'code' => [
                                           'unload',
                                           'window',
                                           'unload'
                                         ]
                               },
                               {
                                 'content' => [
                                                'Any ',
                                                ' event handler should be bound to the ',
                                                ' object:'
                                              ],
                                 'code' => [
                                           'unload',
                                           'window'
                                         ]
                               },
                               {
                                 'code' => [
                                           'alert()',
                                           'confirm()',
                                           'prompt()',
                                           'unload',
                                           '.preventDefault()'
                                         ],
                                 'content' => [
                                                'This event is available so that scripts can perform cleanup when the user leaves the page. Most browsers will ignore calls to ',
                                                ', ',
                                                ' and ',
                                                ' inside the event handler. The string you return may be used in a confirmation dialog, but not all browsers support this. It is not possible to cancel the ',
                                                ' event with ',
                                                '.'
                                              ]
                               }
                             ],
                        'pre' => {
                                 'code' => '
$( window ).unload(function() {
  return "Handler for .unload() called.";
});
    '
                               }
                      },
          'deprecated' => '1.8',
          'signature' => [
                         {
                           'argument' => {
                                         'type' => 'Function',
                                         'name' => 'handler',
                                         'argument' => {
                                                       'name' => 'eventObject',
                                                       'type' => 'Event'
                                                     },
                                         'desc' => 'A function to execute when the event is triggered.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'argument' => {
                                         'eventData' => {
                                                        'desc' => 'A plain object of data that will be passed to the event handler.',
                                                        'type' => 'Anything',
                                                        'optional' => 'true'
                                                      },
                                         'handler' => {
                                                      'desc' => 'A function to execute each time the event is triggered.',
                                                      'type' => 'Function',
                                                      'argument' => {
                                                                    'type' => 'Event',
                                                                    'name' => 'eventObject'
                                                                  }
                                                    }
                                       },
                           'added' => '1.4.3'
                         }
                       ],
          'return' => 'jQuery',
          'title' => '.unload()',
          'note' => {
                    'data-event' => 'unload',
                    'id' => 'detach-shorthand',
                    'type' => 'additional'
                  },
          'desc' => 'Bind an event handler to the "unload" JavaScript event.'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/unwrap.xml ####
Possible keys are: desc return title signature type name example longdesc category
$VAR1 = {
          'desc' => 'Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.',
          'return' => 'jQuery',
          'title' => '.unwrap()',
          'signature' => [
                         {
                           'added' => '1.4'
                         },
                         {
                           'added' => '3.0',
                           'argument' => {
                                         'desc' => 'A selector to check the parent element against. If an element\'s parent does not match the selector, the element won\'t be unwrapped.',
                                         'optional' => 'true',
                                         'type' => 'String',
                                         'name' => 'selector'
                                       }
                         }
                       ],
          'type' => 'method',
          'name' => 'unwrap',
          'example' => {
                       'desc' => 'Wrap/unwrap a div around each of the paragraphs.',
                       'html' => '<button>wrap/unwrap</button>
<p>Hello</p>
<p>cruel</p>
<p>World</p>',
                       'css' => '
  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }
',
                       'code' => '
var pTags = $( "p" );
$( "button" ).click(function() {
  if ( pTags.parent().is( "div" ) ) {
    pTags.unwrap();
  } else {
    pTags.wrap( "<div></div>" );
  }
});
'
                     },
          'longdesc' => {
                        'p' => {
                               'content' => [
                                              'The ',
                                              ' method removes the element\'s parent. This is effectively the inverse of the ',
                                              ' method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.'
                                            ],
                               'code' => [
                                         '.unwrap()',
                                         {
                                           'a' => {
                                                  'content' => '.wrap()',
                                                  'href' => '/wrap/'
                                                }
                                         }
                                       ]
                             }
                      },
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-around'
                        },
                        {
                          'slug' => 'manipulation/dom-removal'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/val.xml ####
Possible keys are: entry desc
$VAR1 = {
          'entry' => {
                     'val' => {
                              'desc' => 'Set the value of each element in the set of matched elements.',
                              'return' => 'jQuery',
                              'signature' => [
                                             {
                                               'added' => '1.0',
                                               'argument' => {
                                                             'desc' => 'A string of text, a number, or an array of strings corresponding to the value of each matched element to set as selected/checked.',
                                                             'type' => {
                                                                       'String' => {},
                                                                       'Number' => {},
                                                                       'Array' => {}
                                                                     },
                                                             'name' => 'value'
                                                           }
                                             },
                                             {
                                               'added' => '1.4',
                                               'argument' => {
                                                             'desc' => {
                                                                       'code' => 'this',
                                                                       'content' => [
                                                                                      'A function returning the value to set. ',
                                                                                      ' is the current element. Receives the index position of the element in the set and the old value as arguments.'
                                                                                    ]
                                                                     },
                                                             'argument' => {
                                                                           'value' => {
                                                                                      'type' => 'String'
                                                                                    },
                                                                           'index' => {
                                                                                      'type' => 'Integer'
                                                                                    }
                                                                         },
                                                             'return' => {
                                                                         'type' => 'String'
                                                                       },
                                                             'name' => 'function',
                                                             'type' => 'Function'
                                                           }
                                             }
                                           ],
                              'example' => [
                                           {
                                             'code' => '
$( "button" ).click(function() {
  var text = $( this ).text();
  $( "input" ).val( text );
});
',
                                             'html' => '
<div>
  <button>Feed</button>
  <button>the</button>
  <button>Input</button>
</div>
<input type="text" value="click a button">
',
                                             'desc' => 'Set the value of an input box.',
                                             'css' => '
  button {
    margin: 4px;
    cursor: pointer;
  }
  input {
    margin: 4px;
    color: blue;
  }
'
                                           },
                                           {
                                             'desc' => 'Use the function argument to modify the value of an input box.',
                                             'html' => '
<p>Type something and then click or tab out of the input.</p>
<input type="text" value="type something">
',
                                             'code' => '
$( "input" ).on( "blur", function() {
  $( this ).val(function( i, val ) {
    return val.toUpperCase();
  });
});
'
                                           },
                                           {
                                             'css' => '
  body {
    color: blue;
  }
',
                                             'html' => '
<select id="single">
  <option>Single</option>
  <option>Single2</option>
</select>

<select id="multiple" multiple="multiple">
  <option selected="selected">Multiple</option>
  <option>Multiple2</option>
  <option selected="selected">Multiple3</option>
</select>

<br>
<input type="checkbox" name="checkboxname" value="check1"> check1
<input type="checkbox" name="checkboxname" value="check2"> check2
<input type="radio" name="r" value="radio1"> radio1
<input type="radio" name="r" value="radio2"> radio2
',
                                             'desc' => 'Set a single select, a multiple select, checkboxes and a radio button .',
                                             'code' => '
$( "#single" ).val( "Single2" );
$( "#multiple" ).val([ "Multiple2", "Multiple3" ]);
$( "input").val([ "check1", "check2", "radio1" ]);
'
                                           }
                                         ],
                              'longdesc' => {
                                            'pre' => {
                                                     'code' => '
$( "input:text.items" ).val(function( index, value ) {
  return value + " " + this.className;
});
      '
                                                   },
                                            'p' => [
                                                   'This method is typically used to set the values of form fields. ',
                                                   {
                                                     'content' => [
                                                                    ' allows you to pass an array of element values. This is useful when working on a jQuery object containing elements like ',
                                                                    ', ',
                                                                    ', and ',
                                                                    's inside of a ',
                                                                    '. In this case, the ',
                                                                    's and the ',
                                                                    's having a ',
                                                                    ' that matches one of the elements of the array will be checked or selected while those having a ',
                                                                    ' that don\'t match one of the elements of the array will be unchecked or unselected, depending on the type. In case of ',
                                                                    's that are part of a radio group and ',
                                                                    's, any previously selected element will be deselected.'
                                                                  ],
                                                     'code' => [
                                                               'val()',
                                                               '<input type="checkbox">',
                                                               '<input type="radio">',
                                                               '<option>',
                                                               '<select>',
                                                               'input',
                                                               'option',
                                                               'value',
                                                               'value',
                                                               '<input type="radio">',
                                                               '<select>'
                                                             ]
                                                   },
                                                   {
                                                     'code' => [
                                                               'value',
                                                               'change',
                                                               '.trigger( "change" )'
                                                             ],
                                                     'content' => [
                                                                    'Setting values using this method (or using the native ',
                                                                    ' property) does not cause the dispatch of the ',
                                                                    ' event. For this reason, the relevant event handlers will not be executed. If you want to execute them, you should call ',
                                                                    ' after setting the value.'
                                                                  ]
                                                   },
                                                   {
                                                     'code' => '.val()',
                                                     'content' => [
                                                                    'The ',
                                                                    ' method allows us to set the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element\'s index and its current value: '
                                                                  ]
                                                   },
                                                   'This example appends the string " items" to the text inputs\' values.'
                                                 ]
                                          },
                              'type' => 'method',
                              'category' => [
                                            {
                                              'slug' => 'attributes'
                                            },
                                            {
                                              'slug' => 'forms'
                                            },
                                            {
                                              'slug' => 'manipulation/general-attributes'
                                            },
                                            {
                                              'slug' => 'version/1.0'
                                            },
                                            {
                                              'slug' => 'version/1.4'
                                            }
                                          ]
                            }
                   },
          'desc' => 'Get the current value of the first element in the set of matched elements or set the value of every matched element.'
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/visible-selector.xml ####
Possible keys are: title return sample note desc category longdesc example type name signature
$VAR1 = {
          'title' => ':visible Selector',
          'return' => '',
          'sample' => ':visible',
          'note' => {
                    'jquery-selector-extension' => {
                                                   'data-selector' => ':visible',
                                                   'type' => 'additional'
                                                 },
                    'hidden-forces-layout' => {
                                              'type' => 'additional'
                                            }
                  },
          'desc' => 'Selects all elements that are visible.',
          'category' => [
                        {
                          'slug' => 'selectors/jquery-selector-extensions'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'selectors/visibility-filter-selectors'
                        }
                      ],
          'longdesc' => {
                        'p' => [
                               'Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.',
                               {
                                 'content' => [
                                                'Elements with ',
                                                ' or ',
                                                ' are considered visible, since they still consume space in the layout.'
                                              ],
                                 'code' => [
                                           'visibility: hidden',
                                           'opacity: 0'
                                         ]
                               },
                               'Elements that are not in a document are considered hidden; jQuery does not have a way to know if they will be visible when appended to a document since it depends on the applicable styles.',
                               {
                                 'a' => {
                                        'code' => ':hidden',
                                        'href' => '/hidden-selector/'
                                      },
                                 'content' => [
                                                'This selector is the opposite of the ',
                                                ' selector. So, every element selected by ',
                                                ' isn\'t selected by ',
                                                ' and vice versa.'
                                              ],
                                 'code' => [
                                           ':visible',
                                           ':hidden'
                                         ]
                               },
                               {
                                 'code' => [
                                           'option',
                                           'selected'
                                         ],
                                 'content' => [
                                                'All ',
                                                ' elements are considered hidden, regardless of their ',
                                                ' state.'
                                              ]
                               },
                               'During animations that hide an element, the element is considered visible until the end of the animation. During animations to show an element, the element is considered visible at the start at the animation.',
                               {
                                 'a' => {
                                        'content' => 'release notes',
                                        'href' => 'http://blog.jquery.com/2009/02/20/jquery-1-3-2-released/'
                                      },
                                 'code' => ':visible',
                                 'content' => [
                                                'How ',
                                                ' is calculated was changed in jQuery 1.3.2. The ',
                                                ' outline the changes in more detail.'
                                              ]
                               },
                               {
                                 'a' => {
                                        'href' => '/hidden-selector/',
                                        'code' => ':hidden'
                                      },
                                 'code' => [
                                           ':visible',
                                           ':visible',
                                           'br',
                                           ':visible'
                                         ],
                                 'content' => [
                                                'jQuery 3 slightly modifies the meaning of ',
                                                ' (and therefore of ',
                                                '). Starting with this version, elements will be considered ',
                                                ' if they have any layout boxes, including those of zero width and/or height. For example, ',
                                                ' elements and inline elements with no content will be selected by the ',
                                                ' selector.'
                                              ]
                               }
                             ]
                      },
          'example' => {
                       'code' => '
$( "div:visible" ).click(function() {
  $( this ).css( "background", "yellow" );
});
$( "button" ).click(function() {
  $( "div:hidden" ).show( "fast" );
});
',
                       'desc' => 'Make all visible divs turn yellow on click.',
                       'html' => '
<button>Show hidden to see they don\'t change</button>
<div></div>
<div class="starthidden"></div>
<div></div>
<div></div>
<div style="display:none;"></div>
',
                       'css' => '
  div {
    width: 50px;
    height: 40px;
    margin: 5px;
    border: 3px outset green;
    float: left;
  }
  .starthidden {
    display: none;
  }
'
                     },
          'type' => 'selector',
          'name' => 'visible',
          'signature' => {
                         'added' => '1.0'
                       }
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/width.xml ####
Possible keys are: desc entry
$VAR1 = {
          'desc' => 'Get the current computed width for the first element in the set of matched elements or set the width of every matched element.',
          'entry' => {
                     'width' => {
                                'example' => {
                                             'css' => '
  div {
    width: 70px;
    height: 50px;
    float: left;
    margin: 5px;
    background: red;
    cursor: pointer;
  }
  .mod {
    background: blue;
    cursor: default;
  }
',
                                             'desc' => 'Change the width of each div the first time it is clicked (and change its color).',
                                             'html' => '
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
<div>d</div>
',
                                             'code' => '
var modWidth = 50;
$( "div" ).one( "click", function() {
  $( this ).width( modWidth ).addClass( "mod" );
  modWidth -= 8;
});
'
                                           },
                                'longdesc' => {
                                              'p' => [
                                                     {
                                                       'code' => [
                                                                 '.width("value")',
                                                                 '100px',
                                                                 '50%',
                                                                 'auto',
                                                                 'box-sizing'
                                                               ],
                                                       'content' => [
                                                                      'When calling ',
                                                                      ', the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the width (such as ',
                                                                      ', ',
                                                                      ', or ',
                                                                      '). Note that in modern browsers, the CSS width property does not include padding, border, or margin, unless the ',
                                                                      ' CSS property is used.'
                                                                    ]
                                                     },
                                                     'If no explicit unit is specified (like "em" or "%") then "px" is assumed.',
                                                     {
                                                       'code' => [
                                                                 '.width("value")',
                                                                 'box-sizing'
                                                               ],
                                                       'content' => [
                                                                      'Note that ',
                                                                      ' sets the content width of the box regardless of the value of the CSS ',
                                                                      ' property.'
                                                                    ]
                                                     }
                                                   ]
                                            },
                                'type' => 'method',
                                'category' => [
                                              {
                                                'slug' => 'css'
                                              },
                                              {
                                                'slug' => 'dimensions'
                                              },
                                              {
                                                'slug' => 'manipulation/style-properties'
                                              },
                                              {
                                                'slug' => 'version/1.0'
                                              },
                                              {
                                                'slug' => 'version/1.4.1'
                                              }
                                            ],
                                'signature' => [
                                               {
                                                 'added' => '1.0',
                                                 'argument' => {
                                                               'desc' => 'An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).',
                                                               'name' => 'value',
                                                               'type' => {
                                                                         'String' => {},
                                                                         'Number' => {}
                                                                       }
                                                             }
                                               },
                                               {
                                                 'argument' => {
                                                               'return' => {
                                                                           'type' => {
                                                                                     'String' => {},
                                                                                     'Number' => {}
                                                                                   }
                                                                         },
                                                               'name' => 'function',
                                                               'type' => 'Function',
                                                               'argument' => {
                                                                             'value' => {
                                                                                        'type' => 'Integer'
                                                                                      },
                                                                             'index' => {
                                                                                        'type' => 'Integer'
                                                                                      }
                                                                           },
                                                               'desc' => {
                                                                         'content' => [
                                                                                        'A function returning the width to set. Receives the index position of the element in the set and the old width as arguments. Within the function, ',
                                                                                        ' refers to the current element in the set.'
                                                                                      ],
                                                                         'code' => 'this'
                                                                       }
                                                             },
                                                 'added' => '1.4.1'
                                               }
                                             ],
                                'return' => 'jQuery',
                                'desc' => 'Set the CSS width of each element in the set of matched elements.'
                              }
                   }
        };
UNSUPPORTED type: #### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/wrap.xml ####
Possible keys are: desc title return signature example longdesc name type category
$VAR1 = {
          'desc' => 'Wrap an HTML structure around each element in the set of matched elements.',
          'title' => '.wrap()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'argument' => {
                                         'name' => 'wrappingElement',
                                         'type' => {
                                                   'Selector' => {},
                                                   'jQuery' => {},
                                                   'Element' => {},
                                                   'htmlString' => {}
                                                 },
                                         'desc' => 'A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. When you pass a jQuery collection containing more than one element, or a selector matching more than one element, the first element will be used.'
                                       },
                           'added' => '1.0'
                         },
                         {
                           'argument' => {
                                         'argument' => {
                                                       'name' => 'index',
                                                       'type' => 'Integer'
                                                     },
                                         'return' => {
                                                     'type' => {
                                                               'jQuery' => {},
                                                               'String' => {}
                                                             }
                                                   },
                                         'name' => 'function',
                                         'type' => 'Function',
                                         'desc' => {
                                                   'content' => [
                                                                  'A callback function returning the HTML content or jQuery object to wrap around the matched elements. Receives the index position of the element in the set as an argument. Within the function, ',
                                                                  ' refers to the current element in the set.'
                                                                ],
                                                   'code' => 'this'
                                                 }
                                       },
                           'added' => '1.4'
                         }
                       ],
          'example' => [
                       {
                         'code' => '
$( "p" ).wrap( "<div></div>" );
',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
',
                         'desc' => 'Wrap a new div around all of the paragraphs.',
                         'css' => '
  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }
'
                       },
                       {
                         'html' => '
<span>Span Text</span>
<strong>What about me?</strong>
<span>Another One</span>
',
                         'desc' => 'Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the <strong> (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.>',
                         'css' => '
  div {
    border: 2px blue solid;
    margin: 2px;
    padding: 2px;
  }
  p {
    background: yellow;
    margin: 2px;
    padding: 2px;
  }
  strong {
    color: red;
  }
',
                         'code' => '
$( "span" ).wrap( "<div><div><p><em><b></b></em></p></div></div>" );
'
                       },
                       {
                         'code' => '
$( "p" ).wrap( document.createElement( "div" ) );
',
                         'desc' => 'Wrap a new div around all of the paragraphs.',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
',
                         'css' => '
  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }
'
                       },
                       {
                         'css' => '
  div {
    border: 2px solid blue;
    margin: 2px;
    padding: 2px;
  }
  .doublediv {
    border-color: red;
  }
  p {
    background: yellow;
    margin: 4px;
    font-size: 14px;
  }
',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
<div class="doublediv"><div></div></div>
',
                         'desc' => 'Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn\'t move the object but just clones it to wrap around its target.',
                         'code' => '
$( "p" ).wrap( $( ".doublediv" ) );
'
                       }
                     ],
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' function can take any string or object that could be passed to the ',
                                                ' factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.'
                                              ],
                                 'code' => [
                                           '.wrap()',
                                           '$()'
                                         ]
                               },
                               'Consider the following HTML:',
                               {
                                 'code' => [
                                           '.wrap()',
                                           '<div>'
                                         ],
                                 'content' => [
                                                'Using ',
                                                ', we can insert an HTML structure around the inner ',
                                                ' elements like so:'
                                              ]
                               },
                               {
                                 'code' => [
                                           '<div>',
                                           '<div>'
                                         ],
                                 'content' => [
                                                'The new ',
                                                ' element is created on the fly and added to the DOM. The result is a new ',
                                                ' wrapped around each matched element:'
                                              ]
                               },
                               'The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the corresponding element. For example:',
                               {
                                 'content' => [
                                                'This will cause each ',
                                                ' to have a class corresponding to the text it wraps:'
                                              ],
                                 'code' => '<div>'
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".inner" ).wrap( "<div class=\'new\'></div>" );
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="new">
    <div class="inner">Hello</div>
  </div>
  <div class="new">
    <div class="inner">Goodbye</div>
  </div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".inner" ).wrap(function() {
  return "<div class=\'" + $( this ).text() + "\'></div>";
});
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="Hello">
    <div class="inner">Hello</div>
  </div>
  <div class="Goodbye">
    <div class="inner">Goodbye</div>
  </div>
</div>
    '
                                 }
                               ]
                      },
          'name' => 'wrap',
          'type' => 'method',
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-around'
                        },
                        {
                          'slug' => 'version/1.0'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ]
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/wrapAll.xml ####
Possible keys are: desc title return signature category longdesc example type name
$VAR1 = {
          'desc' => 'Wrap an HTML structure around all elements in the set of matched elements.',
          'title' => '.wrapAll()',
          'return' => 'jQuery',
          'signature' => [
                         {
                           'argument' => {
                                         'name' => 'wrappingElement',
                                         'type' => {
                                                   'Element' => {},
                                                   'Selector' => {},
                                                   'jQuery' => {},
                                                   'htmlString' => {}
                                                 },
                                         'desc' => 'A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.'
                                       },
                           'added' => '1.2'
                         },
                         {
                           'argument' => {
                                         'desc' => {
                                                   'content' => [
                                                                  'A callback function returning the HTML content or jQuery object to wrap around all the matched elements. Within the function, ',
                                                                  ' refers to the first element in the set. ',
                                                                  ', the callback was incorrectly called for every element in the set and received the index position of the element in the set as an argument.'
                                                                ],
                                                   'strong' => 'Prior to jQuery 3.0',
                                                   'code' => 'this'
                                                 },
                                         'return' => {
                                                     'type' => {
                                                               'String' => {},
                                                               'jQuery' => {}
                                                             }
                                                   },
                                         'type' => 'Function',
                                         'name' => 'function'
                                       },
                           'added' => '1.4'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-around'
                        },
                        {
                          'slug' => 'version/1.2'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'longdesc' => {
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".inner" ).wrapAll( "<div class=\'new\' />");
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="new">
    <div class="inner">Hello</div>
    <div class="inner">Goodbye</div>
  </div>
</div>
    '
                                 }
                               ],
                        'p' => [
                               {
                                 'code' => [
                                           '.wrapAll()',
                                           '$()'
                                         ],
                                 'content' => [
                                                'The ',
                                                ' function can take any string or object that could be passed to the ',
                                                ' function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.'
                                              ]
                               },
                               'Consider the following HTML:',
                               {
                                 'content' => [
                                                'Using ',
                                                ', we can insert an HTML structure around the inner ',
                                                ' elements like so:'
                                              ],
                                 'code' => [
                                           '.wrapAll()',
                                           '<div>'
                                         ]
                               },
                               {
                                 'content' => [
                                                'The new ',
                                                ' element is created on the fly and added to the DOM. The result is a new ',
                                                ' wrapped around all matched elements:'
                                              ],
                                 'code' => [
                                           '<div>',
                                           '<div>'
                                         ]
                               }
                             ]
                      },
          'example' => [
                       {
                         'code' => '
$( "p" ).wrapAll( "<div></div>" );
',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
',
                         'desc' => 'Wrap a new div around all of the paragraphs.',
                         'css' => '
  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }
'
                       },
                       {
                         'css' => '
  div {
    border: 2px blue solid;
    margin: 2px;
    padding: 2px;
  }
  p {
    background: yellow;
    margin: 2px;
    padding: 2px;
  }
  strong {
    color: red;
  }
',
                         'desc' => 'Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the <strong> (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.',
                         'html' => '
<span>Span Text</span>
<strong>What about me?</strong>
<span>Another One</span>
',
                         'code' => '
$( "span").wrapAll( "<div><div><p><em><b></b></em></p></div></div>" );
'
                       },
                       {
                         'code' => '
$( "p" ).wrapAll( document.createElement( "div" ) );
',
                         'css' => '
  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }
',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
',
                         'desc' => 'Wrap a new div around all of the paragraphs.'
                       },
                       {
                         'css' => '
  div {
    border: 2px solid blue;
    margin: 2px;
    padding: 2px;
  }
  .doublediv {
    border-color: red;
  }
  p {
    background: yellow;
    margin: 4px;
    font-size: 14px;
  }
',
                         'desc' => 'Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn\'t move the object but just clones it to wrap around its target.',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
<div class="doublediv"><div></div></div>
',
                         'code' => '
$( "p" ).wrapAll( $( ".doublediv" ) );
'
                       }
                     ],
          'type' => 'method',
          'name' => 'wrapAll'
        };
#### FILE: /home/tpoikela/Downloads/api.jquery.com-master/entries/wrapInner.xml ####
Possible keys are: desc return title signature category type name longdesc example
$VAR1 = {
          'desc' => 'Wrap an HTML structure around the content of each element in the set of matched elements.',
          'return' => 'jQuery',
          'title' => '.wrapInner()',
          'signature' => [
                         {
                           'added' => '1.2',
                           'argument' => {
                                         'desc' => 'An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.',
                                         'type' => {
                                                   'htmlString' => {},
                                                   'Element' => {},
                                                   'Selector' => {},
                                                   'jQuery' => {}
                                                 },
                                         'name' => 'wrappingElement'
                                       }
                         },
                         {
                           'argument' => {
                                         'desc' => {
                                                   'code' => 'this',
                                                   'content' => [
                                                                  'A callback function which generates a structure to wrap around the content of the matched elements. Receives the index position of the element in the set as an argument. Within the function, ',
                                                                  ' refers to the current element in the set.'
                                                                ]
                                                 },
                                         'name' => 'function',
                                         'return' => {
                                                     'type' => 'String'
                                                   },
                                         'type' => 'Function',
                                         'argument' => {
                                                       'name' => 'index',
                                                       'type' => 'Integer'
                                                     }
                                       },
                           'added' => '1.4'
                         }
                       ],
          'category' => [
                        {
                          'slug' => 'manipulation/dom-insertion-around'
                        },
                        {
                          'slug' => 'version/1.2'
                        },
                        {
                          'slug' => 'version/1.4'
                        }
                      ],
          'type' => 'method',
          'name' => 'wrapInner',
          'longdesc' => {
                        'p' => [
                               {
                                 'content' => [
                                                'The ',
                                                ' function can take any string or object that could be passed to the ',
                                                ' factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.'
                                              ],
                                 'code' => [
                                           '.wrapInner()',
                                           '$()'
                                         ]
                               },
                               'Consider the following HTML:',
                               {
                                 'content' => [
                                                'Using ',
                                                ', we can insert an HTML structure around the content of each inner ',
                                                ' elements like so:'
                                              ],
                                 'code' => [
                                           '.wrapInner()',
                                           '<div>'
                                         ]
                               },
                               {
                                 'code' => [
                                           '<div>',
                                           '<div>'
                                         ],
                                 'content' => [
                                                'The new ',
                                                ' element is created on the fly and added to the DOM. The result is a new ',
                                                ' wrapped around the content of each matched element:'
                                              ]
                               },
                               'The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the content of the corresponding element. For example:',
                               {
                                 'content' => [
                                                'This will cause each ',
                                                ' to have a class corresponding to the text it wraps:'
                                              ],
                                 'code' => '<div>'
                               },
                               {
                                 'code' => '.wrapInner()',
                                 'content' => [
                                                ' When passing a selector string to the ',
                                                ' function, the expected input is well formed HTML with correctly closed tags. Examples of valid input include:'
                                              ],
                                 'strong' => 'Note:'
                               }
                             ],
                        'pre' => [
                                 {
                                   'code' => '
<div class="container">
  <div class="inner">Hello</div>
  <div class="inner">Goodbye</div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".inner" ).wrapInner( "<div class=\'new\'></div>");
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="inner">
    <div class="new">Hello</div>
  </div>
  <div class="inner">
    <div class="new">Goodbye</div>
  </div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( ".inner" ).wrapInner(function() {
  return "<div class=\'" + this.nodeValue + "\'></div>";
});
    '
                                 },
                                 {
                                   'code' => '
<div class="container">
  <div class="inner">
    <div class="Hello">Hello</div>
  </div>
  <div class="inner">
    <div class="Goodbye">Goodbye</div>
  </div>
</div>
    '
                                 },
                                 {
                                   'code' => '
$( elem ).wrapInner( "<div class=\'test\'></div>" );
$( elem ).wrapInner( "<div class=\\"test\\"></div>" );
    '
                                 }
                               ]
                      },
          'example' => [
                       {
                         'code' => '
$( "p" ).wrapInner( "<b></b>" );
',
                         'desc' => 'Selects all paragraphs and wraps a bold tag around each of its contents.',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
',
                         'css' => '
  p {
    background: #bbf;
  }
'
                       },
                       {
                         'css' => '
  div {
    border: 2px green solid;
    margin: 2px;
    padding: 2px;
  }
  p {
    background: yellow;
    margin: 2px;
    padding: 2px;
  }
',
                         'html' => '
Plain old text, or is it?
',
                         'desc' => 'Wraps a newly created tree of objects around the inside of the body.',
                         'code' => '
$( "body" ).wrapInner( "<div><div><p><em><b></b></em></p></div></div>" );
'
                       },
                       {
                         'desc' => 'Selects all paragraphs and wraps a bold tag around each of its contents.',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
',
                         'css' => '
  p {
    background: #9f9;
  }
',
                         'code' => '
$( "p" ).wrapInner( document.createElement( "b" ) );
'
                       },
                       {
                         'code' => '
$( "p" ).wrapInner( $( "<span class=\'red\'></span>" ) );
',
                         'css' => '
  p {
    background: #9f9;
  }
  .red {
    color: red;
  }
',
                         'desc' => 'Selects all paragraphs and wraps a jQuery object around each of its contents.',
                         'html' => '
<p>Hello</p>
<p>cruel</p>
<p>World</p>
'
                       }
                     ]
        };
